// Test de connexion MongoDB pour Render avec les nouvelles variables
const mongoBackup = require('./utils/mongoBackupManager');

async function testRenderBackupSystem() {
    console.log('üß™ TEST DU SYST√àME DE SAUVEGARDE RENDER');
    console.log('==========================================');
    
    // Afficher la configuration
    console.log('\nüìã Configuration MongoDB:');
    console.log(`   Username: ${process.env.MONGODB_USERNAME || 'NON D√âFINI'}`);
    console.log(`   Password: ${process.env.MONGODB_PASSWORD ? '***' : 'NON D√âFINI'}`);
    console.log(`   Cluster: ${process.env.MONGODB_CLUSTER_URL || 'NON D√âFINI'}`);
    console.log(`   Debug: ${process.env.DEBUG_BACKUP || 'false'}`);
    
    // Test de connexion
    console.log('\nüîå Test de connexion MongoDB...');
    const connected = await mongoBackup.connect();
    
    if (connected) {
        console.log('‚úÖ Connexion MongoDB r√©ussie !');
        
        // Test de sauvegarde
        console.log('\nüíæ Test de sauvegarde...');
        const backupResult = await mongoBackup.backupToMongo();
        
        if (backupResult.success) {
            console.log(`‚úÖ Sauvegarde r√©ussie: ${backupResult.backupCount} fichiers`);
            
            // Test de v√©rification d'int√©grit√©
            console.log('\nüîç Test de v√©rification d\'int√©grit√©...');
            const integrityOk = await mongoBackup.verifyBackupIntegrity();
            
            if (integrityOk) {
                console.log('‚úÖ Int√©grit√© des sauvegardes v√©rifi√©e');
            } else {
                console.log('‚ö†Ô∏è Probl√®me d\'int√©grit√© d√©tect√©');
            }
        } else {
            console.log('‚ùå √âchec de la sauvegarde:', backupResult.error);
        }
        
        await mongoBackup.disconnect();
    } else {
        console.log('‚ùå Impossible de se connecter √† MongoDB');
        console.log('\nüîß V√©rifications √† effectuer:');
        console.log('   1. Variables d\'environnement correctement d√©finies');
        console.log('   2. Mot de passe MongoDB correct');
        console.log('   3. IP autoris√©es sur MongoDB Atlas (0.0.0.0/0)');
        console.log('   4. Utilisateur avec permissions readWrite sur bagbot');
    }
    
    console.log('\n==========================================');
    console.log('üèÅ Test termin√©');
}

// Lancer le test
if (require.main === module) {
    testRenderBackupSystem().catch(error => {
        console.error('‚ùå Erreur lors du test:', error);
        process.exit(1);
    });
}

module.exports = { testRenderBackupSystem };