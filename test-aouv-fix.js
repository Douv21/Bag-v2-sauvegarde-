/**
 * Test de la correction AouV pour v√©rifier que les canaux s'enregistrent
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ === TEST DE LA CORRECTION AOUV ===\n');

try {
    // 1. V√©rifier le DataManager
    console.log('1Ô∏è‚É£ Test du DataManager...');
    const DataManager = require('./managers/DataManager');
    const dataManager = new DataManager();
    
    // V√©rifier que le type aouv_config est maintenant d√©fini
    const dataTypes = dataManager.dataTypes;
    const hasAouvConfig = dataTypes.hasOwnProperty('aouv_config');
    
    console.log(`‚úÖ Type 'aouv_config' d√©fini: ${hasAouvConfig}`);
    if (hasAouvConfig) {
        console.log(`‚úÖ Fichier mapp√©: ${dataTypes['aouv_config']}`);
    }

    // 2. Test de la sauvegarde/chargement
    console.log('\n2Ô∏è‚É£ Test de sauvegarde/chargement...');
    
    const testGuildId = '1360897918504271882';
    const testChannelId = '123456789012345678';
    
    // Simuler les donn√©es de test
    const testData = {
        [testGuildId]: {
            allowedChannels: [testChannelId],
            disabledBaseActions: [],
            disabledBaseTruths: [],
            customActions: [],
            customTruths: []
        }
    };
    
    // Test de sauvegarde
    try {
        await dataManager.saveData('aouv_config', testData);
        console.log('‚úÖ Sauvegarde: SUCCESS');
    } catch (error) {
        console.log(`‚ùå Sauvegarde: ERREUR - ${error.message}`);
    }
    
    // Test de chargement
    try {
        const loadedData = await dataManager.loadData('aouv_config', {});
        console.log('‚úÖ Chargement: SUCCESS');
        console.log(`‚úÖ Donn√©es charg√©es: ${JSON.stringify(loadedData, null, 2)}`);
    } catch (error) {
        console.log(`‚ùå Chargement: ERREUR - ${error.message}`);
    }

    // 3. V√©rifier les fichiers modifi√©s
    console.log('\n3Ô∏è‚É£ V√©rification des corrections dans les fichiers...');
    
    const filesToCheck = [
        'handlers/AouvConfigHandler.js',
        'commands/aouv.js',
        'commands/action.js',
        'commands/verite.js'
    ];
    
    for (const file of filesToCheck) {
        const filePath = path.join(__dirname, file);
        if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            const hasOldReference = content.includes("'aouv_config.json'");
            const hasNewReference = content.includes("'aouv_config'");
            
            console.log(`üìÑ ${file}:`);
            console.log(`  - Anciennes r√©f√©rences (.json): ${hasOldReference ? '‚ùå TROUV√âES' : '‚úÖ SUPPRIM√âES'}`);
            console.log(`  - Nouvelles r√©f√©rences: ${hasNewReference ? '‚úÖ PR√âSENTES' : '‚ùå MANQUANTES'}`);
        } else {
            console.log(`üìÑ ${file}: ‚ùå FICHIER MANQUANT`);
        }
    }

    // 4. V√©rifier le fichier de donn√©es
    console.log('\n4Ô∏è‚É£ V√©rification du fichier de donn√©es...');
    const aouvConfigPath = path.join(__dirname, 'data', 'aouv_config.json');
    
    if (fs.existsSync(aouvConfigPath)) {
        console.log('‚úÖ Fichier aouv_config.json existe');
        const data = JSON.parse(fs.readFileSync(aouvConfigPath, 'utf8'));
        console.log(`‚úÖ Guildes configur√©es: ${Object.keys(data).length}`);
        
        if (data[testGuildId]) {
            console.log(`‚úÖ Configuration pour guild ${testGuildId}: ${JSON.stringify(data[testGuildId], null, 2)}`);
        }
    } else {
        console.log('‚ÑπÔ∏è  Fichier aouv_config.json sera cr√©√© √† la premi√®re utilisation');
    }

    console.log('\n‚úÖ Test termin√© avec succ√®s !');
    console.log('\nüìù INSTRUCTIONS POUR TESTER:');
    console.log('1. Utilisez /config-aouv sur Discord');
    console.log('2. Allez dans Salons autoris√©s'); 
    console.log('3. Ajoutez un salon');
    console.log('4. V√©rifiez que "‚úÖ Salon autoris√©" s\'affiche sans erreur');

} catch (error) {
    console.error('‚ùå Erreur durant le test:', error);
    console.error('Stack:', error.stack);
}