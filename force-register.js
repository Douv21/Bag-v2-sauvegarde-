/**
 * SCRIPT DE FORCE REGISTRATION - COMMANDES DISCORD
 * Enregistrement robuste avec retry et v√©rification
 */

const { REST, Routes } = require('discord.js');
try { require('dotenv').config(); } catch {}
const fs = require('fs');
const path = require('path');

async function forceRegisterCommands() {
    console.log('üöÄ D√âBUT ENREGISTREMENT FORC√â');
    
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    const DISABLED_NAMES = new Set([
        'apercu-couleur',
        'mongodb-backup',
        'mongodb-diagnostic',
        'reset',
        'test-level-notif'
    ]);
    
    try {
        // 1. Charger toutes les commandes
        console.log('üìÇ Chargement des commandes...');
        const commands = [];
        const commandFiles = fs.readdirSync('./commands').filter(f => f.endsWith('.js'));
        
        for (const file of commandFiles) {
            try {
                const filePath = path.resolve('./commands', file);
                delete require.cache[filePath];
                const command = require(filePath);
                
                if (command && command.data && DISABLED_NAMES.has(command.data.name)) {
                    console.log(`  ‚õî ${command.data.name} (d√©sactiv√©e, ignor√©e)`);
                    continue;
                }

                if (command.data && command.execute) {
                    const commandJson = command.data.toJSON();
                    commands.push(commandJson);
                    console.log(`  ‚úÖ ${command.data.name}`);
                    
                    // Log sp√©cial pour arc-en-ciel
                    if (command.data.name === 'arc-en-ciel') {
                        console.log(`     üåà Permissions: ${commandJson.default_member_permissions}`);
                        console.log(`     üåà Sous-commandes: ${commandJson.options?.length}`);
                    }
                } else {
                    console.log(`  ‚ùå ${file}: Structure invalide`);
                }
            } catch (error) {
                console.error(`  ‚ùå ${file}: ${error.message}`);
            }
        }
        
        console.log(`üìä Total: ${commands.length} commandes √† enregistrer`);
        
        // 2. Supprimer les anciennes commandes
        console.log('üóëÔ∏è Suppression des anciennes commandes...');
        const targetGuildId = (process.env.GUILD_ID || '').trim();
        const isGuildTarget = Boolean(targetGuildId);

        if (isGuildTarget) {
            console.log(`   üß≠ Cible guilde: ${targetGuildId}`);
            await rest.put(
                Routes.applicationGuildCommands(process.env.CLIENT_ID, targetGuildId),
                { body: [] }
            );
        } else {
            await rest.put(
                Routes.applicationCommands(process.env.CLIENT_ID),
                { body: [] }
            );
        }
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 3. Enregistrement avec retry
        let success = false;
        let attempts = 0;
        const maxAttempts = 5;
        
        while (!success && attempts < maxAttempts) {
            attempts++;
            console.log(`üîÑ Tentative ${attempts}/${maxAttempts}...`);
            
            try {
                const result = await rest.put(
                    isGuildTarget
                        ? Routes.applicationGuildCommands(process.env.CLIENT_ID, targetGuildId)
                        : Routes.applicationCommands(process.env.CLIENT_ID),
                    { body: commands }
                );
                
                console.log(`‚úÖ Enregistrement r√©ussi! (${result.length} commandes)`);
                success = true;
                
            } catch (error) {
                console.error(`‚ùå Tentative ${attempts} √©chou√©e:`, error.message);
                
                if (error.status === 429) {
                    console.log('‚è≥ Rate limit, attente plus longue...');
                    await new Promise(resolve => setTimeout(resolve, 10000));
                } else {
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }
        }
        
        if (!success) {
            throw new Error(`√âchec apr√®s ${maxAttempts} tentatives`);
        }
        
        // 4. V√©rification finale
        console.log('üîç V√©rification finale...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        const registeredCommands = await rest.get(
            isGuildTarget
                ? Routes.applicationGuildCommands(process.env.CLIENT_ID, targetGuildId)
                : Routes.applicationCommands(process.env.CLIENT_ID)
        );
        console.log(`üìä Commandes confirm√©es sur Discord: ${registeredCommands.length}`);
        
        // V√©rifier arc-en-ciel sp√©cifiquement
        const arcEnCiel = registeredCommands.find(c => c.name === 'arc-en-ciel');
        if (arcEnCiel) {
            console.log('üåà /arc-en-ciel CONFIRM√âE!');
            console.log(`   - ID: ${arcEnCiel.id}`);
            console.log(`   - Permissions: ${arcEnCiel.default_member_permissions}`);
        } else {
            console.log('‚ùå /arc-en-ciel manquante');
        }
        
        // Liste finale
        console.log('\nüìã Commandes finales sur Discord:');
        registeredCommands
            .sort((a, b) => a.name.localeCompare(b.name))
            .forEach(cmd => console.log(`  - ${cmd.name}`));
        
        console.log('\n‚úÖ ENREGISTREMENT TERMIN√â AVEC SUCC√àS!');
        
    } catch (error) {
        console.error('‚ùå ERREUR CRITIQUE:', error);
        process.exit(1);
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    forceRegisterCommands();
}

module.exports = forceRegisterCommands;