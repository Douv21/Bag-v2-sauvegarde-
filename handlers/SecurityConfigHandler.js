const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

class SecurityConfigHandler {
  constructor(moderationManager) {
    this.moderationManager = moderationManager;
  }

  /**
   * G√©rer les interactions du menu de configuration de s√©curit√©
   * @param {StringSelectMenuInteraction} interaction - L'interaction du menu
   */
  async handleConfigVerifMenu(interaction) {
    try {
      const selectedValue = interaction.values[0];
      const guildId = interaction.guild.id;
      const config = await this.moderationManager.getSecurityConfig(guildId);

      switch (selectedValue) {
        case 'auto_verification':
          await this.showAutoVerificationConfig(interaction, config);
          break;
        case 'quarantine_system':
          await this.showQuarantineSystemConfig(interaction, config);
          break;
        case 'auto_actions':
          await this.showAutoActionsConfig(interaction, config);
          break;
        case 'notifications':
          await this.showNotificationsConfig(interaction, config);
          break;
        case 'exemptions':
          await this.showExemptionsConfig(interaction, config);
          break;
        case 'view_config':
          await this.showCompleteConfig(interaction, config);
          break;
        default:
          return interaction.reply({ 
            content: '‚ùå Option non reconnue.', 
            ephemeral: true 
          });
      }
    } catch (error) {
      console.error('Erreur menu config-verif:', error);
      return interaction.reply({ 
        content: '‚ùå Erreur lors du traitement du menu.', 
        ephemeral: true 
      });
    }
  }

  /**
   * Afficher la configuration de v√©rification automatique
   */
  async showAutoVerificationConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('üîç Configuration de la v√©rification automatique')
      .setColor(config.autoVerification?.enabled ? 0x51cf66 : 0x6c757d)
      .setTimestamp();

    let description = `**√âtat :** ${config.autoVerification?.enabled ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}\n\n`;

    if (config.autoVerification?.enabled) {
      description += '‚öôÔ∏è **Param√®tres actuels :**\n';
      
      if (config.autoVerification.minimumAccountAge) {
        description += `‚Ä¢ **√Çge minimum :** ${config.autoVerification.minimumAccountAge} jour(s)\n`;
      }
      
      if (config.autoVerification.maxRiskScore) {
        description += `‚Ä¢ **Score de risque max :** ${config.autoVerification.maxRiskScore}/100\n`;
      }
      
      if (config.autoVerification.multiAccountThreshold) {
        description += `‚Ä¢ **Seuil multi-comptes :** ${config.autoVerification.multiAccountThreshold}%\n`;
      }

      description += '\nüí° **Pour modifier :**\n';
      description += '‚Ä¢ Utilisez `/config-verif auto-verif`\n';
      description += '‚Ä¢ Configurez les actions avec `/config-verif actions-auto`';
    } else {
      description += 'üí° **Pour activer :**\n';
      description += 'Utilisez `/config-verif auto-verif activer:true`';
    }

    embed.setDescription(description);

    // Boutons d'action rapide
    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_toggle_auto')
          .setLabel(config.autoVerification?.enabled ? 'D√©sactiver' : 'Activer')
          .setStyle(config.autoVerification?.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
          .setEmoji(config.autoVerification?.enabled ? '‚ùå' : '‚úÖ'),
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * Afficher la configuration du syst√®me de quarantaine
   */
  async showQuarantineSystemConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('üîí Configuration du syst√®me de quarantaine')
      .setColor(config.accessControl?.quarantineRoleId ? 0x51cf66 : 0x6c757d)
      .setTimestamp();

    let description = '';

    if (config.accessControl?.quarantineRoleId) {
      const quarantineRole = interaction.guild.roles.cache.get(config.accessControl.quarantineRoleId);
      const verifiedRole = config.accessControl?.verifiedRoleId ? 
        interaction.guild.roles.cache.get(config.accessControl.verifiedRoleId) : null;

      description += '‚úÖ **Syst√®me configur√©**\n\n';
      description += `üîí **R√¥le quarantaine :** ${quarantineRole ? quarantineRole.name : 'R√¥le introuvable'}\n`;
      
      if (verifiedRole) {
        description += `‚úÖ **R√¥le v√©rifi√© :** ${verifiedRole.name}\n`;
      }

      description += '\nüèóÔ∏è **Fonctionnement automatique :**\n';
      description += '‚Ä¢ Canaux cr√©√©s automatiquement pour chaque membre\n';
      description += '‚Ä¢ Canal texte et vocal priv√©s\n';
      description += '‚Ä¢ Cat√©gorie "üîí QUARANTAINE" g√©r√©e automatiquement\n';
      description += '‚Ä¢ Suppression automatique √† la lib√©ration\n\n';

      description += 'üí° **Commandes utiles :**\n';
      description += '‚Ä¢ `/quarantaine appliquer` - Mettre en quarantaine\n';
      description += '‚Ä¢ `/quarantaine liberer` - Lib√©rer de quarantaine\n';
      description += '‚Ä¢ `/quarantaine liste` - Voir les quarantaines actives';
    } else {
      description += '‚ùå **Syst√®me non configur√©**\n\n';
      description += 'üí° **Pour configurer :**\n';
      description += 'Utilisez `/config-verif quarantaine role-quarantaine:@RoleQuarantaine`';
    }

    embed.setDescription(description);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * Afficher la configuration des actions automatiques
   */
  async showAutoActionsConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('‚ö° Configuration des actions automatiques')
      .setColor(0x3498db)
      .setTimestamp();

    let description = '';

    if (config.autoVerification?.actions) {
      const actions = config.autoVerification.actions;
      description += '‚öôÔ∏è **Actions configur√©es :**\n\n';

      if (actions.recentAccount) {
        description += `üïê **Compte r√©cent :** ${this.getActionDisplay(actions.recentAccount)}\n`;
      }

      if (actions.multiAccount) {
        description += `üîç **Multi-comptes :** ${this.getActionDisplay(actions.multiAccount)}\n`;
      }

      if (actions.suspiciousName) {
        description += `üë§ **Nom suspect :** ${this.getActionDisplay(actions.suspiciousName)}\n`;
      }

      if (!actions.recentAccount && !actions.multiAccount && !actions.suspiciousName) {
        description += 'Aucune action configur√©e\n';
      }
    } else {
      description += '‚ùå **Aucune action configur√©e**\n';
    }

    description += '\nüí° **Pour configurer :**\n';
    description += 'Utilisez `/config-verif actions-auto`\n\n';

    description += '‚ö†Ô∏è **Important :**\n';
    description += '‚Ä¢ Les actions automatiques s\'ex√©cutent sans intervention\n';
    description += '‚Ä¢ Recommand√© : Commencer par "Quarantaine" ou "Approbation admin"\n';
    description += '‚Ä¢ Les actions "Kick" et "Ban" sont irr√©versibles';

    embed.setDescription(description);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * Afficher la configuration des notifications
   */
  async showNotificationsConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('üì¢ Configuration des notifications admin')
      .setColor(config.autoAlerts?.enabled ? 0x51cf66 : 0x6c757d)
      .setTimestamp();

    let description = `**√âtat :** ${config.autoAlerts?.enabled ? '‚úÖ Activ√©es' : '‚ùå D√©sactiv√©es'}\n\n`;

    if (config.autoAlerts?.enabled && config.autoAlerts.alertChannelId) {
      const alertChannel = interaction.guild.channels.cache.get(config.autoAlerts.alertChannelId);
      description += '‚öôÔ∏è **Configuration actuelle :**\n';
      description += `üì¢ **Canal d'alertes :** ${alertChannel ? `<#${alertChannel.id}>` : 'Canal introuvable'}\n`;

      if (config.autoAlerts.moderatorRoleId) {
        const modRole = interaction.guild.roles.cache.get(config.autoAlerts.moderatorRoleId);
        description += `üëÆ **R√¥le admin :** ${modRole ? modRole.name : 'R√¥le introuvable'}\n`;
      }

      if (config.autoVerification?.adminApproval?.timeoutMinutes) {
        description += `‚è∞ **D√©lai de d√©cision :** ${config.autoVerification.adminApproval.timeoutMinutes} minute(s)\n`;
      }

      description += '\nüí° **Fonctionnement :**\n';
      description += '‚Ä¢ Alertes avec boutons d\'action int√©gr√©s\n';
      description += '‚Ä¢ Mentions automatiques des mod√©rateurs\n';
      description += '‚Ä¢ Actions par d√©faut si pas de r√©ponse\n';
      description += '‚Ä¢ Historique complet des d√©cisions';
    } else {
      description += 'üí° **Pour configurer :**\n';
      description += 'Utilisez `/config-verif notifications canal-alertes:#votre-canal`';
    }

    embed.setDescription(description);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * Afficher la configuration des exemptions
   */
  async showExemptionsConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('üìù Configuration des exemptions')
      .setColor(0x51cf66)
      .setTimestamp();

    const userExemptions = config.whitelist?.userIds?.length || 0;
    const roleExemptions = config.whitelist?.roleIds?.length || 0;
    const totalExemptions = userExemptions + roleExemptions;

    let description = `**Total exemptions :** ${totalExemptions}\n\n`;

    description += 'üìä **R√©partition :**\n';
    description += `üë• **Utilisateurs exempt√©s :** ${userExemptions}\n`;
    description += `üé≠ **R√¥les exempt√©s :** ${roleExemptions}\n\n`;

    if (totalExemptions > 0) {
      description += 'üí° **Gestion :**\n';
      description += '‚Ä¢ `/config-verif exemptions action:view` - Voir la liste\n';
      description += '‚Ä¢ `/config-verif exemptions action:add_user` - Ajouter utilisateur\n';
      description += '‚Ä¢ `/config-verif exemptions action:add_role` - Ajouter r√¥le\n\n';

      description += '‚ÑπÔ∏è **Les membres exempt√©s ne passent pas par la v√©rification automatique.**';
    } else {
      description += 'üí° **Pour ajouter des exemptions :**\n';
      description += 'Utilisez `/config-verif exemptions`\n\n';
      description += '‚ÑπÔ∏è **Tous les nouveaux membres seront v√©rifi√©s automatiquement.**';
    }

    embed.setDescription(description);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_show_exemptions')
          .setLabel('Voir la liste')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üìã')
          .setDisabled(totalExemptions === 0),
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * Afficher la configuration compl√®te
   */
  async showCompleteConfig(interaction, config) {
    const embed = new EmbedBuilder()
      .setTitle('üìä Configuration compl√®te du syst√®me de v√©rification')
      .setColor(config.enabled ? 0x51cf66 : 0x6c757d)
      .setTimestamp();

    // √âtat g√©n√©ral
    embed.addFields({
      name: 'üîß √âtat g√©n√©ral',
      value: `**Syst√®me :** ${config.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}\n` +
             `**V√©rification auto :** ${config.autoVerification?.enabled ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}\n` +
             `**Alertes admin :** ${config.autoAlerts?.enabled ? '‚úÖ Activ√©es' : '‚ùå D√©sactiv√©es'}`,
      inline: false
    });

    // V√©rification automatique
    if (config.autoVerification?.enabled) {
      let autoText = '';
      
      if (config.autoVerification.minimumAccountAge) {
        autoText += `üïê **√Çge minimum :** ${config.autoVerification.minimumAccountAge} jour(s)\n`;
      }
      
      if (config.autoVerification.maxRiskScore) {
        autoText += `üìä **Score risque max :** ${config.autoVerification.maxRiskScore}/100\n`;
      }
      
      if (config.autoVerification.multiAccountThreshold) {
        autoText += `üîç **Seuil multi-comptes :** ${config.autoVerification.multiAccountThreshold}%\n`;
      }

      if (autoText) {
        embed.addFields({
          name: 'üîç V√©rification automatique',
          value: autoText,
          inline: false
        });
      }
    }

    // Infrastructure
    let infrastructureText = '';
    
    if (config.accessControl?.quarantineRoleId) {
      const role = interaction.guild.roles.cache.get(config.accessControl.quarantineRoleId);
      infrastructureText += `üîí **Quarantaine :** ${role ? role.name : 'R√¥le introuvable'}\n`;
    }
    
    if (config.accessControl?.verifiedRoleId) {
      const role = interaction.guild.roles.cache.get(config.accessControl.verifiedRoleId);
      infrastructureText += `‚úÖ **V√©rifi√© :** ${role ? role.name : 'R√¥le introuvable'}\n`;
    }
    
    if (config.autoAlerts?.alertChannelId) {
      infrastructureText += `üì¢ **Alertes :** <#${config.autoAlerts.alertChannelId}>\n`;
    }

    if (infrastructureText) {
      embed.addFields({
        name: 'üèóÔ∏è Infrastructure',
        value: infrastructureText,
        inline: false
      });
    }

    // Exemptions
    const exemptionsCount = (config.whitelist?.userIds?.length || 0) + (config.whitelist?.roleIds?.length || 0);
    if (exemptionsCount > 0) {
      embed.addFields({
        name: 'üìù Exemptions',
        value: `**Utilisateurs :** ${config.whitelist?.userIds?.length || 0}\n` +
               `**R√¥les :** ${config.whitelist?.roleIds?.length || 0}`,
        inline: false
      });
    }

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_back_menu')
          .setLabel('Retour au menu')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üîô')
      );

    return interaction.reply({ 
      embeds: [embed], 
      components: [buttons], 
      ephemeral: true 
    });
  }

  /**
   * G√©rer les interactions des boutons de configuration
   */
  async handleConfigVerifButton(interaction) {
    try {
      const action = interaction.customId.replace('config_verif_', '');
      
      switch (action) {
        case 'back_menu':
          await this.showMainMenu(interaction);
          break;
        case 'toggle_auto':
          await this.toggleAutoVerification(interaction);
          break;
        case 'show_exemptions':
          await this.showDetailedExemptions(interaction);
          break;
        default:
          return interaction.reply({ 
            content: '‚ùå Action non reconnue.', 
            ephemeral: true 
          });
      }
    } catch (error) {
      console.error('Erreur bouton config-verif:', error);
      return interaction.reply({ 
        content: '‚ùå Erreur lors du traitement du bouton.', 
        ephemeral: true 
      });
    }
  }

  /**
   * Afficher le menu principal (retour)
   */
  async showMainMenu(interaction) {
    const config = await this.moderationManager.getSecurityConfig(interaction.guild.id);
    
    const embed = new EmbedBuilder()
      .setTitle('‚öôÔ∏è Configuration Syst√®me de V√©rification')
      .setDescription('S√©lectionnez une option de configuration ci-dessous')
      .setColor(config.enabled ? 0x51cf66 : 0x6c757d)
      .setTimestamp();

    // √âtat actuel
    embed.addFields({
      name: 'üìä √âtat actuel',
      value: `**Syst√®me :** ${config.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}\n` +
             `**V√©rification auto :** ${config.autoVerification?.enabled ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}\n` +
             `**Quarantaine :** ${config.accessControl?.quarantineRoleId ? '‚úÖ Configur√©e' : '‚ùå Non configur√©e'}\n` +
             `**Notifications :** ${config.autoAlerts?.alertChannelId ? '‚úÖ Configur√©es' : '‚ùå Non configur√©es'}`,
      inline: false
    });

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId('config_verif_menu')
      .setPlaceholder('Choisissez une section √† configurer')
      .addOptions([
        {
          label: 'üîç V√©rification automatique',
          description: 'Configurer la v√©rification √† l\'arriv√©e des membres',
          value: 'auto_verification',
          emoji: 'üîç'
        },
        {
          label: 'üîí Syst√®me de quarantaine',
          description: 'Configurer les r√¥les et canaux de quarantaine',
          value: 'quarantine_system',
          emoji: 'üîí'
        },
        {
          label: '‚ö° Actions automatiques',
          description: 'D√©finir les actions pour chaque type de suspect',
          value: 'auto_actions',
          emoji: '‚ö°'
        },
        {
          label: 'üì¢ Notifications admin',
          description: 'Configurer les alertes et d√©lais de d√©cision',
          value: 'notifications',
          emoji: 'üì¢'
        },
        {
          label: 'üìù Exemptions',
          description: 'G√©rer la liste des utilisateurs/r√¥les exempt√©s',
          value: 'exemptions',
          emoji: 'üìù'
        },
        {
          label: 'üìä Voir configuration',
          description: 'Afficher la configuration compl√®te actuelle',
          value: 'view_config',
          emoji: 'üìä'
        }
      ]);

    const buttons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('config_verif_enable')
          .setLabel(config.enabled ? 'D√©sactiver syst√®me' : 'Activer syst√®me')
          .setStyle(config.enabled ? ButtonStyle.Danger : ButtonStyle.Success)
          .setEmoji(config.enabled ? '‚ùå' : '‚úÖ'),
        new ButtonBuilder()
          .setCustomId('config_verif_reset')
          .setLabel('R√©initialiser')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üóëÔ∏è'),
        new ButtonBuilder()
          .setCustomId('config_verif_help')
          .setLabel('Guide d\'aide')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚ùì')
      );

    const row = new ActionRowBuilder().addComponents(selectMenu);

    return interaction.update({ 
      embeds: [embed], 
      components: [row, buttons]
    });
  }

  /**
   * Obtenir l'affichage d'une action
   */
  getActionDisplay(action) {
    const displays = {
      'ALERT': 'üì¢ Alerte seulement',
      'WARN': '‚ö†Ô∏è Avertissement',
      'KICK': 'üë¢ Expulsion automatique',
      'BAN': 'üî® Bannissement automatique',
      'QUARANTINE': 'üîí Mise en quarantaine',
      'ADMIN_APPROVAL': 'üë®‚Äçüíº Demander approbation admin'
    };
    return displays[action] || action;
  }
}

module.exports = SecurityConfigHandler;