/**
 * Handler d√©di√© √† la configuration du syst√®me √©conomique - Version Corrig√©e
 */

const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');

console.log('üìÅ EconomyConfigHandler charg√© avec imports:', { EmbedBuilder, ModalBuilder, TextInputBuilder });

class EconomyConfigHandler {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    async showMainConfigMenu(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üí∞ Configuration √âconomie')
            .setDescription('Syst√®me √©conomique complet avec karma et r√©compenses')
            .addFields([
                { name: '‚ö° Actions', value: '6 actions configurables', inline: true },
                { name: 'üè™ Boutique', value: 'Syst√®me de vente', inline: true },
                { name: '‚öñÔ∏è Karma', value: 'Bon vs Mauvais', inline: true },
                { name: 'üìÖ Daily', value: 'R√©compenses quotidiennes', inline: true },
                { name: 'üí¨ Messages', value: 'Gains par message', inline: true },
                { name: 'üìä Stats', value: 'Donn√©es et analyses', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_config_select')
            .setPlaceholder('Choisissez une section...')
            .addOptions([
                { label: '‚ö° Actions', value: 'economy_action_select', description: 'Configurer les actions √©conomiques' },
                { label: 'üè™ Boutique', value: 'economy_shop_options', description: 'Gestion de la boutique' },
                { label: '‚öñÔ∏è Karma', value: 'economy_karma_options', description: 'Syst√®me de karma' },
                { label: 'üìÖ Daily', value: 'economy_daily_options', description: 'Configuration daily rewards' },
                { label: 'üí¨ Messages', value: 'economy_messages_options', description: 'Configuration gains par message' },
                { label: 'üìä Stats', value: 'economy_stats_options', description: 'Statistiques √©conomiques' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    // Handler principal pour router les interactions
    async handleInteraction(interaction) {
        const option = interaction.values[0];
        console.log(`üîç EconomyHandler: Option s√©lectionn√©e = ${option}`);
        
        switch (option) {
            case 'economy_action_select':
                await this.showActionsConfig(interaction);
                break;
            case 'economy_shop_options':
                await this.showShopConfig(interaction);
                break;
            case 'economy_karma_options':
                await this.showKarmaConfig(interaction);
                break;
            case 'economy_daily_options':
                await this.showDailyConfig(interaction);
                break;
            case 'economy_messages_options':
                await this.showMessagesConfig(interaction);
                break;
            case 'economy_stats_options':
                await this.showStatsConfig(interaction);
                break;
            // Karma sous-menus
            case 'karma_rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            case 'karma_create_level':
                await this.showKarmaLevelModal(interaction);
                break;
            case 'karma_edit_level':
                await this.showKarmaEditMenu(interaction);
                break;
            case 'karma_delete_level':
                await this.showKarmaDeleteMenu(interaction);
                break;
            case 'karma_test_system':
                await this.testKarmaSystem(interaction);
                break;
            case 'back_karma':
                await this.showKarmaConfig(interaction);
                break;
            case 'back_karma_rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            // Daily sous-menus
            case 'daily_amounts':
                await this.showDailyAmountModal(interaction);
                break;
            case 'daily_cooldown':
                await this.showDailyCooldownModal(interaction);
                break;
            case 'daily_toggle':
                await this.toggleDailySystem(interaction);
                break;
            // Retour au menu principal
            case 'economy_main_menu':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                // Gestion des IDs dynamiques pour √©dition/suppression karma
                if (option.startsWith('edit_karma_')) {
                    const karmaId = option.replace('edit_karma_', '');
                    await this.showKarmaEditModal(interaction, karmaId);
                } else if (option.startsWith('delete_karma_')) {
                    const karmaId = option.replace('delete_karma_', '');
                    await this.confirmKarmaDelete(interaction, karmaId);
                } else {
                console.log(`‚ùå EconomyHandler: Option non reconnue = ${option}`);
                await interaction.reply({ content: `‚ùå Option non reconnue: ${option}`, flags: 64 });
        }
    }

    // Handler pour action config manquant
    async handleActionConfig(interaction) {
        const actionName = interaction.customId.replace('action_config_', '');
        await this.showActionConfig(interaction, actionName);
    }

    async showActionConfig(interaction, actionName) {
        console.log(`‚ö° Configuration action: ${actionName}`);
        
        const actionEmojis = {
            travailler: 'üíº',
            pecher: 'üé£', 
            donner: 'üéÅ',
            voler: 'üí∞',
            crime: 'üî´',
            parier: 'üé∞'
        };

        // Retour au menu actions avec embed sp√©cifique
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle(`${actionEmojis[actionName] || '‚ö°'} Configuration - ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`)
            .setDescription('Configurez cette action via modal unique')
            .addFields([
                { name: 'üí∞ R√©compenses', value: 'Min/Max gains configurables', inline: true },
                { name: '‚öñÔ∏è Karma', value: 'Karma bon/mauvais', inline: true },
                { name: '‚è∞ Cooldown', value: 'Temps d\'attente', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`action_${actionName}_config`)
            .setPlaceholder('Configurer...')
            .addOptions([
                { label: '‚öôÔ∏è Configuration Compl√®te', value: `${actionName}_modal_config`, description: 'Modal avec tous les param√®tres' },
                { label: 'üîô Retour Actions', value: 'back_to_actions', description: 'Retour au menu actions' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }



    // Modals pour Daily
    async showDailyAmountModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('daily_amount_modal')
            .setTitle('üí∞ Montants Daily');

        const baseAmountInput = new TextInputBuilder()
            .setCustomId('daily_base_amount')
            .setLabel('Montant de base (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('50')
            .setValue('50')
            .setRequired(true);

        const streakBonusInput = new TextInputBuilder()
            .setCustomId('daily_streak_bonus')
            .setLabel('Bonus par jour de streak (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('5')
            .setValue('5')
            .setRequired(true);

        const rows = [
            new ActionRowBuilder().addComponents(baseAmountInput),
            new ActionRowBuilder().addComponents(streakBonusInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async showDailyCooldownModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('daily_cooldown_modal')
            .setTitle('‚è∞ Cooldown Daily');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('daily_cooldown_hours')
            .setLabel('Cooldown en heures')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('24')
            .setValue('24')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    // Modals pour Messages
    async showMessagesAmountModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('messages_amount_modal')
            .setTitle('üí∞ Montant par Message');

        const amountInput = new TextInputBuilder()
            .setCustomId('messages_amount_value')
            .setLabel('Argent par message (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('1')
            .setValue('1')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    async showMessagesCooldownModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('messages_cooldown_modal')
            .setTitle('‚è∞ Cooldown Messages');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('messages_cooldown_seconds')
            .setLabel('Cooldown en secondes')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('60')
            .setValue('60')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    // Toggles
    async toggleDailySystem(interaction) {
        // Logique toggle daily
        await interaction.reply({ content: 'üìÖ Toggle daily impl√©ment√© !', flags: 64 });
    }

    async toggleMessagesSystem(interaction) {
        // Logique toggle messages
        await interaction.reply({ content: 'üí¨ Toggle messages impl√©ment√© !', flags: 64 });
    }

    // M√©thodes d'alias pour compatibilit√©
    async handleMainMenu(interaction) {
        await this.showMainConfigMenu(interaction);
    }

    // Gestion des s√©lections d'actions sp√©cifiques
    async handleActionSelection(interaction) {
        const action = interaction.values[0];
        
        if (action === 'back_main') {
            await this.showMainConfigMenu(interaction);
            return;
        }
        
        // Afficher la configuration sp√©cifique de l'action
        await this.showActionSpecificConfig(interaction, action);
    }

    // Configuration d√©taill√©e d'une action sp√©cifique
    async showActionSpecificConfig(interaction, actionName) {
        const actionEmojis = {
            'travailler': 'üíº',
            'pecher': 'üé£',
            'donner': 'üíù',
            'voler': 'üí∞',
            'crime': 'üî´',
            'parier': 'üé≤'
        };
        
        const actionTitles = {
            'travailler': 'Travailler',
            'pecher': 'P√™cher',
            'donner': 'Donner',
            'voler': 'Voler',
            'crime': 'Crime',
            'parier': 'Parier'
        };

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || {
            enabled: true,
            minReward: 10,
            maxReward: 50,
            cooldown: 60,
            goodKarma: actionName === 'travailler' || actionName === 'pecher' || actionName === 'donner' ? 1 : 0,
            badKarma: actionName === 'voler' || actionName === 'crime' || actionName === 'parier' ? 1 : 0
        };

        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle(`${actionEmojis[actionName]} Configuration ${actionTitles[actionName]}`)
            .setDescription(`Configurez les param√®tres de l'action ${actionTitles[actionName]}`)
            .addFields([
                {
                    name: 'üí∞ R√©compenses',
                    value: `${actionConfig.minReward}‚Ç¨ - ${actionConfig.maxReward}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚è±Ô∏è Cooldown',
                    value: `${actionConfig.cooldown} secondes`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: actionConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üòá Karma Positif',
                    value: `+${actionConfig.goodKarma}`,
                    inline: true
                },
                {
                    name: 'üòà Karma N√©gatif',
                    value: `+${actionConfig.badKarma}`,
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`action_config_${actionName}`)
            .setPlaceholder('Modifier les param√®tres...')
            .addOptions([
                {
                    label: 'üí∞ R√©compenses',
                    value: `rewards_${actionName}`,
                    description: 'Modifier min/max r√©compenses',
                    emoji: 'üí∞'
                },
                {
                    label: '‚è±Ô∏è Cooldown',
                    value: `cooldown_${actionName}`,
                    description: 'Modifier le temps d\'attente',
                    emoji: '‚è±Ô∏è'
                },
                {
                    label: '‚öñÔ∏è Karma',
                    value: `karma_${actionName}`,
                    description: 'Modifier les effets karma',
                    emoji: '‚öñÔ∏è'
                },
                {
                    label: 'üîÑ Toggle',
                    value: `toggle_${actionName}`,
                    description: 'Activer/d√©sactiver cette action',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Actions',
                    value: 'back_actions',
                    description: 'Retour au menu actions'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    // Handlers pour les sous-menus de configuration
    async handleKarmaConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'karma_rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            case 'karma_autoreset':
                await this.toggleKarmaAutoReset(interaction);
                break;
            case 'karma_resetday':
                await interaction.reply({ content: 'üîß Configuration jour de reset en d√©veloppement', flags: 64 });
                break;
            case 'karma_stats':
                await this.showKarmaStats(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option karma non reconnue', flags: 64 });
        }
    }

    async handleShopConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'shop_list':
                await this.showShopList(interaction);
                break;
            case 'shop_create_custom':
                await this.showCustomObjectModal(interaction);
                break;
            case 'shop_create_temp_role':
                await this.showTempRoleSelector(interaction);
                break;
            case 'shop_create_perm_role':
                await this.showPermRoleSelector(interaction);
                break;
            case 'shop_access':
                await interaction.reply({ content: 'üîß Configuration acc√®s boutique en d√©veloppement', flags: 64 });
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option boutique non reconnue', flags: 64 });
        }
    }

    async showDailyConfig(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const dailyConfig = economyConfig.daily || { amount: 100, enabled: true };

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üìÖ Configuration Daily Rewards')
            .setDescription('Syst√®me de r√©compenses quotidiennes')
            .addFields([
                {
                    name: 'üí∞ Montant Actuel',
                    value: `${dailyConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üîÑ Statut',
                    value: dailyConfig.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üìù Configuration',
                    value: 'Utilisez les options ci-dessous pour modifier les param√®tres',
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_config')
            .setPlaceholder('Configuration daily...')
            .addOptions([
                {
                    label: 'üí∞ Modifier Montant',
                    value: 'daily_amount',
                    description: `Changer le montant daily (actuellement ${dailyConfig.amount}‚Ç¨)`,
                    emoji: 'üí∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'daily_toggle',
                    description: dailyConfig.enabled ? 'D√©sactiver daily rewards' : 'Activer daily rewards',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async handleDailyConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'daily_amount':
                await this.showDailyAmountModal(interaction);
                break;
            case 'daily_toggle':
                await this.toggleDailySystem(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option daily non reconnue', flags: 64 });
        }
    }

    async showDailyAmountModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentAmount = economyConfig.daily?.amount || 100;

        const modal = new ModalBuilder()
            .setCustomId('economy_daily_amount_modal')
            .setTitle('üí∞ Configurer Montant Daily');

        const amountInput = new TextInputBuilder()
            .setCustomId('daily_amount')
            .setLabel('Montant Daily (1-1000‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('100')
            .setValue(`${currentAmount}`)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async toggleDailySystem(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.daily) {
            economyConfig.daily = { amount: 100, enabled: true };
        }
        
        economyConfig.daily.enabled = !economyConfig.daily.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.update({
            content: `‚úÖ Daily rewards ${economyConfig.daily.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
            embeds: [],
            components: []
        });

        // Ne pas retourner automatiquement au menu pour √©viter les erreurs d'interaction
    }

    async handleDailyAmountModal(interaction) {
        const amountStr = interaction.fields.getTextInputValue('daily_amount');
        const amount = parseInt(amountStr);
        
        if (isNaN(amount) || amount < 1 || amount > 1000) {
            await interaction.reply({ 
                content: '‚ùå Montant invalide. Veuillez entrer un nombre entre 1 et 1000‚Ç¨.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.daily) {
            economyConfig.daily = { amount: 100, enabled: true };
        }
        
        economyConfig.daily.amount = amount;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Montant daily mis √† jour : **${amount}‚Ç¨**`,
            flags: 64
        });

        // Ne pas retourner automatiquement au menu pour √©viter les erreurs d'interaction
    }

    async showKarmaRewardsConfig(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('üéÅ R√©compenses/Sanctions Karma')
            .setDescription('Syst√®me automatique de r√©compenses bas√© sur le karma')
            .addFields([
                {
                    name: 'üìä Niveaux Configur√©s',
                    value: karmaRewards.length > 0 ? `${karmaRewards.length} niveaux` : 'Aucun niveau configur√©',
                    inline: true
                },
                {
                    name: '‚ö° D√©clenchement',
                    value: 'Automatique √† chaque action',
                    inline: true
                },
                {
                    name: 'üîß Configuration',
                    value: 'Utilisez les options ci-dessous pour g√©rer les r√©compenses',
                    inline: false
                }
            ]);

        if (karmaRewards.length > 0) {
            const rewardsList = karmaRewards
                .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
                .slice(0, 5) // Afficher seulement les 5 premiers
                .map(reward => {
                    const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                    const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                    const role = reward.roleId ? `R√¥le ${reward.roleDuration ? `(${reward.roleDuration}h)` : '(permanent)'}` : '';
                    const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                    return `${type} **${reward.name}** (${reward.karmaThreshold} karma)\n‚îî ${description}`;
                })
                .join('\n\n');
            
            embed.addFields([{
                name: 'üìã Niveaux Actuels',
                value: rewardsList,
                inline: false
            }]);
        }

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_rewards_config')
            .setPlaceholder('Gestion r√©compenses karma...')
            .addOptions([
                {
                    label: '‚ûï Cr√©er Niveau',
                    value: 'karma_create_level',
                    description: 'Cr√©er un nouveau niveau de r√©compense/sanction',
                    emoji: '‚ûï'
                },
                {
                    label: '‚úèÔ∏è Modifier Niveau',
                    value: 'karma_edit_level',
                    description: 'Modifier un niveau existant',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'üóëÔ∏è Supprimer Niveau',
                    value: 'karma_delete_level',
                    description: 'Supprimer un niveau existant',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: 'üîÑ Tester Syst√®me',
                    value: 'karma_test_system',
                    description: 'Tester les r√©compenses automatiques',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Karma',
                    value: 'back_karma',
                    description: 'Retour au menu karma'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }



    async showKarmaLevelModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('economy_karma_level_modal')
            .setTitle('üéÅ Cr√©er Niveau Karma');

        const nameInput = new TextInputBuilder()
            .setCustomId('karma_name')
            .setLabel('Nom du Niveau')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: Saint, Demon, Neutre...')
            .setMinLength(3)
            .setMaxLength(30)
            .setRequired(true);

        const thresholdInput = new TextInputBuilder()
            .setCustomId('karma_threshold')
            .setLabel('Seuil Karma Net (-999 √† +999)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 10, -5, 0...')
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const moneyInput = new TextInputBuilder()
            .setCustomId('karma_money')
            .setLabel('Gain/Perte Argent (-999999 √† +999999‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 100, -50, 0...')
            .setMinLength(1)
            .setMaxLength(7)
            .setRequired(false);

        const roleInput = new TextInputBuilder()
            .setCustomId('karma_role')
            .setLabel('ID R√¥le (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 1234567890123456789')
            .setMinLength(0)
            .setMaxLength(25)
            .setRequired(false);

        const durationInput = new TextInputBuilder()
            .setCustomId('karma_duration')
            .setLabel('Dur√©e R√¥le en Heures (vide = permanent)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 24, 168, 720...')
            .setMinLength(0)
            .setMaxLength(4)
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(thresholdInput),
            new ActionRowBuilder().addComponents(moneyInput),
            new ActionRowBuilder().addComponents(roleInput),
            new ActionRowBuilder().addComponents(durationInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async handleKarmaLevelModal(interaction) {
        const name = interaction.fields.getTextInputValue('karma_name');
        const thresholdStr = interaction.fields.getTextInputValue('karma_threshold');
        const moneyStr = interaction.fields.getTextInputValue('karma_money') || '0';
        const roleIdStr = interaction.fields.getTextInputValue('karma_role') || '';
        const durationStr = interaction.fields.getTextInputValue('karma_duration') || '';

        // Validation
        const threshold = parseInt(thresholdStr);
        if (isNaN(threshold) || threshold < -999 || threshold > 999) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre entre -999 et +999.', 
                flags: 64 
            });
            return;
        }

        const money = parseInt(moneyStr);
        if (isNaN(money) || money < -999999 || money > 999999) {
            await interaction.reply({ 
                content: '‚ùå Montant argent invalide. Entrez un nombre entre -999999 et +999999.', 
                flags: 64 
            });
            return;
        }

        let duration = null;
        if (durationStr) {
            duration = parseInt(durationStr);
            if (isNaN(duration) || duration < 1 || duration > 8760) {
                await interaction.reply({ 
                    content: '‚ùå Dur√©e invalide. Entrez un nombre entre 1 et 8760 heures.', 
                    flags: 64 
                });
                return;
            }
        }

        // Validation du r√¥le si fourni
        if (roleIdStr && !/^\d{17,25}$/.test(roleIdStr)) {
            await interaction.reply({ 
                content: '‚ùå ID r√¥le invalide. Doit √™tre un ID Discord valide.', 
                flags: 64 
            });
            return;
        }

        // Sauvegarder le niveau
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karmaRewards) {
            economyConfig.karmaRewards = [];
        }

        const newLevel = {
            id: Date.now(),
            name: name,
            karmaThreshold: threshold,
            moneyReward: money,
            roleId: roleIdStr || null,
            roleDuration: duration,
            createdAt: new Date().toISOString()
        };

        economyConfig.karmaRewards.push(newLevel);
        await this.dataManager.saveData('economy.json', economyConfig);

        const type = threshold >= 0 ? 'üòá' : 'üòà';
        const moneyDisplay = money > 0 ? `+${money}‚Ç¨` : money < 0 ? `${money}‚Ç¨` : 'Aucun gain';
        const roleDisplay = roleIdStr ? `R√¥le ${duration ? `(${duration}h)` : '(permanent)'}` : 'Aucun r√¥le';

        await interaction.reply({
            content: `‚úÖ Niveau karma cr√©√© !\n\n${type} **${name}** (${threshold} karma)\nüí∞ ${moneyDisplay}\nüé≠ ${roleDisplay}`,
            flags: 64
        });
    }

    async showKarmaEditMenu(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        if (karmaRewards.length === 0) {
            await interaction.reply({ 
                content: '‚ùå Aucun niveau karma configur√© √† modifier. Cr√©ez d\'abord un niveau.', 
                flags: 64 
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚úèÔ∏è Modifier Niveau Karma')
            .setDescription('S√©lectionnez le niveau √† modifier');

        const options = karmaRewards
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
            .slice(0, 25) // Limite Discord
            .map(reward => {
                const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                const role = reward.roleId ? `R√¥le` : '';
                const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                
                return {
                    label: `${type} ${reward.name}`,
                    value: `edit_karma_${reward.id}`,
                    description: `Seuil: ${reward.karmaThreshold} - ${description}`
                };
            });

        options.push({
            label: '‚Ü©Ô∏è Retour R√©compenses',
            value: 'back_karma_rewards',
            description: 'Retour au menu r√©compenses karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_edit_select')
            .setPlaceholder('Choisir niveau √† modifier...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async showKarmaDeleteMenu(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        if (karmaRewards.length === 0) {
            await interaction.reply({ 
                content: '‚ùå Aucun niveau karma configur√© √† supprimer. Cr√©ez d\'abord un niveau.', 
                flags: 64 
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Supprimer Niveau Karma')
            .setDescription('‚ö†Ô∏è S√©lectionnez le niveau √† supprimer d√©finitivement');

        const options = karmaRewards
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
            .slice(0, 25) // Limite Discord
            .map(reward => {
                const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                const role = reward.roleId ? `R√¥le` : '';
                const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                
                return {
                    label: `${type} ${reward.name}`,
                    value: `delete_karma_${reward.id}`,
                    description: `Seuil: ${reward.karmaThreshold} - ${description}`
                };
            });

        options.push({
            label: '‚Ü©Ô∏è Retour R√©compenses',
            value: 'back_karma_rewards',
            description: 'Retour au menu r√©compenses karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_delete_select')
            .setPlaceholder('Choisir niveau √† supprimer...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async testKarmaSystem(interaction) {
        await interaction.reply({ content: 'üîß Test syst√®me karma en d√©veloppement', flags: 64 });
    }

    async showKarmaEditModal(interaction, karmaId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const reward = karmaRewards.find(r => r.id == karmaId);

        if (!reward) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId(`economy_karma_edit_modal_${karmaId}`)
            .setTitle(`‚úèÔ∏è Modifier: ${reward.name}`);

        const nameInput = new TextInputBuilder()
            .setCustomId('karma_name')
            .setLabel('Nom du Niveau')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.name)
            .setMinLength(3)
            .setMaxLength(30)
            .setRequired(true);

        const thresholdInput = new TextInputBuilder()
            .setCustomId('karma_threshold')
            .setLabel('Seuil Karma Net (-999 √† +999)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.karmaThreshold.toString())
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const moneyInput = new TextInputBuilder()
            .setCustomId('karma_money')
            .setLabel('Gain/Perte Argent (-999999 √† +999999‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.moneyReward?.toString() || '0')
            .setMinLength(1)
            .setMaxLength(7)
            .setRequired(false);

        const roleInput = new TextInputBuilder()
            .setCustomId('karma_role')
            .setLabel('ID R√¥le (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.roleId || '')
            .setMinLength(0)
            .setMaxLength(25)
            .setRequired(false);

        const durationInput = new TextInputBuilder()
            .setCustomId('karma_duration')
            .setLabel('Dur√©e R√¥le en Heures (vide = permanent)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.roleDuration?.toString() || '')
            .setMinLength(0)
            .setMaxLength(4)
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(thresholdInput),
            new ActionRowBuilder().addComponents(moneyInput),
            new ActionRowBuilder().addComponents(roleInput),
            new ActionRowBuilder().addComponents(durationInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async confirmKarmaDelete(interaction, karmaId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const reward = karmaRewards.find(r => r.id == karmaId);

        if (!reward) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
        const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : 'Aucun gain';
        const role = reward.roleId ? `R√¥le ${reward.roleDuration ? `(${reward.roleDuration}h)` : '(permanent)'}` : 'Aucun r√¥le';

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Confirmer Suppression')
            .setDescription(`‚ö†Ô∏è **Suppression d√©finitive**\n\n${type} **${reward.name}** (${reward.karmaThreshold} karma)\nüí∞ ${money}\nüé≠ ${role}`)
            .setFooter({ text: 'Cette action est irr√©versible' });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_delete_confirm')
            .setPlaceholder('Confirmer la suppression...')
            .addOptions([
                {
                    label: '‚úÖ Confirmer Suppression',
                    value: `confirm_delete_${karmaId}`,
                    description: 'Supprimer d√©finitivement ce niveau',
                    emoji: '‚ö†Ô∏è'
                },
                {
                    label: '‚ùå Annuler',
                    value: 'back_karma_rewards',
                    description: 'Retour sans supprimer'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async handleKarmaEditModal(interaction) {
        const karmaId = interaction.customId.split('_').pop();
        const name = interaction.fields.getTextInputValue('karma_name');
        const thresholdStr = interaction.fields.getTextInputValue('karma_threshold');
        const moneyStr = interaction.fields.getTextInputValue('karma_money') || '0';
        const roleIdStr = interaction.fields.getTextInputValue('karma_role') || '';
        const durationStr = interaction.fields.getTextInputValue('karma_duration') || '';

        // Validation (m√™me logique que cr√©ation)
        const threshold = parseInt(thresholdStr);
        if (isNaN(threshold) || threshold < -999 || threshold > 999) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre entre -999 et +999.', 
                flags: 64 
            });
            return;
        }

        const money = parseInt(moneyStr);
        if (isNaN(money) || money < -999999 || money > 999999) {
            await interaction.reply({ 
                content: '‚ùå Montant argent invalide. Entrez un nombre entre -999999 et +999999.', 
                flags: 64 
            });
            return;
        }

        let duration = null;
        if (durationStr) {
            duration = parseInt(durationStr);
            if (isNaN(duration) || duration < 1 || duration > 8760) {
                await interaction.reply({ 
                    content: '‚ùå Dur√©e invalide. Entrez un nombre entre 1 et 8760 heures.', 
                    flags: 64 
                });
                return;
            }
        }

        if (roleIdStr && !/^\d{17,25}$/.test(roleIdStr)) {
            await interaction.reply({ 
                content: '‚ùå ID r√¥le invalide. Doit √™tre un ID Discord valide.', 
                flags: 64 
            });
            return;
        }

        // Mise √† jour du niveau
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const rewardIndex = karmaRewards.findIndex(r => r.id == karmaId);

        if (rewardIndex === -1) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        karmaRewards[rewardIndex] = {
            ...karmaRewards[rewardIndex],
            name: name,
            karmaThreshold: threshold,
            moneyReward: money,
            roleId: roleIdStr || null,
            roleDuration: duration,
            updatedAt: new Date().toISOString()
        };

        economyConfig.karmaRewards = karmaRewards;
        await this.dataManager.saveData('economy.json', economyConfig);

        const type = threshold >= 0 ? 'üòá' : 'üòà';
        const moneyDisplay = money > 0 ? `+${money}‚Ç¨` : money < 0 ? `${money}‚Ç¨` : 'Aucun gain';
        const roleDisplay = roleIdStr ? `R√¥le ${duration ? `(${duration}h)` : '(permanent)'}` : 'Aucun r√¥le';

        await interaction.reply({
            content: `‚úÖ Niveau karma modifi√© !\n\n${type} **${name}** (${threshold} karma)\nüí∞ ${moneyDisplay}\nüé≠ ${roleDisplay}`,
            flags: 64
        });
    }

    async handleKarmaDeleteConfirm(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_karma_rewards') {
            await this.showKarmaRewardsConfig(interaction);
            return;
        }

        if (option.startsWith('confirm_delete_')) {
            const karmaId = option.replace('confirm_delete_', '');
            
            const economyConfig = await this.dataManager.loadData('economy.json', {});
            const karmaRewards = economyConfig.karmaRewards || [];
            const rewardIndex = karmaRewards.findIndex(r => r.id == karmaId);

            if (rewardIndex === -1) {
                await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
                return;
            }

            const deletedReward = karmaRewards[rewardIndex];
            karmaRewards.splice(rewardIndex, 1);
            
            economyConfig.karmaRewards = karmaRewards;
            await this.dataManager.saveData('economy.json', economyConfig);

            await interaction.reply({
                content: `‚úÖ Niveau karma **${deletedReward.name}** supprim√© d√©finitivement.`,
                flags: 64
            });
        }
    }

    async showMessagesAmountModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentAmount = economyConfig.messages?.amount || 5;

        const modal = new ModalBuilder()
            .setCustomId('economy_messages_amount_modal')
            .setTitle('üí∞ Configurer Montant Messages');

        const amountInput = new TextInputBuilder()
            .setCustomId('messages_amount')
            .setLabel('Montant par Message (1-50‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('5')
            .setValue(`${currentAmount}`)
            .setMinLength(1)
            .setMaxLength(2)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async showMessagesCooldownModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentCooldown = Math.round((economyConfig.messages?.cooldown || 60000) / 1000);

        const modal = new ModalBuilder()
            .setCustomId('economy_messages_cooldown_modal')
            .setTitle('‚è∞ Configurer Cooldown Messages');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('messages_cooldown')
            .setLabel('Cooldown en Secondes (30-300s)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('60')
            .setValue(`${currentCooldown}`)
            .setMinLength(2)
            .setMaxLength(3)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async toggleMessagesSystem(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.enabled = !economyConfig.messages.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.update({
            content: `‚úÖ Gains par message ${economyConfig.messages.enabled ? 'activ√©s' : 'd√©sactiv√©s'}`,
            embeds: [],
            components: []
        });
    }

    async handleMessagesAmountModal(interaction) {
        const amountStr = interaction.fields.getTextInputValue('messages_amount');
        const amount = parseInt(amountStr);
        
        if (isNaN(amount) || amount < 1 || amount > 50) {
            await interaction.reply({ 
                content: '‚ùå Montant invalide. Veuillez entrer un nombre entre 1 et 50‚Ç¨.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.amount = amount;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Montant par message mis √† jour : **${amount}‚Ç¨**`,
            flags: 64
        });
    }

    async handleMessagesCooldownModal(interaction) {
        const cooldownStr = interaction.fields.getTextInputValue('messages_cooldown');
        const cooldownSeconds = parseInt(cooldownStr);
        
        if (isNaN(cooldownSeconds) || cooldownSeconds < 30 || cooldownSeconds > 300) {
            await interaction.reply({ 
                content: '‚ùå Cooldown invalide. Veuillez entrer un nombre entre 30 et 300 secondes.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.cooldown = cooldownSeconds * 1000; // Convertir en millisecondes
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Cooldown messages mis √† jour : **${cooldownSeconds}s**`,
            flags: 64
        });
    }

    async handleMessagesConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'messages_amount':
                await this.showMessagesAmountModal(interaction);
                break;
            case 'messages_cooldown':
                await this.showMessagesCooldownModal(interaction);
                break;
            case 'messages_toggle':
                await this.toggleMessagesSystem(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option messages non reconnue', flags: 64 });
        }
    }

    async handleStatsConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'detailed_stats':
                await this.showDetailedStats(interaction);
                break;
            case 'backup_data':
                await interaction.reply({ content: 'üîß Backup donn√©es en d√©veloppement', flags: 64 });
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option stats non reconnue', flags: 64 });
        }
    }

    // M√©thodes utilitaires pour les actions de configuration
    async toggleKarmaAutoReset(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karma) economyConfig.karma = {};
        
        economyConfig.karma.autoReset = !economyConfig.karma.autoReset;
        await this.dataManager.saveData('economy.json', economyConfig);
        
        await interaction.reply({ 
            content: `‚úÖ Auto-reset karma ${economyConfig.karma.autoReset ? 'activ√©' : 'd√©sactiv√©'}`, 
            flags: 64 
        });
    }

    async showShopList(interaction) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        if (guildShop.length === 0) {
            await interaction.reply({ 
                content: 'üì¶ Aucun article dans la boutique. Utilisez `/boutique` pour ajouter des articles.', 
                flags: 64 
            });
            return;
        }
        
        const itemsList = guildShop.map((item, index) => 
            `${index + 1}. ${item.name} - ${item.price}‚Ç¨`
        ).join('\n');
        
        await interaction.reply({ 
            content: `üì¶ **Articles de la boutique:**\n\`\`\`${itemsList}\`\`\``, 
            flags: 64 
        });
    }

    // M√©thodes pour la cr√©ation d'articles boutique
    async showCustomObjectModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId('custom_object_modal')
            .setTitle('üé® Cr√©er Objet Personnalis√©');

        const nameInput = new TextInputBuilder()
            .setCustomId('object_name')
            .setLabel('Nom de l\'objet')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(50)
            .setPlaceholder('Ex: √âp√©e l√©gendaire')
            .setRequired(true);

        const priceInput = new TextInputBuilder()
            .setCustomId('object_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 500')
            .setRequired(true);

        const descInput = new TextInputBuilder()
            .setCustomId('object_description')
            .setLabel('Description (optionnelle)')
            .setStyle(TextInputStyle.Paragraph)
            .setMinLength(0)
            .setMaxLength(200)
            .setPlaceholder('Description de l\'objet...')
            .setRequired(false);

        const nameRow = new ActionRowBuilder().addComponents(nameInput);
        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const descRow = new ActionRowBuilder().addComponents(descInput);

        modal.addComponents(nameRow, priceRow, descRow);
        await interaction.showModal(modal);
    }

    async showTempRoleSelector(interaction) {
        const { RoleSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚åõ Cr√©er R√¥le Temporaire')
            .setDescription('S√©lectionnez le r√¥le √† vendre temporairement');

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('temp_role_select')
            .setPlaceholder('Choisissez un r√¥le...')
            .setMinValues(1)
            .setMaxValues(1);

        const row = new ActionRowBuilder().addComponents(roleSelect);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showPermRoleSelector(interaction) {
        const { RoleSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('‚≠ê Cr√©er R√¥le Permanent')
            .setDescription('S√©lectionnez le r√¥le √† vendre d√©finitivement');

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('perm_role_select')
            .setPlaceholder('Choisissez un r√¥le...')
            .setMinValues(1)
            .setMaxValues(1);

        const row = new ActionRowBuilder().addComponents(roleSelect);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showDetailedStats(interaction) {
        const guildId = interaction.guild.id;
        const economyData = await this.dataManager.loadData('economy.json', {});
        const userData = economyData.users || {};
        
        const userCount = Object.keys(userData).length;
        const totalBalance = Object.values(userData).reduce((sum, user) => sum + (user.balance || 0), 0);
        
        await interaction.reply({ 
            content: `üìä **Statistiques √âconomiques:**\nüë• Utilisateurs: ${userCount}\nüí∞ Argent total: ${totalBalance}‚Ç¨`, 
            flags: 64 
        });
    }

    async showKarmaStats(interaction) {
        const guildId = interaction.guild.id;
        const economyData = await this.dataManager.loadData('economy.json', {});
        const userData = economyData.users || {};
        
        let totalGoodKarma = 0;
        let totalBadKarma = 0;
        let userCount = 0;
        
        Object.values(userData).forEach(user => {
            if (user.goodKarma || user.badKarma) {
                totalGoodKarma += user.goodKarma || 0;
                totalBadKarma += user.badKarma || 0;
                userCount++;
            }
        });
        
        await interaction.reply({ 
            content: `‚öñÔ∏è **Statistiques Karma:**\nüë• Utilisateurs actifs: ${userCount}\nüòá Karma positif total: ${totalGoodKarma}\nüòà Karma n√©gatif total: ${totalBadKarma}`, 
            flags: 64 
        });
    }

    async showActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('‚ö° Configuration Actions √âconomiques')
            .setDescription('Configurez les 6 actions √©conomiques disponibles')
            .addFields([
                { name: 'üíº Travailler', value: 'Action positive (+üòá)', inline: true },
                { name: 'üé£ P√™cher', value: 'Action positive (+üòá)', inline: true },
                { name: 'üíù Donner', value: 'Action tr√®s positive (+üòá)', inline: true },
                { name: 'üí∞ Voler', value: 'Action n√©gative (+üòà)', inline: true },
                { name: 'üî´ Crime', value: 'Action tr√®s n√©gative (+üòà)', inline: true },
                { name: 'üé≤ Parier', value: 'Action n√©gative (+üòà)', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_actions_select')
            .setPlaceholder('Choisissez une action √† configurer...')
            .addOptions([
                { label: 'üíº Travailler', value: 'travailler', description: 'Configurer le travail' },
                { label: 'üé£ P√™cher', value: 'pecher', description: 'Configurer la p√™che' },
                { label: 'üíù Donner', value: 'donner', description: 'Configurer les dons' },
                { label: 'üí∞ Voler', value: 'voler', description: 'Configurer le vol' },
                { label: 'üî´ Crime', value: 'crime', description: 'Configurer les crimes' },
                { label: 'üé≤ Parier', value: 'parier', description: 'Configurer les paris' },
                { label: '‚Ü©Ô∏è Retour Menu Principal', value: 'back_main', description: 'Retour au menu √©conomie' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showShopConfig(interaction) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üõí Configuration Boutique')
            .setDescription('Gestion de la boutique du serveur')
            .addFields([
                {
                    name: 'üì¶ Articles Actuels',
                    value: guildShop.length > 0 ? `${guildShop.length} articles configur√©s` : 'Aucun article',
                    inline: true
                },
                {
                    name: 'üíº Acc√®s',
                    value: 'Commande `/boutique` disponible',
                    inline: true
                },
                {
                    name: 'üé® Types',
                    value: 'Objets personnalis√©s + R√¥les',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_config')
            .setPlaceholder('Configuration boutique...')
            .addOptions([
                {
                    label: 'üì¶ Voir Articles',
                    value: 'shop_list',
                    description: 'Afficher tous les articles de la boutique',
                    emoji: 'üì¶'
                },
                {
                    label: 'üé® Cr√©er Objet Personnalis√©',
                    value: 'shop_create_custom',
                    description: 'Cr√©er un objet avec nom, prix et description',
                    emoji: 'üé®'
                },
                {
                    label: '‚åõ Cr√©er R√¥le Temporaire',
                    value: 'shop_create_temp_role',
                    description: 'Cr√©er un r√¥le temporaire payant',
                    emoji: '‚åõ'
                },
                {
                    label: '‚≠ê Cr√©er R√¥le Permanent',
                    value: 'shop_create_perm_role',
                    description: 'Cr√©er un r√¥le permanent payant',
                    emoji: '‚≠ê'
                },
                {
                    label: 'üõí Acc√®s Boutique',
                    value: 'shop_access',
                    description: 'Utiliser /boutique pour configuration compl√®te',
                    emoji: 'üõí'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showKarmaConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaConfig = economyConfig.karma || { autoReset: false, resetDay: 'sunday' };

        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('‚öñÔ∏è Configuration Karma')
            .setDescription('G√©rez le syst√®me de karma positif/n√©gatif')
            .addFields([
                {
                    name: 'üîÑ Auto-Reset',
                    value: karmaConfig.autoReset ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üìÖ Jour Reset',
                    value: karmaConfig.resetDay || 'sunday',
                    inline: true
                },
                {
                    name: '‚öñÔ∏è √âquilibre',
                    value: 'Actions configurables individuellement',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_config')
            .setPlaceholder('Options karma...')
            .addOptions([
                {
                    label: 'üéÅ R√©compenses/Sanctions',
                    value: 'karma_rewards',
                    description: 'Configurer les r√©compenses automatiques par karma',
                    emoji: 'üéÅ'
                },
                {
                    label: 'üîÑ Toggle Auto-Reset',
                    value: 'karma_autoreset',
                    description: 'Activer/d√©sactiver le reset automatique',
                    emoji: 'üîÑ'
                },
                {
                    label: 'üìÖ Jour de Reset',
                    value: 'karma_resetday',
                    description: 'D√©finir le jour de reset hebdomadaire',
                    emoji: 'üìÖ'
                },
                {
                    label: 'üìä Voir Statistiques',
                    value: 'karma_stats',
                    description: 'Statistiques karma du serveur',
                    emoji: 'üìä'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showDailyConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const dailyConfig = economyConfig.daily || { amount: 100, enabled: true };
        
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üìÖ Configuration Daily')
            .setDescription('R√©compenses quotidiennes pour les membres')
            .addFields([
                {
                    name: 'üí∞ Montant Daily',
                    value: `${dailyConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: dailyConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üî• Streak',
                    value: 'Bonus de s√©rie disponible',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_config')
            .setPlaceholder('Configuration daily...')
            .addOptions([
                {
                    label: 'üìù Modifier Montant',
                    value: 'daily_amount',
                    description: 'Changer le montant daily (1-1000‚Ç¨)',
                    emoji: 'üí∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'daily_toggle',
                    description: dailyConfig.enabled ? 'D√©sactiver daily' : 'Activer daily',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showMessagesConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const messagesConfig = economyConfig.messages || { enabled: false, amount: 5, cooldown: 60000 };
        
        const embed = new EmbedBuilder()
            .setColor('#2ecc71')
            .setTitle('üí¨ Configuration Messages')
            .setDescription('Gains automatiques par message')
            .addFields([
                {
                    name: 'üí∞ Montant par Message',
                    value: `${messagesConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: messagesConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: '‚è∞ Cooldown',
                    value: `${Math.round(messagesConfig.cooldown / 1000)}s`,
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_config')
            .setPlaceholder('Configuration messages...')
            .addOptions([
                {
                    label: 'üìù Modifier Montant',
                    value: 'messages_amount',
                    description: 'Changer le montant par message (1-50‚Ç¨)',
                    emoji: 'üí∞'
                },
                {
                    label: '‚è∞ Modifier Cooldown',
                    value: 'messages_cooldown',
                    description: 'Changer le d√©lai entre gains',
                    emoji: '‚è∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'messages_toggle',
                    description: messagesConfig.enabled ? 'D√©sactiver gains' : 'Activer gains',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showStatsConfig(interaction) {
        // Calculer les statistiques √©conomiques du serveur
        const guildId = interaction.guild.id;
        const allUsers = await this.dataManager.getAllUsers(guildId);
        
        let totalBalance = 0;
        let totalGoodKarma = 0;
        let totalBadKarma = 0;
        let userCount = allUsers.length;
        
        allUsers.forEach(user => {
            totalBalance += user.balance || 1000;
            totalGoodKarma += user.karmaGood || 0;
            totalBadKarma += user.karmaBad || 0;
        });

        const embed = new EmbedBuilder()
            .setColor('#34495e')
            .setTitle('üìä Statistiques √âconomiques')
            .setDescription(`Donn√©es √©conomiques du serveur`)
            .addFields([
                {
                    name: 'üë• Utilisateurs Actifs',
                    value: `${userCount} membres`,
                    inline: true
                },
                {
                    name: 'üí∞ Richesse Totale',
                    value: `${totalBalance.toLocaleString()}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üí∞ Richesse Moyenne',
                    value: userCount > 0 ? `${Math.round(totalBalance / userCount).toLocaleString()}‚Ç¨` : '0‚Ç¨',
                    inline: true
                },
                {
                    name: 'üòá Karma Positif Total',
                    value: `${totalGoodKarma}`,
                    inline: true
                },
                {
                    name: 'üòà Karma N√©gatif Total',
                    value: `${totalBadKarma}`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è Karma Net Moyen',
                    value: userCount > 0 ? `${Math.round((totalGoodKarma - totalBadKarma) / userCount)}` : '0',
                    inline: true
                },
                {
                    name: 'üèÜ Richesse Serveur',
                    value: totalBalance > 100000 ? 'Serveur Riche üíé' : totalBalance > 50000 ? 'Serveur Prosp√®re üåü' : 'Serveur en D√©veloppement üå±',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_stats_config')
            .setPlaceholder('Options statistiques...')
            .addOptions([
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    // Handlers pour les sous-menus
    async handleEconomyKarmaConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        if (option === 'karma_autoreset') {
            const guildId = interaction.guild.id;
            const economyConfig = await this.dataManager.loadData('economy.json', {});
            
            if (!economyConfig.karma) economyConfig.karma = {};
            economyConfig.karma.autoReset = !economyConfig.karma.autoReset;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Auto-reset karma ${economyConfig.karma.autoReset ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showKarmaConfig(interaction);
            }, 2000);
        }
    }

    async handleEconomyShopConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        if (option === 'shop_access') {
            await interaction.update({
                content: 'üí° **Information Boutique**\n\nUtilisez la commande `/boutique` pour configurer compl√®tement votre boutique :\n‚Ä¢ Cr√©er objets personnalis√©s\n‚Ä¢ Ajouter r√¥les temporaires/permanents\n‚Ä¢ G√©rer les prix et descriptions\n\nLa boutique est accessible aux utilisateurs via `/boutique`',
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showShopConfig(interaction);
            }, 4000);
        } else {
            await interaction.update({
                content: '‚úÖ Configuration boutique mise √† jour',
                embeds: [],
                components: []
            });
        }
    }

    async handleEconomyDailyConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (option === 'daily_toggle') {
            if (!economyConfig.daily) economyConfig.daily = { amount: 100, enabled: true };
            economyConfig.daily.enabled = !economyConfig.daily.enabled;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Daily ${economyConfig.daily.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showDailyConfig(interaction);
            }, 2000);
            
        } else if (option === 'daily_amount') {
            const modal = new ModalBuilder()
                .setCustomId('economy_daily_amount_modal')
                .setTitle('üí∞ Montant Daily');

            const amountInput = new TextInputBuilder()
                .setCustomId('amount')
                .setLabel('Montant Daily (1-1000‚Ç¨)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('100')
                .setValue(`${economyConfig.daily?.amount || 100}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(amountInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
        }
    }

    async handleEconomyMessagesConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (option === 'messages_toggle') {
            if (!economyConfig.messages) economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
            economyConfig.messages.enabled = !economyConfig.messages.enabled;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Syst√®me de r√©compenses par message ${economyConfig.messages.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showMessagesConfig(interaction);
            }, 2000);
            
        } else if (option === 'messages_amount') {
            const modal = new ModalBuilder()
                .setCustomId('economy_messages_amount_modal')
                .setTitle('üí∞ Montant par Message');

            const amountInput = new TextInputBuilder()
                .setCustomId('amount')
                .setLabel('Montant par message (1-50‚Ç¨)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('5')
                .setValue(`${economyConfig.messages?.amount || 5}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(amountInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
            
        } else if (option === 'messages_cooldown') {
            const modal = new ModalBuilder()
                .setCustomId('economy_messages_cooldown_modal')
                .setTitle('‚è∞ Cooldown Messages');

            const cooldownInput = new TextInputBuilder()
                .setCustomId('cooldown')
                .setLabel('Cooldown en secondes (10-300s)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('60')
                .setValue(`${Math.round((economyConfig.messages?.cooldown || 60000) / 1000)}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(cooldownInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
        }
    }

    async handleEconomyStatsConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }
    }

    // Compatibilit√© avec les anciennes m√©thodes
    async handleActionSelected(interaction) {
        const action = interaction.values[0];
        
        if (action === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        await interaction.reply({ 
            content: `‚öôÔ∏è Configuration ${action} : Cette fonctionnalit√© avanc√©e sera disponible prochainement. Utilisez les commandes directement pour tester les modifications.`,
            flags: 64 
        });
    }
    // Handlers pour les modals de la boutique
    async handleCustomObjectModal(interaction) {
        const name = interaction.fields.getTextInputValue('object_name');
        const priceStr = interaction.fields.getTextInputValue('object_price');
        const description = interaction.fields.getTextInputValue('object_description') || 'Objet personnalis√©';
        
        const price = parseInt(priceStr);
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }

        await this.saveShopItem(interaction, {
            type: 'custom',
            name: name,
            price: price,
            description: description
        });
    }

    async handleTempRolePriceModal(interaction, roleId) {
        const priceStr = interaction.fields.getTextInputValue('role_price');
        const durationStr = interaction.fields.getTextInputValue('role_duration');
        
        const price = parseInt(priceStr);
        const duration = parseInt(durationStr);
        
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }
        
        if (isNaN(duration) || duration < 1 || duration > 36500) {
            await interaction.reply({ content: '‚ùå Dur√©e invalide (1-36500 jours)', flags: 64 });
            return;
        }

        const role = interaction.guild.roles.cache.get(roleId);
        await this.saveShopItem(interaction, {
            type: 'temp_role',
            roleId: roleId,
            name: `R√¥le ${role?.name || 'Inconnu'}`,
            price: price,
            duration: duration
        });
    }

    async handlePermRolePriceModal(interaction, roleId) {
        const priceStr = interaction.fields.getTextInputValue('role_price');
        
        const price = parseInt(priceStr);
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }

        const role = interaction.guild.roles.cache.get(roleId);
        await this.saveShopItem(interaction, {
            type: 'perm_role',
            roleId: roleId,
            name: `R√¥le ${role?.name || 'Inconnu'}`,
            price: price
        });
    }

    async saveShopItem(interaction, item) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        
        if (!shopData[guildId]) shopData[guildId] = [];
        
        const newItem = {
            id: Date.now(),
            ...item,
            createdAt: new Date().toISOString(),
            createdBy: interaction.user.id
        };
        
        shopData[guildId].push(newItem);
        await this.dataManager.saveData('shop.json', shopData);
        
        const typeEmojis = {
            'custom': 'üé®',
            'temp_role': '‚åõ',
            'perm_role': '‚≠ê'
        };
        
        await interaction.reply({ 
            content: `‚úÖ ${typeEmojis[item.type]} **${item.name}** ajout√© √† la boutique pour **${item.price}‚Ç¨**`, 
            flags: 64 
        });
    }

    // Gestion de la s√©lection de r√¥le
    async handleRoleSelection(interaction, customId) {
        console.log(`Traitement s√©lection r√¥le: ${customId}`);
        const selectedRoleId = interaction.values[0];
        const role = interaction.guild.roles.cache.get(selectedRoleId);
        
        if (!role) {
            await interaction.reply({ content: '‚ùå R√¥le introuvable', flags: 64 });
            return;
        }

        console.log(`R√¥le s√©lectionn√©: ${role.name} (${selectedRoleId})`);

        if (customId === 'temp_role_select') {
            console.log('Affichage modal prix r√¥le temporaire');
            await this.showTempRolePriceModal(interaction, selectedRoleId, role.name);
        } else if (customId === 'perm_role_select') {
            console.log('Affichage modal prix r√¥le permanent');
            await this.showPermRolePriceModal(interaction, selectedRoleId, role.name);
        }
    }

    async showTempRolePriceModal(interaction, roleId, roleName) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId(`temp_role_price_modal_${roleId}`)
            .setTitle(`‚åõ Prix R√¥le: ${roleName}`);

        const priceInput = new TextInputBuilder()
            .setCustomId('role_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 1000')
            .setRequired(true);

        const durationInput = new TextInputBuilder()
            .setCustomId('role_duration')
            .setLabel('Dur√©e (en jours)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(5)
            .setPlaceholder('Ex: 30')
            .setRequired(true);

        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const durationRow = new ActionRowBuilder().addComponents(durationInput);

        modal.addComponents(priceRow, durationRow);
        await interaction.showModal(modal);
    }

    async showPermRolePriceModal(interaction, roleId, roleName) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId(`perm_role_price_modal_${roleId}`)
            .setTitle(`‚≠ê Prix R√¥le: ${roleName}`);

        const priceInput = new TextInputBuilder()
            .setCustomId('role_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 2000')
            .setRequired(true);

        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        modal.addComponents(priceRow);
        await interaction.showModal(modal);
    }
}

module.exports = EconomyConfigHandler;
