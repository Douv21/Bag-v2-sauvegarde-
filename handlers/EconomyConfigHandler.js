/**
 * Handler d√©di√© √† la configuration de l'√©conomie
 */

const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');

class EconomyConfigHandler {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    /**
     * Afficher le menu principal de configuration √©conomique
     */
    async showMainConfigMenu(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üí∞ Configuration √âconomique')
            .setDescription('S√©lectionnez une section √† configurer :')
            .addFields([
                { name: '‚ö° Actions', value: 'Configurer travailler, voler, crime, etc.', inline: true },
                { name: 'üè™ Boutique', value: 'G√©rer les articles et prix', inline: true },
                { name: '‚öñÔ∏è Karma', value: 'Syst√®me de r√©compenses karma', inline: true },
                { name: 'üìÖ Daily', value: 'R√©compenses quotidiennes', inline: true },
                { name: 'üí¨ Messages', value: 'R√©compenses par message', inline: true },
                { name: 'üìä Statistiques', value: 'Affichage et reset des donn√©es', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_config_main')
            .setPlaceholder('Choisissez une section...')
            .addOptions([
                {
                    label: '‚ö° Configuration Actions',
                    value: 'actions',
                    description: 'Travailler, voler, crime, p√™cher, etc.'
                },
                {
                    label: 'üè™ Configuration Boutique',
                    value: 'shop',
                    description: 'Articles, prix, r√¥les temporaires'
                },
                {
                    label: '‚öñÔ∏è Configuration Karma',
                    value: 'karma',
                    description: 'Niveaux et r√©compenses karma'
                },
                {
                    label: 'üìÖ Configuration Daily',
                    value: 'daily',
                    description: 'R√©compenses quotidiennes et streaks'
                },
                {
                    label: 'üí¨ Configuration Messages',
                    value: 'messages',
                    description: 'R√©compenses par message √©crit'
                },
                {
                    label: 'üìä Statistiques Syst√®me',
                    value: 'stats',
                    description: 'Donn√©es et reset du syst√®me'
                }
            ]);

        const row = new ActionRowBuilder()
            .addComponents(selectMenu);

        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    /**
     * G√©rer les interactions du menu principal
     */
    async handleMainMenu(interaction) {
        const value = interaction.values[0];

        switch (value) {
            case 'actions':
                await this.showActionsConfig(interaction);
                break;
            case 'shop':
                await this.showShopConfig(interaction);
                break;
            case 'karma':
                await this.showKarmaConfig(interaction);
                break;
            case 'daily':
                await this.showDailyConfig(interaction);
                break;
            case 'messages':
                await this.showMessagesConfig(interaction);
                break;
            case 'stats':
                await this.showStatsConfig(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Section non reconnue', flags: 64 });
        }
    }

    /**
     * Gestion des s√©lections d'actions
     */
    async handleActionSelection(interaction) {
        const action = interaction.values[0];
        await interaction.update({ content: `‚ö° Action s√©lectionn√©e: **${action}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Gestion des options karma sp√©cifiques
     */
    async handleKarmaOption(interaction) {
        const option = interaction.values[0];
        await interaction.update({ content: `‚öñÔ∏è Option karma: **${option}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Gestion des options boutique sp√©cifiques
     */
    async handleShopOption(interaction) {
        const option = interaction.values[0];
        await interaction.update({ content: `üè™ Option boutique: **${option}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Gestion des options daily sp√©cifiques
     */
    async handleDailyOption(interaction) {
        const option = interaction.values[0];
        await interaction.update({ content: `üìÖ Option daily: **${option}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Gestion des options messages sp√©cifiques
     */
    async handleMessagesOption(interaction) {
        const option = interaction.values[0];
        await interaction.update({ content: `üí¨ Option messages: **${option}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Gestion des options stats sp√©cifiques
     */
    async handleStatsOption(interaction) {
        const option = interaction.values[0];
        await interaction.update({ content: `üìä Option stats: **${option}** - √Ä impl√©menter`, embeds: [], components: [] });
    }

    /**
     * Configuration des actions √©conomiques
     */
    async showActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('‚ö° Configuration des Actions')
            .setDescription('Configurez les diff√©rentes actions √©conomiques :')
            .addFields([
                { name: 'üí™ Travailler', value: 'Action positive üòá', inline: true },
                { name: 'üé£ P√™cher', value: 'Action positive üòá', inline: true },
                { name: 'üíù Donner', value: 'Action tr√®s positive üòá', inline: true },
                { name: 'üî™ Voler', value: 'Action n√©gative üòà', inline: true },
                { name: 'ü¶π Crime', value: 'Action tr√®s n√©gative üòà', inline: true },
                { name: 'üé≤ Parier', value: 'Action risqu√©e üòà', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_action_select')
            .setPlaceholder('Choisissez une action √† configurer...')
            .addOptions([
                { label: 'üí™ Travailler', value: 'travailler', description: 'Configurer les r√©compenses du travail' },
                { label: 'üé£ P√™cher', value: 'pecher', description: 'Configurer les gains de la p√™che' },
                { label: 'üíù Donner', value: 'donner', description: 'Configurer les donations' },
                { label: 'üî™ Voler', value: 'voler', description: 'Configurer le syst√®me de vol' },
                { label: 'ü¶π Crime', value: 'crime', description: 'Configurer les crimes' },
                { label: 'üé≤ Parier', value: 'parier', description: 'Configurer les paris' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    /**
     * Configuration de la boutique
     */
    async showShopConfig(interaction) {
        const guildId = interaction.guild.id;
        const fs = require('fs');
        let shop = {};
        try {
            shop = JSON.parse(fs.readFileSync('./render/data/shop.json', 'utf8'));
        } catch (error) {
            shop = {};
        }
        
        const guildShop = shop[guildId] || [];

        const embed = new EmbedBuilder()
            .setColor('#e67e22')
            .setTitle('üè™ Configuration Boutique')
            .setDescription(`Articles configur√©s : **${guildShop.length}**`)
            .addFields([
                {
                    name: 'üìã Articles Disponibles',
                    value: guildShop.length > 0 
                        ? guildShop.slice(0, 10).map((item, i) => 
                            `${i + 1}. ${item.name} - ${item.price}‚Ç¨`
                        ).join('\n') + (guildShop.length > 10 ? `\n... et ${guildShop.length - 10} autres` : '')
                        : 'Aucun article configur√©',
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_options')
            .setPlaceholder('Choisissez une option...')
            .addOptions([
                {
                    label: '‚ûï Ajouter Objet Personnalis√©',
                    value: 'add_custom',
                    description: 'Cr√©er un objet avec nom et description'
                },
                {
                    label: '‚è∞ Ajouter R√¥le Temporaire',
                    value: 'add_temp_role',
                    description: 'R√¥le avec dur√©e limit√©e'
                },
                {
                    label: '‚≠ê Ajouter R√¥le Permanent',
                    value: 'add_perm_role',
                    description: 'R√¥le √† vie'
                },
                {
                    label: '‚úèÔ∏è Modifier Articles',
                    value: 'edit_items',
                    description: 'Modifier articles existants'
                },
                {
                    label: 'üóëÔ∏è Supprimer Articles',
                    value: 'delete_items',
                    description: 'Supprimer des articles'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    /**
     * Configuration du karma
     */
    async showKarmaConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('‚öñÔ∏è Configuration Karma')
            .setDescription('Syst√®me de karma avec r√©compenses/sanctions automatiques')
            .addFields([
                { name: 'üéØ Niveaux Karma', value: 'Cr√©er des niveaux personnalis√©s', inline: true },
                { name: 'üèÜ R√©compenses Auto', value: 'Distribution automatique', inline: true },
                { name: 'üîÑ Reset Syst√®me', value: 'Remise √† z√©ro du karma', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_options')
            .setPlaceholder('Choisissez une option...')
            .addOptions([
                {
                    label: 'üéØ G√©rer Niveaux Karma',
                    value: 'karma_levels',
                    description: 'Cr√©er/modifier niveaux personnalis√©s'
                },
                {
                    label: 'üèÜ R√©compenses Automatiques',
                    value: 'karma_rewards',
                    description: 'Configuration distribution auto'
                },
                {
                    label: 'üîÑ Reset Karma',
                    value: 'karma_reset',
                    description: 'Remettre √† z√©ro le syst√®me'
                },
                {
                    label: 'üìä Statistiques Karma',
                    value: 'karma_stats',
                    description: 'Voir les donn√©es actuelles'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    /**
     * Configuration du syst√®me daily
     */
    async showDailyConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#2ecc71')
            .setTitle('üìÖ Configuration Daily')
            .setDescription('Configuration des r√©compenses quotidiennes')
            .addFields([
                { name: 'üí∞ Montant de base', value: '100‚Ç¨ par d√©faut', inline: true },
                { name: 'üî• Bonus streak', value: '50‚Ç¨ par jour de suite', inline: true },
                { name: 'üìà Streak maximum', value: '30 jours maximum', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_options')
            .setPlaceholder('Choisissez une option...')
            .addOptions([
                {
                    label: 'üí∞ Configurer Montant',
                    value: 'daily_amount',
                    description: 'Modifier le montant de base'
                },
                {
                    label: 'üî• Configurer Bonus Streak',
                    value: 'daily_streak',
                    description: 'Modifier le bonus par jour cons√©cutif'
                },
                {
                    label: 'üìä Statistiques Daily',
                    value: 'daily_stats',
                    description: 'Voir les statistiques'
                },
                {
                    label: 'üîÑ Reset Daily',
                    value: 'daily_reset',
                    description: 'Remettre √† z√©ro les streaks'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    /**
     * Configuration des r√©compenses par message
     */
    async showMessagesConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#34495e')
            .setTitle('üí¨ Configuration Messages')
            .setDescription('R√©compenses automatiques par message √©crit')
            .addFields([
                { name: 'üí∞ R√©compense', value: '5‚Ç¨ par message', inline: true },
                { name: '‚è∞ Cooldown', value: '60 secondes entre gains', inline: true },
                { name: 'üõ°Ô∏è Anti-spam', value: 'Protection contre abus', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_options')
            .setPlaceholder('Choisissez une option...')
            .addOptions([
                {
                    label: 'üí∞ Configurer Montant',
                    value: 'messages_amount',
                    description: 'Modifier le gain par message'
                },
                {
                    label: '‚è∞ Configurer Cooldown',
                    value: 'messages_cooldown',
                    description: 'Modifier le d√©lai entre gains'
                },
                {
                    label: 'üîÑ Toggle Syst√®me',
                    value: 'messages_toggle',
                    description: 'Activer/d√©sactiver les gains'
                },
                {
                    label: 'üìä Statistiques Messages',
                    value: 'messages_stats',
                    description: 'Voir les statistiques'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    /**
     * Affichage des statistiques syst√®me
     */
    async showStatsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#95a5a6')
            .setTitle('üìä Statistiques Syst√®me')
            .setDescription('Donn√©es et m√©triques du syst√®me √©conomique')
            .addFields([
                { name: 'üíπ √âconomie Globale', value: 'Argent total en circulation', inline: true },
                { name: '‚öñÔ∏è R√©partition Karma', value: 'Distribution bon/mauvais karma', inline: true },
                { name: 'üìà Activit√© Actions', value: 'Fr√©quence des actions', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_stats_options')
            .setPlaceholder('Choisissez une option...')
            .addOptions([
                {
                    label: 'üíπ Statistiques Globales',
                    value: 'stats_global',
                    description: 'Vue d\'ensemble du syst√®me'
                },
                {
                    label: 'üë• Statistiques Utilisateurs',
                    value: 'stats_users',
                    description: 'Donn√©es par utilisateur'
                },
                {
                    label: 'üìä Export Donn√©es',
                    value: 'stats_export',
                    description: 'Exporter les donn√©es'
                },
                {
                    label: 'üóëÔ∏è Reset Complet',
                    value: 'stats_reset',
                    description: 'Remise √† z√©ro totale'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }
}

module.exports = EconomyConfigHandler;