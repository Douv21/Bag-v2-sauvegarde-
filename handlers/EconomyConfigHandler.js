/**
 * Handler d√©di√© √† la configuration du syst√®me √©conomique - Version Corrig√©e
 */

const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, RoleSelectMenuBuilder } = require('discord.js');

console.log('üìÅ EconomyConfigHandler charg√© avec imports:', { EmbedBuilder, ModalBuilder, TextInputBuilder });

class EconomyConfigHandler {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    async showMainConfigMenu(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üí∞ Configuration √âconomie')
            .setDescription('Syst√®me √©conomique complet avec karma et r√©compenses')
            .addFields([
                { name: '‚ö° Actions', value: '6 actions configurables', inline: true },
                { name: 'üè™ Boutique', value: 'Syst√®me de vente', inline: true },
                { name: '‚öñÔ∏è Karma', value: 'Bon vs Mauvais', inline: true },
                { name: 'üìÖ Daily', value: 'R√©compenses quotidiennes', inline: true },
                { name: 'üí¨ Messages', value: 'Gains par message', inline: true },
                { name: 'üìä Stats', value: 'Donn√©es et analyses', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_config_select')
            .setPlaceholder('Choisissez une section...')
            .addOptions([
                { label: '‚ö° Actions', value: 'economy_action_select', description: 'Configurer les actions √©conomiques' },
                { label: 'üè™ Boutique', value: 'economy_shop_options', description: 'Gestion de la boutique' },
                { label: '‚öñÔ∏è Karma', value: 'economy_karma_options', description: 'Syst√®me de karma' },
                { label: 'üìÖ Daily', value: 'economy_daily_options', description: 'Configuration daily rewards' },
                { label: 'üí¨ Messages', value: 'economy_messages_options', description: 'Configuration gains par message' },
                { label: 'üìä Stats', value: 'economy_stats_options', description: 'Statistiques √©conomiques' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    // Handler principal pour router les interactions
    async handleInteraction(interaction) {
        const option = interaction.values[0];
        console.log(`üîç EconomyHandler: Option s√©lectionn√©e = ${option}`);
        
        switch (option) {
            case 'economy_action_select':
                await this.showActionsConfig(interaction);
                break;
            case 'economy_shop_options':
                await this.showShopConfig(interaction);
                break;
            case 'economy_karma_options':
                await this.showKarmaConfig(interaction);
                break;
            case 'economy_daily_options':
                await this.showDailyConfig(interaction);
                break;
            case 'economy_messages_options':
                await this.showMessagesConfig(interaction);
                break;
            case 'economy_stats_options':
                await this.showStatsConfig(interaction);
                break;
            // Karma sous-menus
            case 'karma_rewards':
            case 'economy_karma_rewards_config':
                await this.showKarmaRewardsConfig(interaction);
                break;
            case 'karma_create_type_select':
                await this.showKarmaTypeSelector(interaction);
                break;
            case 'karma_add_temp_role':
                await this.showRoleSelector(interaction);
                break;
            case 'karma_create_reward':
                await this.showKarmaLevelModal(interaction, 'reward');
                break;
            case 'karma_create_sanction':
                await this.showKarmaLevelModal(interaction, 'sanction');
                break;
            case 'karma_create_level':
                await this.showKarmaLevelModal(interaction);
                break;
            case 'karma_edit_level':
                await this.showKarmaEditMenu(interaction);
                break;
            case 'karma_delete_level':
                await this.showKarmaDeleteMenu(interaction);
                break;
            case 'karma_test_system':
                await this.testKarmaRewardSystem(interaction);
                break;
            case 'back_karma':
                await this.showKarmaConfig(interaction);
                break;
            case 'back_karma_rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            // Daily sous-menus
            case 'daily_amounts':
                await this.showDailyAmountModal(interaction);
                break;
            case 'daily_cooldown':
                await this.showDailyCooldownModal(interaction);
                break;
            case 'daily_toggle':
                await this.toggleDailySystem(interaction);
                break;
            // Retour au menu principal
            case 'economy_main_menu':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                // Gestion des IDs dynamiques pour √©dition/suppression karma
                if (option.startsWith('edit_karma_')) {
                    const karmaId = option.replace('edit_karma_', '');
                    await this.showKarmaEditModal(interaction, karmaId);
                } else if (option.startsWith('delete_karma_')) {
                    const karmaId = option.replace('delete_karma_', '');
                    await this.confirmKarmaDelete(interaction, karmaId);
                } else if (option.startsWith('select_level_')) {
                    const levelId = option.replace('select_level_', '');
                    await this.showRoleSelector(interaction, levelId);
                } else if (option === 'karma_test_system') {
                    await this.testKarmaRewardSystem(interaction);
                } else {
                    console.log(`‚ùå EconomyHandler: Option non reconnue = ${option}`);
                    await interaction.reply({ content: `‚ùå Option non reconnue: ${option}`, flags: 64 });
                }
                break;
        }
    }

    // Handler pour action config manquant
    async handleActionConfig(interaction) {
        const actionName = interaction.customId.replace('action_config_', '');
        await this.showActionConfig(interaction, actionName);
    }

    async showActionConfig(interaction, actionName) {
        console.log(`‚ö° Configuration action: ${actionName}`);
        
        const actionEmojis = {
            travailler: 'üíº',
            pecher: 'üé£', 
            donner: 'üéÅ',
            voler: 'üí∞',
            crime: 'üî´',
            parier: 'üé∞'
        };

        // Retour au menu actions avec embed sp√©cifique
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle(`${actionEmojis[actionName] || '‚ö°'} Configuration - ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`)
            .setDescription('Configurez cette action via modal unique')
            .addFields([
                { name: 'üí∞ R√©compenses', value: 'Min/Max gains configurables', inline: true },
                { name: '‚öñÔ∏è Karma', value: 'Karma bon/mauvais', inline: true },
                { name: '‚è∞ Cooldown', value: 'Temps d\'attente', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`action_${actionName}_config`)
            .setPlaceholder('Configurer...')
            .addOptions([
                { label: '‚öôÔ∏è Configuration Compl√®te', value: `${actionName}_modal_config`, description: 'Modal avec tous les param√®tres' },
                { label: 'üîô Retour Actions', value: 'back_to_actions', description: 'Retour au menu actions' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }



    // Modals pour Daily
    async showDailyAmountModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('daily_amount_modal')
            .setTitle('üí∞ Montants Daily');

        const baseAmountInput = new TextInputBuilder()
            .setCustomId('daily_base_amount')
            .setLabel('Montant de base (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('50')
            .setValue('50')
            .setRequired(true);

        const streakBonusInput = new TextInputBuilder()
            .setCustomId('daily_streak_bonus')
            .setLabel('Bonus par jour de streak (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('5')
            .setValue('5')
            .setRequired(true);

        const rows = [
            new ActionRowBuilder().addComponents(baseAmountInput),
            new ActionRowBuilder().addComponents(streakBonusInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async showDailyCooldownModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('daily_cooldown_modal')
            .setTitle('‚è∞ Cooldown Daily');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('daily_cooldown_hours')
            .setLabel('Cooldown en heures')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('24')
            .setValue('24')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    // Modals pour Messages
    async showMessagesAmountModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('messages_amount_modal')
            .setTitle('üí∞ Montant par Message');

        const amountInput = new TextInputBuilder()
            .setCustomId('messages_amount_value')
            .setLabel('Argent par message (‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('1')
            .setValue('1')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    async showMessagesCooldownModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('messages_cooldown_modal')
            .setTitle('‚è∞ Cooldown Messages');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('messages_cooldown_seconds')
            .setLabel('Cooldown en secondes')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('60')
            .setValue('60')
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);
        await interaction.showModal(modal);
    }

    // Toggles
    async toggleDailySystem(interaction) {
        // Logique toggle daily
        await interaction.reply({ content: 'üìÖ Toggle daily impl√©ment√© !', flags: 64 });
    }

    async toggleMessagesSystem(interaction) {
        // Logique toggle messages
        await interaction.reply({ content: 'üí¨ Toggle messages impl√©ment√© !', flags: 64 });
    }

    // M√©thodes d'alias pour compatibilit√©
    async handleMainMenu(interaction) {
        await this.showMainConfigMenu(interaction);
    }

    // Gestion des s√©lections d'actions sp√©cifiques
    async handleActionSelection(interaction) {
        const action = interaction.values[0];
        
        if (action === 'back_main') {
            await this.showMainConfigMenu(interaction);
            return;
        }
        
        // Afficher la configuration sp√©cifique de l'action
        await this.showActionSpecificConfig(interaction, action);
    }

    // Configuration d√©taill√©e d'une action sp√©cifique
    async showActionSpecificConfig(interaction, actionName) {
        const actionEmojis = {
            'travailler': 'üíº',
            'pecher': 'üé£',
            'donner': 'üíù',
            'voler': 'üí∞',
            'crime': 'üî´',
            'parier': 'üé≤'
        };
        
        const actionTitles = {
            'travailler': 'Travailler',
            'pecher': 'P√™cher',
            'donner': 'Donner',
            'voler': 'Voler',
            'crime': 'Crime',
            'parier': 'Parier'
        };

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || {
            enabled: true,
            minReward: 10,
            maxReward: 50,
            cooldown: 60,
            goodKarma: actionName === 'travailler' || actionName === 'pecher' || actionName === 'donner' ? 1 : 0,
            badKarma: actionName === 'voler' || actionName === 'crime' || actionName === 'parier' ? 1 : 0
        };

        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle(`${actionEmojis[actionName]} Configuration ${actionTitles[actionName]}`)
            .setDescription(`Configurez les param√®tres de l'action ${actionTitles[actionName]}`)
            .addFields([
                {
                    name: 'üí∞ R√©compenses',
                    value: `${actionConfig.minReward}‚Ç¨ - ${actionConfig.maxReward}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚è±Ô∏è Cooldown',
                    value: `${actionConfig.cooldown} secondes`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: actionConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üòá Karma Positif',
                    value: `+${actionConfig.goodKarma}`,
                    inline: true
                },
                {
                    name: 'üòà Karma N√©gatif',
                    value: `+${actionConfig.badKarma}`,
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`action_config_${actionName}`)
            .setPlaceholder('Modifier les param√®tres...')
            .addOptions([
                {
                    label: 'üí∞ R√©compenses',
                    value: `rewards_${actionName}`,
                    description: 'Modifier min/max r√©compenses',
                    emoji: 'üí∞'
                },
                {
                    label: '‚è±Ô∏è Cooldown',
                    value: `cooldown_${actionName}`,
                    description: 'Modifier le temps d\'attente',
                    emoji: '‚è±Ô∏è'
                },
                {
                    label: '‚öñÔ∏è Karma',
                    value: `karma_${actionName}`,
                    description: 'Modifier les effets karma',
                    emoji: '‚öñÔ∏è'
                },
                {
                    label: 'üîÑ Toggle',
                    value: `toggle_${actionName}`,
                    description: 'Activer/d√©sactiver cette action',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Actions',
                    value: 'back_actions',
                    description: 'Retour au menu actions'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    // Handlers pour les sous-menus de configuration
    async handleKarmaConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'karma_rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            case 'karma_autoreset':
                await this.toggleKarmaAutoReset(interaction);
                break;
            case 'karma_resetday':
                await this.showKarmaResetDaySelector(interaction);
                break;
            case 'karma_stats':
                await this.showKarmaStats(interaction);
                break;
            case 'karma_reset_all':
                await this.showKarmaResetConfirmation(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option karma non reconnue', flags: 64 });
        }
    }

    async handleShopConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'shop_list':
                await this.showShopList(interaction);
                break;
            case 'shop_create_custom':
                await this.showCustomObjectModal(interaction);
                break;
            case 'shop_create_temp_role':
                await this.showTempRoleSelector(interaction);
                break;
            case 'shop_create_perm_role':
                await this.showPermRoleSelector(interaction);
                break;
            case 'shop_manage_items':
                await this.showShopManagement(interaction);
                break;

            case 'shop_karma_discounts':
                await this.showKarmaDiscountsConfig(interaction);
                break;
            case 'shop_access':
                await interaction.reply({ content: 'üîß Configuration acc√®s boutique en d√©veloppement', flags: 64 });
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option boutique non reconnue', flags: 64 });
        }
    }

    async showDailyConfig(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const dailyConfig = economyConfig.daily || { amount: 100, enabled: true };

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üìÖ Configuration Daily Rewards')
            .setDescription('Syst√®me de r√©compenses quotidiennes')
            .addFields([
                {
                    name: 'üí∞ Montant Actuel',
                    value: `${dailyConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üîÑ Statut',
                    value: dailyConfig.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üìù Configuration',
                    value: 'Utilisez les options ci-dessous pour modifier les param√®tres',
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_config')
            .setPlaceholder('Configuration daily...')
            .addOptions([
                {
                    label: 'üí∞ Modifier Montant',
                    value: 'daily_amount',
                    description: `Changer le montant daily (actuellement ${dailyConfig.amount}‚Ç¨)`,
                    emoji: 'üí∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'daily_toggle',
                    description: dailyConfig.enabled ? 'D√©sactiver daily rewards' : 'Activer daily rewards',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async handleDailyConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'daily_amount':
                await this.showDailyAmountModal(interaction);
                break;
            case 'daily_toggle':
                await this.toggleDailySystem(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option daily non reconnue', flags: 64 });
        }
    }

    async showDailyAmountModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentAmount = economyConfig.daily?.amount || 100;

        const modal = new ModalBuilder()
            .setCustomId('economy_daily_amount_modal')
            .setTitle('üí∞ Configurer Montant Daily');

        const amountInput = new TextInputBuilder()
            .setCustomId('daily_amount')
            .setLabel('Montant Daily (1-1000‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('100')
            .setValue(`${currentAmount}`)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async toggleDailySystem(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.daily) {
            economyConfig.daily = { amount: 100, enabled: true };
        }
        
        economyConfig.daily.enabled = !economyConfig.daily.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.update({
            content: `‚úÖ Daily rewards ${economyConfig.daily.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
            embeds: [],
            components: []
        });

        // Ne pas retourner automatiquement au menu pour √©viter les erreurs d'interaction
    }

    async handleDailyAmountModal(interaction) {
        const amountStr = interaction.fields.getTextInputValue('daily_amount');
        const amount = parseInt(amountStr);
        
        if (isNaN(amount) || amount < 1 || amount > 1000) {
            await interaction.reply({ 
                content: '‚ùå Montant invalide. Veuillez entrer un nombre entre 1 et 1000‚Ç¨.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.daily) {
            economyConfig.daily = { amount: 100, enabled: true };
        }
        
        economyConfig.daily.amount = amount;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Montant daily mis √† jour : **${amount}‚Ç¨**`,
            flags: 64
        });

        // Ne pas retourner automatiquement au menu pour √©viter les erreurs d'interaction
    }

    async showKarmaRewardsConfig(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('üéÅ R√©compenses/Sanctions Karma')
            .setDescription('Syst√®me automatique de r√©compenses bas√© sur le karma')
            .addFields([
                {
                    name: 'üìä Niveaux Configur√©s',
                    value: karmaRewards.length > 0 ? `${karmaRewards.length} niveaux` : 'Aucun niveau configur√©',
                    inline: true
                },
                {
                    name: '‚ö° D√©clenchement',
                    value: 'Automatique √† chaque action',
                    inline: true
                },
                {
                    name: 'üîß Configuration',
                    value: 'Utilisez les options ci-dessous pour g√©rer les r√©compenses',
                    inline: false
                }
            ]);

        if (karmaRewards.length > 0) {
            const rewardsList = karmaRewards
                .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
                .slice(0, 5) // Afficher seulement les 5 premiers
                .map(reward => {
                    const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                    const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                    const role = reward.roleId ? `R√¥le ${reward.roleDuration ? `(${reward.roleDuration}h)` : '(permanent)'}` : '';
                    const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                    return `${type} **${reward.name}** (${reward.karmaThreshold} karma)\n‚îî ${description}`;
                })
                .join('\n\n');
            
            embed.addFields([{
                name: 'üìã Niveaux Actuels',
                value: rewardsList,
                inline: false
            }]);
        }

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_rewards_config')
            .setPlaceholder('Gestion r√©compenses karma...')
            .addOptions([
                {
                    label: '‚ûï Cr√©er Niveau',
                    value: 'karma_create_type_select',
                    description: 'Cr√©er un nouveau niveau de r√©compense/sanction',
                    emoji: '‚ûï'
                },
                {
                    label: '‚úèÔ∏è Modifier Niveau',
                    value: 'karma_edit_level',
                    description: 'Modifier un niveau existant',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'üóëÔ∏è Supprimer Niveau',
                    value: 'karma_delete_level',
                    description: 'Supprimer un niveau existant',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: 'üß™ Tester Syst√®me',
                    value: 'karma_test_system',
                    description: 'Tester les r√©compenses automatiques',
                    emoji: 'üß™'
                },
                {
                    label: '‚Ü©Ô∏è Retour Karma',
                    value: 'back_karma',
                    description: 'Retour au menu karma'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }



    async showKarmaTypeSelector(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('‚öñÔ∏è Type de Niveau Karma')
            .setDescription('Choisissez le type d\'action √† effectuer')
            .addFields([
                { 
                    name: 'üòá R√©compense (Karma Positif)', 
                    value: 'Pour les actions bonnes\n‚Ä¢ Gains d\'argent\n‚Ä¢ R√¥les privil√©gi√©s\n‚Ä¢ Avantages', 
                    inline: true 
                },
                { 
                    name: 'üòà Sanction (Karma N√©gatif)', 
                    value: 'Pour les actions mauvaises\n‚Ä¢ Pertes d\'argent\n‚Ä¢ R√¥les de punition\n‚Ä¢ D√©savantages', 
                    inline: true 
                },
                { 
                    name: 'üé≠ R√¥le Temporaire', 
                    value: 'Ajouter r√¥le √† niveau existant\n‚Ä¢ S√©lection niveau karma\n‚Ä¢ Choix r√¥le Discord\n‚Ä¢ Dur√©e 1-7 jours', 
                    inline: false 
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_type_select')
            .setPlaceholder('Choisir le type de niveau...')
            .addOptions([
                {
                    label: 'üòá Cr√©er R√©compense',
                    value: 'karma_create_reward',
                    description: 'Niveau pour karma positif (actions bonnes)',
                    emoji: 'üòá'
                },
                {
                    label: 'üòà Cr√©er Sanction',
                    value: 'karma_create_sanction',
                    description: 'Niveau pour karma n√©gatif (actions mauvaises)',
                    emoji: 'üòà'
                },
                {
                    label: 'üé≠ Ajouter R√¥le Temporaire',
                    value: 'karma_add_temp_role',
                    description: 'Ajouter un r√¥le temporaire √† un niveau existant',
                    emoji: 'üé≠'
                },
                {
                    label: 'üß™ Tester Syst√®me',
                    value: 'karma_test_system',
                    description: 'Tester l\'application automatique des r√©compenses'
                },
                {
                    label: '‚Ü©Ô∏è Retour R√©compenses',
                    value: 'back_karma_rewards',
                    description: 'Retour au menu r√©compenses'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showKarmaLevelModal(interaction, type = null) {
        const isReward = type === 'reward';
        const isSanction = type === 'sanction';
        
        let title = 'üéÅ Cr√©er Niveau Karma';
        let thresholdLabel = 'Seuil Karma Net (-999 √† +999)';
        let thresholdPlaceholder = 'Ex: 10, -5, 0...';
        let moneyLabel = 'Gain/Perte Argent (-999999 √† +999999‚Ç¨)';
        let moneyPlaceholder = 'Ex: 100, -50, 0...';
        
        if (isReward) {
            title = 'üòá Cr√©er R√©compense Karma';
            thresholdLabel = 'Seuil Karma Positif (1 √† 999)';
            thresholdPlaceholder = 'Ex: 10, 50, 100...';
        } else if (isSanction) {
            title = 'üòà Cr√©er Sanction Karma';
            thresholdLabel = 'Seuil Karma N√©gatif (-999 √† -1)';
            thresholdPlaceholder = 'Ex: -10, -50, -100...';
        }
        
        // Argent flexible pour tous les types
        moneyLabel = 'Argent (-999,999‚Ç¨ √† 999,999‚Ç¨)';
        moneyPlaceholder = 'Ex: 100, -500, 1000, -2000...';

        const modal = new ModalBuilder()
            .setCustomId(`economy_karma_level_modal_${type || 'general'}`)
            .setTitle(title);

        const nameInput = new TextInputBuilder()
            .setCustomId('karma_name')
            .setLabel('Nom du Niveau')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder(isReward ? 'Ex: Champion, Saint, H√©ros...' : isSanction ? 'Ex: Voyou, Demon, Banni...' : 'Ex: Saint, Demon, Neutre...')
            .setMinLength(3)
            .setMaxLength(30)
            .setRequired(true);

        const thresholdInput = new TextInputBuilder()
            .setCustomId('karma_threshold')
            .setLabel(thresholdLabel)
            .setStyle(TextInputStyle.Short)
            .setPlaceholder(thresholdPlaceholder)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const moneyInput = new TextInputBuilder()
            .setCustomId('karma_money')
            .setLabel('Argent (-999,999‚Ç¨ √† 999,999‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 100, -500, 1000, -2000...')
            .setMinLength(1)
            .setMaxLength(8)
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(thresholdInput),
            new ActionRowBuilder().addComponents(moneyInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async handleKarmaLevelModal(interaction) {
        const name = interaction.fields.getTextInputValue('karma_name');
        const thresholdStr = interaction.fields.getTextInputValue('karma_threshold');
        const moneyStr = interaction.fields.getTextInputValue('karma_money') || '0';

        // D√©terminer le type depuis l'ID du modal
        const modalType = interaction.customId.split('_').pop();
        const isReward = modalType === 'reward';
        const isSanction = modalType === 'sanction';

        // Validation seuil karma
        const threshold = parseInt(thresholdStr);
        if (isNaN(threshold)) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre valide.', 
                flags: 64 
            });
            return;
        }

        // Validation sp√©cifique selon le type
        if (isReward && threshold <= 0) {
            await interaction.reply({ 
                content: '‚ùå Pour une r√©compense, le seuil karma doit √™tre positif (1 √† 999).', 
                flags: 64 
            });
            return;
        }

        if (isSanction && threshold >= 0) {
            await interaction.reply({ 
                content: '‚ùå Pour une sanction, le seuil karma doit √™tre n√©gatif (-999 √† -1).', 
                flags: 64 
            });
            return;
        }

        if (!isReward && !isSanction && (threshold < -999 || threshold > 999)) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre entre -999 et +999.', 
                flags: 64 
            });
            return;
        }

        // Validation montant argent
        const money = parseInt(moneyStr);
        if (isNaN(money)) {
            await interaction.reply({ 
                content: '‚ùå Montant argent invalide. Entrez un nombre valide.', 
                flags: 64 
            });
            return;
        }

        if (Math.abs(money) > 999999) {
            await interaction.reply({ 
                content: '‚ùå Le montant ne peut pas d√©passer 999,999‚Ç¨ en valeur absolue.', 
                flags: 64 
            });
            return;
        }

        // Sauvegarder le niveau
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karmaRewards) {
            economyConfig.karmaRewards = [];
        }

        const newLevel = {
            id: Date.now(),
            name: name,
            karmaThreshold: threshold,
            moneyReward: money,
            roleId: null,
            roleDuration: null,
            createdAt: new Date().toISOString()
        };

        economyConfig.karmaRewards.push(newLevel);
        await this.dataManager.saveData('economy.json', economyConfig);

        const type = threshold >= 0 ? 'üòá' : 'üòà';
        const moneyDisplay = money > 0 ? `+${money}‚Ç¨` : money < 0 ? `${money}‚Ç¨` : 'Aucun gain';

        await interaction.reply({
            content: `‚úÖ Niveau karma cr√©√© !\n\n${type} **${name}** (${threshold} karma)\nüí∞ ${moneyDisplay}\n\nüí° Vous pouvez maintenant ajouter un r√¥le temporaire via le menu suivant.`,
            flags: 64
        });
    }

    async showKarmaEditMenu(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        if (karmaRewards.length === 0) {
            await interaction.reply({ 
                content: '‚ùå Aucun niveau karma configur√© √† modifier. Cr√©ez d\'abord un niveau.', 
                flags: 64 
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚úèÔ∏è Modifier Niveau Karma')
            .setDescription('S√©lectionnez le niveau √† modifier');

        const options = karmaRewards
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
            .slice(0, 25) // Limite Discord
            .map(reward => {
                const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                const role = reward.roleId ? `R√¥le` : '';
                const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                
                return {
                    label: `${type} ${reward.name}`,
                    value: `edit_karma_${reward.id}`,
                    description: `Seuil: ${reward.karmaThreshold} - ${description}`
                };
            });

        options.push({
            label: '‚Ü©Ô∏è Retour R√©compenses',
            value: 'back_karma_rewards',
            description: 'Retour au menu r√©compenses karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_edit_select')
            .setPlaceholder('Choisir niveau √† modifier...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async showKarmaDeleteMenu(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        if (karmaRewards.length === 0) {
            await interaction.reply({ 
                content: '‚ùå Aucun niveau karma configur√© √† supprimer. Cr√©ez d\'abord un niveau.', 
                flags: 64 
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Supprimer Niveau Karma')
            .setDescription('‚ö†Ô∏è S√©lectionnez le niveau √† supprimer d√©finitivement');

        const options = karmaRewards
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
            .slice(0, 25) // Limite Discord
            .map(reward => {
                const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                const role = reward.roleId ? `R√¥le` : '';
                const description = money && role ? `${money}, ${role}` : money || role || 'Aucune action';
                
                return {
                    label: `${type} ${reward.name}`,
                    value: `delete_karma_${reward.id}`,
                    description: `Seuil: ${reward.karmaThreshold} - ${description}`
                };
            });

        options.push({
            label: '‚Ü©Ô∏è Retour R√©compenses',
            value: 'back_karma_rewards',
            description: 'Retour au menu r√©compenses karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_delete_select')
            .setPlaceholder('Choisir niveau √† supprimer...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async testKarmaSystem(interaction) {
        await interaction.reply({ content: 'üîß Test syst√®me karma en d√©veloppement', flags: 64 });
    }

    async showKarmaEditModal(interaction, karmaId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const reward = karmaRewards.find(r => r.id == karmaId);

        if (!reward) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId(`economy_karma_edit_modal_${karmaId}`)
            .setTitle(`‚úèÔ∏è Modifier: ${reward.name}`);

        const nameInput = new TextInputBuilder()
            .setCustomId('karma_name')
            .setLabel('Nom du Niveau')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.name)
            .setMinLength(3)
            .setMaxLength(30)
            .setRequired(true);

        const thresholdInput = new TextInputBuilder()
            .setCustomId('karma_threshold')
            .setLabel('Seuil Karma Net (-999 √† +999)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.karmaThreshold.toString())
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const moneyInput = new TextInputBuilder()
            .setCustomId('karma_money')
            .setLabel('Gain/Perte Argent (-999999 √† +999999‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.moneyReward?.toString() || '0')
            .setMinLength(1)
            .setMaxLength(7)
            .setRequired(false);

        const roleInput = new TextInputBuilder()
            .setCustomId('karma_role')
            .setLabel('ID R√¥le (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.roleId || '')
            .setMinLength(0)
            .setMaxLength(25)
            .setRequired(false);

        const durationInput = new TextInputBuilder()
            .setCustomId('karma_duration')
            .setLabel('Dur√©e R√¥le en Heures (vide = permanent)')
            .setStyle(TextInputStyle.Short)
            .setValue(reward.roleDuration?.toString() || '')
            .setMinLength(0)
            .setMaxLength(4)
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(thresholdInput),
            new ActionRowBuilder().addComponents(moneyInput),
            new ActionRowBuilder().addComponents(roleInput),
            new ActionRowBuilder().addComponents(durationInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async confirmKarmaDelete(interaction, karmaId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const reward = karmaRewards.find(r => r.id == karmaId);

        if (!reward) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
        const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : 'Aucun gain';
        const role = reward.roleId ? `R√¥le ${reward.roleDuration ? `(${reward.roleDuration}h)` : '(permanent)'}` : 'Aucun r√¥le';

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Confirmer Suppression')
            .setDescription(`‚ö†Ô∏è **Suppression d√©finitive**\n\n${type} **${reward.name}** (${reward.karmaThreshold} karma)\nüí∞ ${money}\nüé≠ ${role}`)
            .setFooter({ text: 'Cette action est irr√©versible' });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_delete_confirm')
            .setPlaceholder('Confirmer la suppression...')
            .addOptions([
                {
                    label: '‚úÖ Confirmer Suppression',
                    value: `confirm_delete_${karmaId}`,
                    description: 'Supprimer d√©finitivement ce niveau',
                    emoji: '‚ö†Ô∏è'
                },
                {
                    label: '‚ùå Annuler',
                    value: 'back_karma_rewards',
                    description: 'Retour sans supprimer'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
    }

    async handleKarmaEditModal(interaction) {
        const karmaId = interaction.customId.split('_').pop();
        const name = interaction.fields.getTextInputValue('karma_name');
        const thresholdStr = interaction.fields.getTextInputValue('karma_threshold');
        const moneyStr = interaction.fields.getTextInputValue('karma_money') || '0';
        const roleIdStr = interaction.fields.getTextInputValue('karma_role') || '';
        const durationStr = interaction.fields.getTextInputValue('karma_duration') || '';

        // Validation (m√™me logique que cr√©ation)
        const threshold = parseInt(thresholdStr);
        if (isNaN(threshold) || threshold < -999 || threshold > 999) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre entre -999 et +999.', 
                flags: 64 
            });
            return;
        }

        const money = parseInt(moneyStr);
        if (isNaN(money) || money < -999999 || money > 999999) {
            await interaction.reply({ 
                content: '‚ùå Montant argent invalide. Entrez un nombre entre -999999 et +999999.', 
                flags: 64 
            });
            return;
        }



        // Mise √† jour du niveau
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const rewardIndex = karmaRewards.findIndex(r => r.id == karmaId);

        if (rewardIndex === -1) {
            await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
            return;
        }

        karmaRewards[rewardIndex] = {
            ...karmaRewards[rewardIndex],
            name: name,
            karmaThreshold: threshold,
            moneyReward: money,
            roleId: roleIdStr || null,
            roleDuration: duration,
            updatedAt: new Date().toISOString()
        };

        economyConfig.karmaRewards = karmaRewards;
        await this.dataManager.saveData('economy.json', economyConfig);

        const type = threshold >= 0 ? 'üòá' : 'üòà';
        const moneyDisplay = money > 0 ? `+${money}‚Ç¨` : money < 0 ? `${money}‚Ç¨` : 'Aucun gain';
        const roleDisplay = roleIdStr ? `R√¥le ${duration ? `(${duration}h)` : '(permanent)'}` : 'Aucun r√¥le';

        await interaction.reply({
            content: `‚úÖ Niveau karma modifi√© !\n\n${type} **${name}** (${threshold} karma)\nüí∞ ${moneyDisplay}\nüé≠ ${roleDisplay}`,
            flags: 64
        });
    }

    async showKarmaLevelSelector(interaction, purpose = 'temp_role') {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];

        if (karmaRewards.length === 0) {
            await interaction.reply({
                content: '‚ùå Aucun niveau karma configur√©. Veuillez d\'abord cr√©er des niveaux karma.',
                flags: 64
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('üé≠ S√©lection Niveau Karma')
            .setDescription('Choisissez le niveau karma pour ajouter un r√¥le temporaire')
            .addFields([
                {
                    name: 'üìù √âtapes',
                    value: '1Ô∏è‚É£ S√©lectionner le niveau karma\n2Ô∏è‚É£ Choisir le r√¥le Discord\n3Ô∏è‚É£ D√©finir la dur√©e (1-7 jours)',
                    inline: false
                }
            ]);

        const options = karmaRewards
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold)
            .slice(0, 25) // Discord limit
            .map(reward => {
                const type = reward.karmaThreshold >= 0 ? 'üòá' : 'üòà';
                const money = reward.moneyReward > 0 ? `+${reward.moneyReward}‚Ç¨` : reward.moneyReward < 0 ? `${reward.moneyReward}‚Ç¨` : '';
                const hasRole = reward.roleId ? 'üé≠' : '‚ùå';
                return {
                    label: `${type} ${reward.name} (${reward.karmaThreshold} karma)`,
                    value: `select_level_${reward.id}`,
                    description: `${money} ${hasRole} R√¥le: ${reward.roleId ? 'Configur√©' : 'Aucun'}`,
                    emoji: type
                };
            });

        options.push({
            label: '‚Ü©Ô∏è Retour R√©compenses',
            value: 'back_karma_rewards',
            description: 'Retour au menu r√©compenses',
            emoji: '‚Ü©Ô∏è'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_level_select')
            .setPlaceholder('Choisir un niveau karma...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showRoleSelector(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üé≠ Cr√©er R√¥le Temporaire')
            .setDescription('Choisissez le r√¥le Discord √† utiliser pour les r√©compenses karma')
            .addFields([
                {
                    name: 'üìù √âtape 1/2',
                    value: 'üé≠ S√©lectionner le r√¥le Discord',
                    inline: false
                },
                {
                    name: 'üìã Instructions',
                    value: '‚Ä¢ S√©lectionnez un r√¥le existant du serveur\n‚Ä¢ Le r√¥le sera attribu√© temporairement\n‚Ä¢ Dur√©e configurable ensuite (1-7 jours)',
                    inline: false
                }
            ]);

        // Utiliser RoleSelectMenuBuilder pour s√©lectionner un r√¥le
        const roleSelectMenu = new RoleSelectMenuBuilder()
            .setCustomId('karma_temp_role_select')
            .setPlaceholder('Choisir un r√¥le Discord...')
            .setMinValues(1)
            .setMaxValues(1);

        const backButton = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_type_select')
            .setPlaceholder('‚Ü©Ô∏è Retour menu type')
            .addOptions([{
                label: '‚Ü©Ô∏è Retour Type Karma',
                value: 'back_karma_type',
                description: 'Retour au s√©lecteur de type'
            }]);

        const rows = [
            new ActionRowBuilder().addComponents(roleSelectMenu),
            new ActionRowBuilder().addComponents(backButton)
        ];
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: rows });
        } else {
            await interaction.reply({ embeds: [embed], components: rows, flags: 64 });
        }
    }

    async showTempRoleTypeSelector(interaction, roleId) {
        const role = interaction.guild.roles.cache.get(roleId);
        const roleName = role ? role.name : 'R√¥le inconnu';

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚öñÔ∏è Type de R√¥le Temporaire')
            .setDescription(`**R√¥le:** üé≠ ${roleName}\n\nChoisissez le type de karma pour ce r√¥le`)
            .addFields([
                {
                    name: 'üìù √âtape 2/3',
                    value: '‚öñÔ∏è D√©finir le type de karma',
                    inline: false
                },
                {
                    name: 'üòá R√©compense',
                    value: 'Pour karma positif (actions bonnes)',
                    inline: true
                },
                {
                    name: 'üòà Sanction',
                    value: 'Pour karma n√©gatif (actions mauvaises)',
                    inline: true
                }
            ]);

        const typeSelectMenu = new StringSelectMenuBuilder()
            .setCustomId(`karma_temp_type_select_${roleId}`)
            .setPlaceholder('Choisir le type de karma...')
            .addOptions([
                {
                    label: 'üòá R√©compense',
                    value: 'reward',
                    description: 'R√¥le pour karma positif (actions bonnes)',
                    emoji: 'üòá'
                },
                {
                    label: 'üòà Sanction',
                    value: 'sanction',
                    description: 'R√¥le pour karma n√©gatif (actions mauvaises)',
                    emoji: 'üòà'
                },
                {
                    label: '‚Ü©Ô∏è Retour R√¥le',
                    value: 'back_role_select',
                    description: 'Retour s√©lection r√¥le'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(typeSelectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showTempRoleModal(interaction, roleId, type) {
        if (type === 'back_role_select') {
            await this.showRoleSelector(interaction);
            return;
        }

        const role = interaction.guild.roles.cache.get(roleId);
        const roleName = role ? role.name : 'R√¥le inconnu';
        const isReward = type === 'reward';

        const title = isReward ? 'üòá R√¥le Temporaire R√©compense' : 'üòà R√¥le Temporaire Sanction';
        const thresholdLabel = isReward ? 'Seuil Karma Positif (1 √† 999)' : 'Seuil Karma N√©gatif (-999 √† -1)';
        const thresholdPlaceholder = isReward ? 'Ex: 10, 50, 100...' : 'Ex: -10, -50, -100...';

        const modal = new ModalBuilder()
            .setCustomId(`temp_role_modal_${roleId}_${type}`)
            .setTitle(title);

        const thresholdInput = new TextInputBuilder()
            .setCustomId('karma_threshold')
            .setLabel(thresholdLabel)
            .setStyle(TextInputStyle.Short)
            .setPlaceholder(thresholdPlaceholder)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const moneyInput = new TextInputBuilder()
            .setCustomId('money_reward')
            .setLabel('Argent (-999,999‚Ç¨ √† 999,999‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder(`Ex: ${isReward ? '100, 500, 1000' : '-100, -500, -1000'}`)
            .setMinLength(1)
            .setMaxLength(8)
            .setRequired(true);

        const durationInput = new TextInputBuilder()
            .setCustomId('role_duration')
            .setLabel('Dur√©e en Heures (1-168)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 24 (1 jour), 72 (3 jours), 168 (7 jours)')
            .setMinLength(1)
            .setMaxLength(3)
            .setRequired(true);

        const nameInput = new TextInputBuilder()
            .setCustomId('level_name')
            .setLabel('Nom du Niveau (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder(`Ex: ${isReward ? 'Champion, Saint, H√©ros' : 'Voyou, Demon, Banni'}`)
            .setMinLength(0)
            .setMaxLength(30)
            .setRequired(false);

        const rows = [
            new ActionRowBuilder().addComponents(thresholdInput),
            new ActionRowBuilder().addComponents(moneyInput),
            new ActionRowBuilder().addComponents(durationInput),
            new ActionRowBuilder().addComponents(nameInput)
        ];

        modal.addComponents(...rows);
        await interaction.showModal(modal);
    }

    async handleTempRoleModal(interaction) {
        const [, , modalType, roleId, type] = interaction.customId.split('_');
        const threshold = interaction.fields.getTextInputValue('karma_threshold');
        const moneyReward = interaction.fields.getTextInputValue('money_reward');
        const duration = interaction.fields.getTextInputValue('role_duration');
        const levelName = interaction.fields.getTextInputValue('level_name') || `R√¥le ${type === 'reward' ? 'R√©compense' : 'Sanction'}`;

        const role = interaction.guild.roles.cache.get(roleId);
        const roleName = role ? role.name : 'R√¥le inconnu';
        const isReward = type === 'reward';

        // Validation seuil karma
        const karmaThreshold = parseInt(threshold);
        if (isNaN(karmaThreshold)) {
            await interaction.reply({ 
                content: '‚ùå Seuil karma invalide. Entrez un nombre valide.', 
                flags: 64 
            });
            return;
        }

        if (isReward && karmaThreshold <= 0) {
            await interaction.reply({ 
                content: '‚ùå Pour une r√©compense, le seuil karma doit √™tre positif (1 √† 999).', 
                flags: 64 
            });
            return;
        }

        if (!isReward && karmaThreshold >= 0) {
            await interaction.reply({ 
                content: '‚ùå Pour une sanction, le seuil karma doit √™tre n√©gatif (-999 √† -1).', 
                flags: 64 
            });
            return;
        }

        // Validation argent
        const moneyAmount = parseInt(moneyReward);
        if (isNaN(moneyAmount)) {
            await interaction.reply({ 
                content: '‚ùå Montant argent invalide. Entrez un nombre valide.', 
                flags: 64 
            });
            return;
        }

        if (Math.abs(moneyAmount) > 999999) {
            await interaction.reply({ 
                content: '‚ùå Le montant ne peut pas d√©passer 999,999‚Ç¨ en valeur absolue.', 
                flags: 64 
            });
            return;
        }

        if (moneyAmount === 0) {
            await interaction.reply({ 
                content: '‚ùå Le montant ne peut pas √™tre 0. Entrez un montant entre -999,999‚Ç¨ et 999,999‚Ç¨.', 
                flags: 64 
            });
            return;
        }

        // Validation dur√©e
        const roleDuration = parseInt(duration);
        if (isNaN(roleDuration) || roleDuration < 1 || roleDuration > 168) {
            await interaction.reply({ 
                content: '‚ùå Dur√©e invalide. Entrez un nombre entre 1 et 168 heures.', 
                flags: 64 
            });
            return;
        }

        // Cr√©er le niveau karma avec r√¥le temporaire
        const tempRole = {
            id: Date.now(),
            name: levelName,
            karmaThreshold: karmaThreshold,
            roleId: roleId,
            roleName: roleName,
            duration: roleDuration,
            moneyReward: moneyAmount,
            type: isReward ? 'reward' : 'sanction',
            isTemporary: true,
            createdAt: new Date().toISOString()
        };

        // Sauvegarder dans la configuration
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karmaRewards) {
            economyConfig.karmaRewards = [];
        }
        economyConfig.karmaRewards.push(tempRole);
        await this.dataManager.saveData('economy.json', economyConfig);

        const durationDays = Math.round(roleDuration / 24 * 10) / 10;
        const typeIcon = isReward ? 'üòá' : 'üòà';
        const moneySign = moneyAmount >= 0 ? '+' : '';

        await interaction.reply({
            content: `‚úÖ **R√¥le temporaire cr√©√© !**\n${typeIcon} **Niveau:** ${levelName}\nüé≠ **R√¥le:** ${roleName}\n‚öñÔ∏è **Seuil:** ${karmaThreshold} karma\nüí∞ **Argent:** ${moneySign}${moneyAmount}‚Ç¨\n‚è∞ **Dur√©e:** ${durationDays} jour${durationDays > 1 ? 's' : ''}\n\n*Le r√¥le sera attribu√© automatiquement quand les membres atteignent ce niveau de karma.*`,
            flags: 64
        });
    }

    async showDurationSelector(interaction, levelId, roleId) {
        // R√©cup√©rer les informations du niveau
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const level = karmaRewards.find(r => r.id == levelId);

        if (!level) {
            await interaction.reply({
                content: '‚ùå Niveau karma introuvable.',
                flags: 64
            });
            return;
        }

        const type = level.karmaThreshold >= 0 ? 'üòá' : 'üòà';
        const role = interaction.guild.roles.cache.get(roleId);
        const roleName = role ? role.name : 'R√¥le inconnu';

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚è∞ Dur√©e du R√¥le')
            .setDescription(`**Niveau:** ${type} ${level.name} (${level.karmaThreshold} karma)\n**R√¥le:** üé≠ ${roleName}\n\nChoisissez la dur√©e d'attribution du r√¥le`)
            .addFields([
                {
                    name: 'üìù √âtape 3/3',
                    value: '‚è∞ D√©finir la dur√©e d\'attribution',
                    inline: false
                }
            ]);

        const durationSelectMenu = new StringSelectMenuBuilder()
            .setCustomId(`karma_duration_select_${levelId}_${roleId}`)
            .setPlaceholder('Choisir la dur√©e...')
            .addOptions([
                {
                    label: '1 jour',
                    value: '24',
                    description: '24 heures d\'attribution',
                    emoji: '1Ô∏è‚É£'
                },
                {
                    label: '2 jours',
                    value: '48',
                    description: '48 heures d\'attribution',
                    emoji: '2Ô∏è‚É£'
                },
                {
                    label: '3 jours',
                    value: '72',
                    description: '3 jours d\'attribution',
                    emoji: '3Ô∏è‚É£'
                },
                {
                    label: '4 jours',
                    value: '96',
                    description: '4 jours d\'attribution',
                    emoji: '4Ô∏è‚É£'
                },
                {
                    label: '5 jours',
                    value: '120',
                    description: '5 jours d\'attribution',
                    emoji: '5Ô∏è‚É£'
                },
                {
                    label: '6 jours',
                    value: '144',
                    description: '6 jours d\'attribution',
                    emoji: '6Ô∏è‚É£'
                },
                {
                    label: '7 jours',
                    value: '168',
                    description: '1 semaine d\'attribution',
                    emoji: '7Ô∏è‚É£'
                },
                {
                    label: '‚Ü©Ô∏è Retour R√¥le',
                    value: `back_role_select_${levelId}`,
                    description: 'Retour s√©lection r√¥le'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(durationSelectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async handleKarmaDeleteConfirm(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_karma_rewards') {
            await this.showKarmaRewardsConfig(interaction);
            return;
        }

        if (option.startsWith('confirm_delete_')) {
            const karmaId = option.replace('confirm_delete_', '');
            
            const economyConfig = await this.dataManager.loadData('economy.json', {});
            const karmaRewards = economyConfig.karmaRewards || [];
            const rewardIndex = karmaRewards.findIndex(r => r.id == karmaId);

            if (rewardIndex === -1) {
                await interaction.reply({ content: '‚ùå Niveau karma introuvable', flags: 64 });
                return;
            }

            const deletedReward = karmaRewards[rewardIndex];
            karmaRewards.splice(rewardIndex, 1);
            
            economyConfig.karmaRewards = karmaRewards;
            await this.dataManager.saveData('economy.json', economyConfig);

            await interaction.reply({
                content: `‚úÖ Niveau karma **${deletedReward.name}** supprim√© d√©finitivement.`,
                flags: 64
            });
        }
    }

    async showMessagesAmountModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentAmount = economyConfig.messages?.amount || 5;

        const modal = new ModalBuilder()
            .setCustomId('economy_messages_amount_modal')
            .setTitle('üí∞ Configurer Montant Messages');

        const amountInput = new TextInputBuilder()
            .setCustomId('messages_amount')
            .setLabel('Montant par Message (1-50‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('5')
            .setValue(`${currentAmount}`)
            .setMinLength(1)
            .setMaxLength(2)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(amountInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async showMessagesCooldownModal(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const currentCooldown = Math.round((economyConfig.messages?.cooldown || 60000) / 1000);

        const modal = new ModalBuilder()
            .setCustomId('economy_messages_cooldown_modal')
            .setTitle('‚è∞ Configurer Cooldown Messages');

        const cooldownInput = new TextInputBuilder()
            .setCustomId('messages_cooldown')
            .setLabel('Cooldown en Secondes (10-60s)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('60')
            .setValue(`${currentCooldown}`)
            .setMinLength(2)
            .setMaxLength(3)
            .setRequired(true);

        const row = new ActionRowBuilder().addComponents(cooldownInput);
        modal.addComponents(row);

        await interaction.showModal(modal);
    }

    async toggleMessagesSystem(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.enabled = !economyConfig.messages.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.update({
            content: `‚úÖ Gains par message ${economyConfig.messages.enabled ? 'activ√©s' : 'd√©sactiv√©s'}`,
            embeds: [],
            components: []
        });
    }

    async handleMessagesAmountModal(interaction) {
        const amountStr = interaction.fields.getTextInputValue('messages_amount');
        const amount = parseInt(amountStr);
        
        if (isNaN(amount) || amount < 1 || amount > 50) {
            await interaction.reply({ 
                content: '‚ùå Montant invalide. Veuillez entrer un nombre entre 1 et 50‚Ç¨.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.amount = amount;
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Montant par message mis √† jour : **${amount}‚Ç¨**`,
            flags: 64
        });
    }

    async handleMessagesCooldownModal(interaction) {
        const cooldownStr = interaction.fields.getTextInputValue('messages_cooldown');
        const cooldownSeconds = parseInt(cooldownStr);
        
        if (isNaN(cooldownSeconds) || cooldownSeconds < 10 || cooldownSeconds > 60) {
            await interaction.reply({ 
                content: '‚ùå Cooldown invalide. Veuillez entrer un nombre entre 10 et 60 secondes.', 
                flags: 64 
            });
            return;
        }

        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.messages) {
            economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
        }
        
        economyConfig.messages.cooldown = cooldownSeconds * 1000; // Convertir en millisecondes
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Cooldown messages mis √† jour : **${cooldownSeconds}s**`,
            flags: 64
        });
    }

    async handleMessagesConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'messages_amount':
                await this.showMessagesAmountModal(interaction);
                break;
            case 'messages_cooldown':
                await this.showMessagesCooldownModal(interaction);
                break;
            case 'messages_toggle':
                await this.toggleMessagesSystem(interaction);
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option messages non reconnue', flags: 64 });
        }
    }

    async handleStatsConfig(interaction) {
        const option = interaction.values[0];
        
        switch (option) {
            case 'detailed_stats':
                await this.showDetailedStats(interaction);
                break;
            case 'backup_data':
                await interaction.reply({ content: 'üîß Backup donn√©es en d√©veloppement', flags: 64 });
                break;
            case 'back_main':
                await this.showMainConfigMenu(interaction);
                break;
            default:
                await interaction.reply({ content: '‚ùå Option stats non reconnue', flags: 64 });
        }
    }

    // M√©thodes utilitaires pour les actions de configuration
    async toggleKarmaAutoReset(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karma) economyConfig.karma = {};
        
        economyConfig.karma.autoReset = !economyConfig.karma.autoReset;
        await this.dataManager.saveData('economy.json', economyConfig);
        
        await interaction.reply({ 
            content: `‚úÖ Auto-reset karma ${economyConfig.karma.autoReset ? 'activ√©' : 'd√©sactiv√©'}`, 
            flags: 64 
        });
    }

    async showKarmaResetDaySelector(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaConfig = economyConfig.karma || { resetDay: 'dimanche' };
        
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üìÖ Jour de Reset Karma')
            .setDescription(`Choisissez le jour de reset hebdomadaire automatique du karma`)
            .addFields([
                {
                    name: 'üìÖ Jour Actuel',
                    value: `**${karmaConfig.resetDay || 'dimanche'}**`,
                    inline: true
                },
                {
                    name: 'üîÑ Auto-Reset',
                    value: karmaConfig.autoReset ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: '‚ÑπÔ∏è Information',
                    value: 'Le reset automatique remet √† z√©ro le karma bon et mauvais de tous les membres chaque semaine.',
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('karma_reset_day_select')
            .setPlaceholder('S√©lectionnez le jour de reset...')
            .addOptions([
                {
                    label: 'üìÖ Lundi',
                    value: 'lundi',
                    description: 'Reset chaque lundi √† minuit',
                    emoji: '1Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Mardi',
                    value: 'mardi',
                    description: 'Reset chaque mardi √† minuit',
                    emoji: '2Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Mercredi',
                    value: 'mercredi',
                    description: 'Reset chaque mercredi √† minuit',
                    emoji: '3Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Jeudi',
                    value: 'jeudi',
                    description: 'Reset chaque jeudi √† minuit',
                    emoji: '4Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Vendredi',
                    value: 'vendredi',
                    description: 'Reset chaque vendredi √† minuit',
                    emoji: '5Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Samedi',
                    value: 'samedi',
                    description: 'Reset chaque samedi √† minuit',
                    emoji: '6Ô∏è‚É£'
                },
                {
                    label: 'üìÖ Dimanche',
                    value: 'dimanche',
                    description: 'Reset chaque dimanche √† minuit',
                    emoji: '7Ô∏è‚É£'
                },
                {
                    label: '‚Ü©Ô∏è Retour Karma',
                    value: 'back_karma',
                    description: 'Retour au menu karma'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleKarmaResetDaySelection(interaction) {
        const selectedDay = interaction.values[0];
        
        if (selectedDay === 'back_karma') {
            await this.showKarmaConfig(interaction);
            return;
        }
        
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karma) economyConfig.karma = {};
        
        economyConfig.karma.resetDay = selectedDay;
        await this.dataManager.saveData('economy.json', economyConfig);
        
        const dayNames = {
            'lundi': 'Lundi',
            'mardi': 'Mardi', 
            'mercredi': 'Mercredi',
            'jeudi': 'Jeudi',
            'vendredi': 'Vendredi',
            'samedi': 'Samedi',
            'dimanche': 'Dimanche'
        };
        
        await interaction.reply({
            content: `‚úÖ **Jour de reset karma d√©fini !**\nüìÖ Nouveau jour : **${dayNames[selectedDay]}**\n‚è∞ Le reset aura lieu chaque ${dayNames[selectedDay].toLowerCase()} √† minuit`,
            flags: 64
        });
    }

    async showShopList(interaction) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        if (guildShop.length === 0) {
            await interaction.reply({ 
                content: 'üì¶ Aucun article dans la boutique. Utilisez `/boutique` pour ajouter des articles.', 
                flags: 64 
            });
            return;
        }
        
        const itemsList = guildShop.map((item, index) => 
            `${index + 1}. ${item.name} - ${item.price}‚Ç¨`
        ).join('\n');
        
        await interaction.reply({ 
            content: `üì¶ **Articles de la boutique:**\n\`\`\`${itemsList}\`\`\``, 
            flags: 64 
        });
    }

    // M√©thodes pour la cr√©ation d'articles boutique
    async showCustomObjectModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId('custom_object_modal')
            .setTitle('üé® Cr√©er Objet Personnalis√©');

        const nameInput = new TextInputBuilder()
            .setCustomId('object_name')
            .setLabel('Nom de l\'objet')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(50)
            .setPlaceholder('Ex: √âp√©e l√©gendaire')
            .setRequired(true);

        const priceInput = new TextInputBuilder()
            .setCustomId('object_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 500')
            .setRequired(true);

        const descInput = new TextInputBuilder()
            .setCustomId('object_description')
            .setLabel('Description (optionnelle)')
            .setStyle(TextInputStyle.Paragraph)
            .setMinLength(0)
            .setMaxLength(200)
            .setPlaceholder('Description de l\'objet...')
            .setRequired(false);

        const nameRow = new ActionRowBuilder().addComponents(nameInput);
        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const descRow = new ActionRowBuilder().addComponents(descInput);

        modal.addComponents(nameRow, priceRow, descRow);
        await interaction.showModal(modal);
    }

    async showTempRoleSelector(interaction) {
        const { RoleSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚åõ Cr√©er R√¥le Temporaire')
            .setDescription('S√©lectionnez le r√¥le √† vendre temporairement');

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('temp_role_select')
            .setPlaceholder('Choisissez un r√¥le...')
            .setMinValues(1)
            .setMaxValues(1);

        const row = new ActionRowBuilder().addComponents(roleSelect);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showPermRoleSelector(interaction) {
        const { RoleSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('‚≠ê Cr√©er R√¥le Permanent')
            .setDescription('S√©lectionnez le r√¥le √† vendre d√©finitivement');

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('perm_role_select')
            .setPlaceholder('Choisissez un r√¥le...')
            .setMinValues(1)
            .setMaxValues(1);

        const row = new ActionRowBuilder().addComponents(roleSelect);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showDetailedStats(interaction) {
        const guildId = interaction.guild.id;
        const economyData = await this.dataManager.loadData('economy.json', {});
        const userData = economyData.users || {};
        
        const userCount = Object.keys(userData).length;
        const totalBalance = Object.values(userData).reduce((sum, user) => sum + (user.balance || 0), 0);
        
        await interaction.reply({ 
            content: `üìä **Statistiques √âconomiques:**\nüë• Utilisateurs: ${userCount}\nüí∞ Argent total: ${totalBalance}‚Ç¨`, 
            flags: 64 
        });
    }

    async showShopManagement(interaction) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        if (guildShop.length === 0) {
            await interaction.update({
                content: 'üì¶ Aucun article dans la boutique √† modifier ou supprimer.',
                embeds: [],
                components: []
            });
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚úèÔ∏è Gestion Articles Boutique')
            .setDescription('S√©lectionnez un article √† modifier ou supprimer')
            .addFields([
                {
                    name: 'üìä Articles Disponibles',
                    value: `${guildShop.length} article(s) configur√©(s)`,
                    inline: true
                },
                {
                    name: '‚ö†Ô∏è Actions Disponibles',
                    value: '‚Ä¢ Modifier nom, prix, description\n‚Ä¢ Supprimer d√©finitivement',
                    inline: false
                }
            ]);

        const options = guildShop.slice(0, 20).map((item, index) => {
            const typeIcon = item.type === 'temporary_role' ? '‚åõ' : 
                            item.type === 'permanent_role' ? '‚≠ê' : 'üé®';
            const typeName = item.type === 'temporary_role' ? 'R√¥le Temp' : 
                           item.type === 'permanent_role' ? 'R√¥le Perm' : 'Objet';
            
            return {
                label: `${typeIcon} ${item.name}`,
                value: `manage_item_${item.id}`,
                description: `${typeName} - ${item.price}‚Ç¨`,
                emoji: typeIcon
            };
        });

        options.push({
            label: '‚Ü©Ô∏è Retour Boutique',
            value: 'back_shop',
            description: 'Retour au menu boutique'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('shop_item_management')
            .setPlaceholder('Choisir un article √† g√©rer...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleShopItemManagement(interaction) {
        const selectedValue = interaction.values[0];
        
        if (selectedValue === 'back_shop') {
            await this.showShopConfig(interaction);
            return;
        }

        const itemId = selectedValue.replace('manage_item_', '');
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        // Conversion pour g√©rer les IDs string et number
        const item = guildShop.find(i => i.id.toString() === itemId.toString());
        if (!item) {
            await interaction.update({
                content: '‚ùå Article introuvable.',
                embeds: [],
                components: []
            });
            return;
        }

        const typeIcon = item.type === 'temporary_role' ? '‚åõ' : 
                        item.type === 'permanent_role' ? '‚≠ê' : 'üé®';
        const typeName = item.type === 'temporary_role' ? 'R√¥le Temporaire' : 
                       item.type === 'permanent_role' ? 'R√¥le Permanent' : 'Objet Personnalis√©';

        const embed = new EmbedBuilder()
            .setColor('#e67e22')
            .setTitle(`${typeIcon} Gestion Article`)
            .setDescription(`**${item.name}**\n${typeName} - ${item.price}‚Ç¨`)
            .addFields([
                {
                    name: 'üí∞ Prix',
                    value: `${item.price}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üìù Description',
                    value: item.description || 'Aucune description',
                    inline: true
                },
                {
                    name: 'üïí Cr√©√© le',
                    value: new Date(item.createdAt).toLocaleDateString('fr-FR'),
                    inline: true
                }
            ]);

        if (item.type === 'temporary_role' && item.duration) {
            embed.addFields([{
                name: '‚è±Ô∏è Dur√©e',
                value: `${item.duration} jours`,
                inline: true
            }]);
        }

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`shop_item_actions_${itemId}`)
            .setPlaceholder('Action √† effectuer...')
            .addOptions([
                {
                    label: '‚úèÔ∏è Modifier',
                    value: `edit_item_${itemId}`,
                    description: 'Modifier nom, prix ou description',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'üóëÔ∏è Supprimer',
                    value: `delete_item_${itemId}`,
                    description: 'Supprimer d√©finitivement cet article',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: '‚Ü©Ô∏è Retour Liste',
                    value: 'back_management',
                    description: 'Retour √† la liste des articles'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showKarmaStats(interaction) {
        const guildId = interaction.guild.id;
        const economyData = await this.dataManager.loadData('economy.json', {});
        const userData = economyData.users || {};
        
        let totalGoodKarma = 0;
        let totalBadKarma = 0;
        let userCount = 0;
        
        Object.values(userData).forEach(user => {
            if (user.goodKarma || user.badKarma) {
                totalGoodKarma += user.goodKarma || 0;
                totalBadKarma += user.badKarma || 0;
                userCount++;
            }
        });
        
        await interaction.reply({ 
            content: `‚öñÔ∏è **Statistiques Karma:**\nüë• Utilisateurs actifs: ${userCount}\nüòá Karma positif total: ${totalGoodKarma}\nüòà Karma n√©gatif total: ${totalBadKarma}`, 
            flags: 64 
        });
    }

    async showActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('‚ö° Configuration Actions √âconomiques')
            .setDescription('Configurez les 6 actions √©conomiques disponibles')
            .addFields([
                { name: 'üíº Travailler', value: 'Action positive (+üòá)', inline: true },
                { name: 'üé£ P√™cher', value: 'Action positive (+üòá)', inline: true },
                { name: 'üíù Donner', value: 'Action tr√®s positive (+üòá)', inline: true },
                { name: 'üí∞ Voler', value: 'Action n√©gative (+üòà)', inline: true },
                { name: 'üî´ Crime', value: 'Action tr√®s n√©gative (+üòà)', inline: true },
                { name: 'üé≤ Parier', value: 'Action n√©gative (+üòà)', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_actions_select')
            .setPlaceholder('Choisissez une action √† configurer...')
            .addOptions([
                { label: 'üíº Travailler', value: 'travailler', description: 'Configurer le travail' },
                { label: 'üé£ P√™cher', value: 'pecher', description: 'Configurer la p√™che' },
                { label: 'üíù Donner', value: 'donner', description: 'Configurer les dons' },
                { label: 'üí∞ Voler', value: 'voler', description: 'Configurer le vol' },
                { label: 'üî´ Crime', value: 'crime', description: 'Configurer les crimes' },
                { label: 'üé≤ Parier', value: 'parier', description: 'Configurer les paris' },
                { label: '‚Ü©Ô∏è Retour Menu Principal', value: 'back_main', description: 'Retour au menu √©conomie' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showShopConfig(interaction) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('üõí Configuration Boutique')
            .setDescription('Gestion de la boutique du serveur')
            .addFields([
                {
                    name: 'üì¶ Articles Actuels',
                    value: guildShop.length > 0 ? `${guildShop.length} articles configur√©s` : 'Aucun article',
                    inline: true
                },
                {
                    name: 'üíº Acc√®s',
                    value: 'Commande `/boutique` disponible',
                    inline: true
                },
                {
                    name: 'üé® Types',
                    value: 'Objets personnalis√©s + R√¥les',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_config')
            .setPlaceholder('Configuration boutique...')
            .addOptions([
                {
                    label: 'üì¶ Voir Articles',
                    value: 'shop_list',
                    description: 'Afficher tous les articles de la boutique',
                    emoji: 'üì¶'
                },
                {
                    label: 'üé® Cr√©er Objet Personnalis√©',
                    value: 'shop_create_custom',
                    description: 'Cr√©er un objet avec nom, prix et description',
                    emoji: 'üé®'
                },
                {
                    label: '‚åõ Cr√©er R√¥le Temporaire',
                    value: 'shop_create_temp_role',
                    description: 'Cr√©er un r√¥le temporaire payant',
                    emoji: '‚åõ'
                },
                {
                    label: '‚≠ê Cr√©er R√¥le Permanent',
                    value: 'shop_create_perm_role',
                    description: 'Cr√©er un r√¥le permanent payant',
                    emoji: '‚≠ê'
                },
                {
                    label: '‚úèÔ∏è Modifier/Supprimer Article',
                    value: 'shop_manage_items',
                    description: 'Modifier ou supprimer un objet/r√¥le existant',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'üí∏ Remises Karma',
                    value: 'shop_karma_discounts',
                    description: 'Configurer les remises en % selon karma net',
                    emoji: 'üí∏'
                },
                {
                    label: 'üõí Acc√®s Boutique',
                    value: 'shop_access',
                    description: 'Utiliser /boutique pour configuration compl√®te',
                    emoji: 'üõí'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showKarmaConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaConfig = economyConfig.karma || { autoReset: false, resetDay: 'sunday' };

        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('‚öñÔ∏è Configuration Karma')
            .setDescription('G√©rez le syst√®me de karma positif/n√©gatif')
            .addFields([
                {
                    name: 'üîÑ Auto-Reset',
                    value: karmaConfig.autoReset ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üìÖ Jour Reset',
                    value: karmaConfig.resetDay || 'sunday',
                    inline: true
                },
                {
                    name: '‚öñÔ∏è √âquilibre',
                    value: 'Actions configurables individuellement',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_config')
            .setPlaceholder('Options karma...')
            .addOptions([
                {
                    label: 'üéÅ R√©compenses/Sanctions',
                    value: 'karma_rewards',
                    description: 'Configurer les r√©compenses automatiques par karma',
                    emoji: 'üéÅ'
                },
                {
                    label: 'üîÑ Toggle Auto-Reset',
                    value: 'karma_autoreset',
                    description: 'Activer/d√©sactiver le reset automatique',
                    emoji: 'üîÑ'
                },
                {
                    label: 'üìÖ Jour de Reset',
                    value: 'karma_resetday',
                    description: 'D√©finir le jour de reset hebdomadaire',
                    emoji: 'üìÖ'
                },
                {
                    label: 'üìä Voir Statistiques',
                    value: 'karma_stats',
                    description: 'Statistiques karma du serveur',
                    emoji: 'üìä'
                },
                {
                    label: 'üóëÔ∏è Reset Karma Total',
                    value: 'karma_reset_all',
                    description: 'Remettre √† z√©ro TOUT le karma du serveur',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showDailyConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const dailyConfig = economyConfig.daily || { amount: 100, enabled: true };
        
        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üìÖ Configuration Daily')
            .setDescription('R√©compenses quotidiennes pour les membres')
            .addFields([
                {
                    name: 'üí∞ Montant Daily',
                    value: `${dailyConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: dailyConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üî• Streak',
                    value: 'Bonus de s√©rie disponible',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_config')
            .setPlaceholder('Configuration daily...')
            .addOptions([
                {
                    label: 'üìù Modifier Montant',
                    value: 'daily_amount',
                    description: 'Changer le montant daily (1-1000‚Ç¨)',
                    emoji: 'üí∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'daily_toggle',
                    description: dailyConfig.enabled ? 'D√©sactiver daily' : 'Activer daily',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showMessagesConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const messagesConfig = economyConfig.messages || { enabled: false, amount: 5, cooldown: 60000 };
        
        const embed = new EmbedBuilder()
            .setColor('#2ecc71')
            .setTitle('üí¨ Configuration Messages')
            .setDescription('Gains automatiques par message')
            .addFields([
                {
                    name: 'üí∞ Montant par Message',
                    value: `${messagesConfig.amount}‚Ç¨`,
                    inline: true
                },
                {
                    name: '‚úÖ Status',
                    value: messagesConfig.enabled ? 'Activ√©' : 'D√©sactiv√©',
                    inline: true
                },
                {
                    name: '‚è∞ Cooldown',
                    value: `${Math.round(messagesConfig.cooldown / 1000)}s`,
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_config')
            .setPlaceholder('Configuration messages...')
            .addOptions([
                {
                    label: 'üìù Modifier Montant',
                    value: 'messages_amount',
                    description: 'Changer le montant par message (1-50‚Ç¨)',
                    emoji: 'üí∞'
                },
                {
                    label: '‚è∞ Modifier Cooldown',
                    value: 'messages_cooldown',
                    description: 'Changer le d√©lai entre gains',
                    emoji: '‚è∞'
                },
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'messages_toggle',
                    description: messagesConfig.enabled ? 'D√©sactiver gains' : 'Activer gains',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showStatsConfig(interaction) {
        // Calculer les statistiques √©conomiques du serveur
        const guildId = interaction.guild.id;
        const allUsers = await this.dataManager.getAllUsers(guildId);
        
        let totalBalance = 0;
        let totalGoodKarma = 0;
        let totalBadKarma = 0;
        let userCount = allUsers.length;
        
        allUsers.forEach(user => {
            totalBalance += user.balance || 1000;
            totalGoodKarma += user.karmaGood || 0;
            totalBadKarma += user.karmaBad || 0;
        });

        const embed = new EmbedBuilder()
            .setColor('#34495e')
            .setTitle('üìä Statistiques √âconomiques')
            .setDescription(`Donn√©es √©conomiques du serveur`)
            .addFields([
                {
                    name: 'üë• Utilisateurs Actifs',
                    value: `${userCount} membres`,
                    inline: true
                },
                {
                    name: 'üí∞ Richesse Totale',
                    value: `${totalBalance.toLocaleString()}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üí∞ Richesse Moyenne',
                    value: userCount > 0 ? `${Math.round(totalBalance / userCount).toLocaleString()}‚Ç¨` : '0‚Ç¨',
                    inline: true
                },
                {
                    name: 'üòá Karma Positif Total',
                    value: `${totalGoodKarma}`,
                    inline: true
                },
                {
                    name: 'üòà Karma N√©gatif Total',
                    value: `${totalBadKarma}`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è Karma Net Moyen',
                    value: userCount > 0 ? `${Math.round((totalGoodKarma - totalBadKarma) / userCount)}` : '0',
                    inline: true
                },
                {
                    name: 'üèÜ Richesse Serveur',
                    value: totalBalance > 100000 ? 'Serveur Riche üíé' : totalBalance > 50000 ? 'Serveur Prosp√®re üåü' : 'Serveur en D√©veloppement üå±',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_stats_config')
            .setPlaceholder('Options statistiques...')
            .addOptions([
                {
                    label: '‚Ü©Ô∏è Retour Menu Principal',
                    value: 'back_main',
                    description: 'Retour au menu √©conomie'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    // Handlers pour les sous-menus
    async handleEconomyKarmaConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        if (option === 'karma_autoreset') {
            const guildId = interaction.guild.id;
            const economyConfig = await this.dataManager.loadData('economy.json', {});
            
            if (!economyConfig.karma) economyConfig.karma = {};
            economyConfig.karma.autoReset = !economyConfig.karma.autoReset;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Auto-reset karma ${economyConfig.karma.autoReset ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showKarmaConfig(interaction);
            }, 2000);
        }
    }

    async handleEconomyShopConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        if (option === 'shop_access') {
            await interaction.update({
                content: 'üí° **Information Boutique**\n\nUtilisez la commande `/boutique` pour configurer compl√®tement votre boutique :\n‚Ä¢ Cr√©er objets personnalis√©s\n‚Ä¢ Ajouter r√¥les temporaires/permanents\n‚Ä¢ G√©rer les prix et descriptions\n\nLa boutique est accessible aux utilisateurs via `/boutique`',
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showShopConfig(interaction);
            }, 4000);
        } else {
            await interaction.update({
                content: '‚úÖ Configuration boutique mise √† jour',
                embeds: [],
                components: []
            });
        }
    }

    async handleEconomyDailyConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (option === 'daily_toggle') {
            if (!economyConfig.daily) economyConfig.daily = { amount: 100, enabled: true };
            economyConfig.daily.enabled = !economyConfig.daily.enabled;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Daily ${economyConfig.daily.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showDailyConfig(interaction);
            }, 2000);
            
        } else if (option === 'daily_amount') {
            const modal = new ModalBuilder()
                .setCustomId('economy_daily_amount_modal')
                .setTitle('üí∞ Montant Daily');

            const amountInput = new TextInputBuilder()
                .setCustomId('amount')
                .setLabel('Montant Daily (1-1000‚Ç¨)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('100')
                .setValue(`${economyConfig.daily?.amount || 100}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(amountInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
        }
    }

    async handleEconomyMessagesConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (option === 'messages_toggle') {
            if (!economyConfig.messages) economyConfig.messages = { enabled: false, amount: 5, cooldown: 60000 };
            economyConfig.messages.enabled = !economyConfig.messages.enabled;
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            await interaction.update({
                content: `‚úÖ Syst√®me de r√©compenses par message ${economyConfig.messages.enabled ? 'activ√©' : 'd√©sactiv√©'}`,
                embeds: [],
                components: []
            });
            
            setTimeout(async () => {
                await this.showMessagesConfig(interaction);
            }, 2000);
            
        } else if (option === 'messages_amount') {
            const modal = new ModalBuilder()
                .setCustomId('economy_messages_amount_modal')
                .setTitle('üí∞ Montant par Message');

            const amountInput = new TextInputBuilder()
                .setCustomId('amount')
                .setLabel('Montant par message (1-50‚Ç¨)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('5')
                .setValue(`${economyConfig.messages?.amount || 5}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(amountInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
            
        } else if (option === 'messages_cooldown') {
            const modal = new ModalBuilder()
                .setCustomId('economy_messages_cooldown_modal')
                .setTitle('‚è∞ Cooldown Messages');

            const cooldownInput = new TextInputBuilder()
                .setCustomId('cooldown')
                .setLabel('Cooldown en secondes (10-60s)')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('60')
                .setValue(`${Math.round((economyConfig.messages?.cooldown || 60000) / 1000)}`)
                .setRequired(true);

            const row = new ActionRowBuilder().addComponents(cooldownInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
        }
    }

    async handleEconomyStatsConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }
    }

    // Compatibilit√© avec les anciennes m√©thodes
    async handleActionSelected(interaction) {
        const action = interaction.values[0];
        
        if (action === 'back_main') {
            await this.handleMainMenu(interaction);
            return;
        }

        await interaction.reply({ 
            content: `‚öôÔ∏è Configuration ${action} : Cette fonctionnalit√© avanc√©e sera disponible prochainement. Utilisez les commandes directement pour tester les modifications.`,
            flags: 64 
        });
    }
    // Handlers pour les modals de la boutique
    async handleCustomObjectModal(interaction) {
        const name = interaction.fields.getTextInputValue('object_name');
        const priceStr = interaction.fields.getTextInputValue('object_price');
        const description = interaction.fields.getTextInputValue('object_description') || 'Objet personnalis√©';
        const karmaDiscountStr = interaction.fields.getTextInputValue('karma_discount') || '0';
        
        const price = parseInt(priceStr);
        const karmaDiscount = parseInt(karmaDiscountStr) || 0;
        
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }

        if (karmaDiscount < 0 || karmaDiscount > 99) {
            await interaction.reply({ content: '‚ùå Remise karma invalide (0-99%)', flags: 64 });
            return;
        }

        await this.saveShopItem(interaction, {
            type: 'custom',
            name: name,
            price: price,
            description: description,
            karmaDiscount: karmaDiscount
        });
    }

    async handleTempRolePriceModal(interaction, roleId) {
        const priceStr = interaction.fields.getTextInputValue('role_price');
        const durationStr = interaction.fields.getTextInputValue('role_duration');
        const karmaDiscountStr = interaction.fields.getTextInputValue('karma_discount') || '0';
        
        const price = parseInt(priceStr);
        const duration = parseInt(durationStr);
        const karmaDiscount = parseInt(karmaDiscountStr) || 0;
        
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }
        
        if (isNaN(duration) || duration < 1 || duration > 36500) {
            await interaction.reply({ content: '‚ùå Dur√©e invalide (1-36500 jours)', flags: 64 });
            return;
        }

        if (karmaDiscount < 0 || karmaDiscount > 99) {
            await interaction.reply({ content: '‚ùå Remise karma invalide (0-99%)', flags: 64 });
            return;
        }

        const role = interaction.guild.roles.cache.get(roleId);
        await this.saveShopItem(interaction, {
            type: 'temp_role',
            roleId: roleId,
            name: `R√¥le ${role?.name || 'Inconnu'}`,
            price: price,
            duration: duration,
            karmaDiscount: karmaDiscount
        });
    }

    async handlePermRolePriceModal(interaction, roleId) {
        const priceStr = interaction.fields.getTextInputValue('role_price');
        const karmaDiscountStr = interaction.fields.getTextInputValue('karma_discount') || '0';
        
        const price = parseInt(priceStr);
        const karmaDiscount = parseInt(karmaDiscountStr) || 0;
        
        if (isNaN(price) || price < 1 || price > 999999) {
            await interaction.reply({ content: '‚ùå Prix invalide (1-999999‚Ç¨)', flags: 64 });
            return;
        }

        if (karmaDiscount < 0 || karmaDiscount > 99) {
            await interaction.reply({ content: '‚ùå Remise karma invalide (0-99%)', flags: 64 });
            return;
        }

        const role = interaction.guild.roles.cache.get(roleId);
        await this.saveShopItem(interaction, {
            type: 'perm_role',
            roleId: roleId,
            name: `R√¥le ${role?.name || 'Inconnu'}`,
            price: price,
            karmaDiscount: karmaDiscount
        });
    }

    async saveShopItem(interaction, item) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        
        if (!shopData[guildId]) shopData[guildId] = [];
        
        const newItem = {
            id: Date.now(),
            ...item,
            createdAt: new Date().toISOString(),
            createdBy: interaction.user.id
        };
        
        shopData[guildId].push(newItem);
        await this.dataManager.saveData('shop.json', shopData);
        
        const typeEmojis = {
            'custom': 'üé®',
            'temp_role': '‚åõ',
            'perm_role': '‚≠ê'
        };
        
        await interaction.reply({ 
            content: `‚úÖ ${typeEmojis[item.type]} **${item.name}** ajout√© √† la boutique pour **${item.price}‚Ç¨**`, 
            flags: 64 
        });
    }

    // Gestion de la s√©lection de r√¥le
    async handleRoleSelection(interaction, customId) {
        console.log(`Traitement s√©lection r√¥le: ${customId}`);
        const selectedRoleId = interaction.values[0];
        const role = interaction.guild.roles.cache.get(selectedRoleId);
        
        if (!role) {
            await interaction.reply({ content: '‚ùå R√¥le introuvable', flags: 64 });
            return;
        }

        console.log(`R√¥le s√©lectionn√©: ${role.name} (${selectedRoleId})`);

        if (customId === 'temp_role_select') {
            console.log('Affichage modal prix r√¥le temporaire');
            await this.showTempRolePriceModal(interaction, selectedRoleId, role.name);
        } else if (customId === 'perm_role_select') {
            console.log('Affichage modal prix r√¥le permanent');
            await this.showPermRolePriceModal(interaction, selectedRoleId, role.name);
        }
    }

    async showTempRolePriceModal(interaction, roleId, roleName) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId(`temp_role_price_modal_${roleId}`)
            .setTitle(`‚åõ Prix R√¥le: ${roleName}`);

        const priceInput = new TextInputBuilder()
            .setCustomId('role_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 1000')
            .setRequired(true);

        const durationInput = new TextInputBuilder()
            .setCustomId('role_duration')
            .setLabel('Dur√©e (en jours)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(5)
            .setPlaceholder('Ex: 30')
            .setRequired(true);

        const karmaDiscountInput = new TextInputBuilder()
            .setCustomId('karma_discount')
            .setLabel('Remise karma net (% optionnel)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(0)
            .setMaxLength(3)
            .setPlaceholder('0-99')
            .setRequired(false);

        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const durationRow = new ActionRowBuilder().addComponents(durationInput);
        const karmaRow = new ActionRowBuilder().addComponents(karmaDiscountInput);

        modal.addComponents(priceRow, durationRow, karmaRow);
        await interaction.showModal(modal);
    }

    async showPermRolePriceModal(interaction, roleId, roleName) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId(`perm_role_price_modal_${roleId}`)
            .setTitle(`‚≠ê Prix R√¥le: ${roleName}`);

        const priceInput = new TextInputBuilder()
            .setCustomId('role_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(10)
            .setPlaceholder('Ex: 2000')
            .setRequired(true);

        const karmaDiscountInput = new TextInputBuilder()
            .setCustomId('karma_discount')
            .setLabel('Remise karma net (% optionnel)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(0)
            .setMaxLength(3)
            .setPlaceholder('0-99')
            .setRequired(false);

        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const karmaRow = new ActionRowBuilder().addComponents(karmaDiscountInput);
        modal.addComponents(priceRow, karmaRow);
        await interaction.showModal(modal);
    }
    async handleDurationSelection(interaction, levelId, roleId) {
        const option = interaction.values[0];
        
        if (option.startsWith('back_role_select_')) {
            await this.showRoleSelector(interaction, levelId);
            return;
        }

        const duration = parseInt(option);
        
        if (isNaN(duration) || duration < 24 || duration > 168) {
            await interaction.reply({
                content: '‚ùå Dur√©e invalide. Veuillez choisir entre 1 et 7 jours.',
                flags: 64
            });
            return;
        }

        // Sauvegarder la configuration
        await this.saveTempRoleConfiguration(interaction, levelId, roleId, duration);
    }

    async saveTempRoleConfiguration(interaction, levelId, roleId, duration) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaRewards = economyConfig.karmaRewards || [];
        const rewardIndex = karmaRewards.findIndex(r => r.id == levelId);

        if (rewardIndex === -1) {
            await interaction.reply({
                content: '‚ùå Niveau karma introuvable.',
                flags: 64
            });
            return;
        }

        // Mettre √† jour le niveau avec le r√¥le temporaire
        karmaRewards[rewardIndex].roleId = roleId;
        karmaRewards[rewardIndex].roleDuration = duration;
        
        economyConfig.karmaRewards = karmaRewards;
        await this.dataManager.saveData('economy.json', economyConfig);

        // R√©cup√©rer les informations pour confirmation
        const level = karmaRewards[rewardIndex];
        const role = interaction.guild.roles.cache.get(roleId);
        const roleName = role ? role.name : 'R√¥le inconnu';
        const type = level.karmaThreshold >= 0 ? 'üòá' : 'üòà';
        const durationText = duration === 24 ? '1 jour' : 
                            duration === 168 ? '1 semaine' : 
                            `${duration / 24} jours`;

        await interaction.reply({
            content: `‚úÖ **R√¥le temporaire configur√© !**\n\n${type} **${level.name}** (${level.karmaThreshold} karma)\nüé≠ R√¥le: **${roleName}**\n‚è∞ Dur√©e: **${durationText}**\n\nLe r√¥le sera automatiquement attribu√© aux membres atteignant ce niveau karma.`,
            flags: 64
        });
    }

    async testKarmaRewardSystem(interaction) {
        try {
            const KarmaRewardManager = require('../utils/karmaRewardManager');
            const karmaManager = new KarmaRewardManager(this.dataManager);
            await karmaManager.testKarmaSystem(interaction.user, interaction.guild, interaction.channel);
            
            // D√©clencher aussi la v√©rification automatique
            await karmaManager.checkAndApplyKarmaRewards(interaction.user, interaction.guild, interaction.channel);
            
            await interaction.update({
                content: 'üß™ **Test du syst√®me karma effectu√© !**\n\n‚úÖ Les messages de test ont √©t√© envoy√©s dans ce canal.\n‚úÖ Si vous remplissez les crit√®res, les r√©compenses ont √©t√© appliqu√©es automatiquement.',
                embeds: [],
                components: []
            });
        } catch (error) {
            console.error('Erreur test syst√®me karma:', error);
            await interaction.update({
                content: '‚ùå Erreur lors du test du syst√®me karma.',
                embeds: [],
                components: []
            });
        }
    }

    // M√©thodes pour la configuration des actions √©conomiques
    async handleActionConfigSelection(interaction) {
        const customId = interaction.customId;
        const actionName = customId.replace('action_config_', '');
        
        console.log(`‚öôÔ∏è Configuration action: ${actionName}`);
        
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || {
            enabled: true,
            minReward: 10,
            maxReward: 50,
            cooldown: 60000,
            goodKarma: 1,
            badKarma: 0
        };
        
        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle(`‚öôÔ∏è Configuration Action: ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`)
            .setDescription('Configurez les param√®tres de cette action √©conomique')
            .addFields([
                {
                    name: 'üí∞ R√©compenses',
                    value: `Min: **${actionConfig.minReward}‚Ç¨**\nMax: **${actionConfig.maxReward}‚Ç¨**`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è Karma',
                    value: `üòá Bon: **+${actionConfig.goodKarma}**\nüòà Mauvais: **${Math.abs(actionConfig.badKarma)}**`,
                    inline: true
                },
                {
                    name: '‚è∞ Cooldown',
                    value: `**${Math.round(actionConfig.cooldown / 1000)}s**`,
                    inline: true
                },
                {
                    name: 'üîß √âtat',
                    value: actionConfig.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`action_${actionName}_config`)
            .setPlaceholder('S√©lectionnez un param√®tre √† modifier...')
            .addOptions([
                {
                    label: 'üí∞ R√©compenses Min/Max',
                    value: 'rewards',
                    description: 'Modifier les montants minimum et maximum'
                },
                {
                    label: '‚öñÔ∏è Karma Bon/Mauvais',
                    value: 'karma',
                    description: 'Configurer les gains de karma'
                },
                {
                    label: '‚è∞ Cooldown',
                    value: 'cooldown',
                    description: 'Temps d\'attente entre les utilisations'
                },
                {
                    label: 'üîß Activer/D√©sactiver',
                    value: 'toggle',
                    description: 'Activer ou d√©sactiver cette action'
                },
                {
                    label: '‚Ü©Ô∏è Retour Actions',
                    value: 'back_actions',
                    description: 'Retour au menu des actions'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleActionSettings(interaction) {
        const customId = interaction.customId;
        const actionName = customId.replace('action_', '').replace('_config', '');
        const setting = interaction.values[0];
        
        console.log(`‚öôÔ∏è Param√®tre ${setting} pour action ${actionName}`);
        
        if (setting === 'back_actions') {
            await this.showActionsConfig(interaction);
            return;
        }
        
        switch (setting) {
            case 'rewards':
                await this.showActionRewardsModal(interaction, actionName);
                break;
            case 'karma':
                await this.showActionKarmaModal(interaction, actionName);
                break;
            case 'cooldown':
                await this.showActionCooldownModal(interaction, actionName);
                break;
            case 'toggle':
                await this.toggleAction(interaction, actionName);
                break;
            default:
                await interaction.reply({ 
                    content: '‚ùå Param√®tre non reconnu', 
                    flags: 64 
                });
        }
    }

    async showActionRewardsModal(interaction, actionName) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || { minReward: 10, maxReward: 50 };
        
        const modal = new ModalBuilder()
            .setCustomId(`action_rewards_modal_${actionName}`)
            .setTitle(`üí∞ R√©compenses - ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`);

        const minInput = new TextInputBuilder()
            .setCustomId('min_reward')
            .setLabel('R√©compense Minimum (1-1000‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setValue(`${actionConfig.minReward}`)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const maxInput = new TextInputBuilder()
            .setCustomId('max_reward')
            .setLabel('R√©compense Maximum (1-1000‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setValue(`${actionConfig.maxReward}`)
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const minRow = new ActionRowBuilder().addComponents(minInput);
        const maxRow = new ActionRowBuilder().addComponents(maxInput);
        
        modal.addComponents(minRow, maxRow);
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.showModal(modal);
            } else {
                console.log('‚ùå Interaction d√©j√† trait√©e, impossible d\'afficher modal r√©compenses');
            }
        } catch (error) {
            console.error('‚ùå Erreur affichage modal r√©compenses:', error);
        }
    }

    async showActionKarmaModal(interaction, actionName) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || { goodKarma: 1, badKarma: 0 };
        
        const modal = new ModalBuilder()
            .setCustomId(`action_karma_modal_${actionName}`)
            .setTitle(`‚öñÔ∏è Karma - ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`);

        const goodInput = new TextInputBuilder()
            .setCustomId('good_karma')
            .setLabel('Karma Bon (0-10)')
            .setStyle(TextInputStyle.Short)
            .setValue(`${actionConfig.goodKarma}`)
            .setMinLength(1)
            .setMaxLength(2)
            .setRequired(true);

        const badInput = new TextInputBuilder()
            .setCustomId('bad_karma')
            .setLabel('Karma Mauvais (0-10)')
            .setStyle(TextInputStyle.Short)
            .setValue(`${Math.abs(actionConfig.badKarma)}`)
            .setMinLength(1)
            .setMaxLength(2)
            .setRequired(true);

        const goodRow = new ActionRowBuilder().addComponents(goodInput);
        const badRow = new ActionRowBuilder().addComponents(badInput);
        
        modal.addComponents(goodRow, badRow);
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.showModal(modal);
            } else {
                console.log('‚ùå Interaction d√©j√† trait√©e, impossible d\'afficher modal karma');
            }
        } catch (error) {
            console.error('‚ùå Erreur affichage modal karma:', error);
        }
    }

    async showActionCooldownModal(interaction, actionName) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const actionConfig = economyConfig.actions?.[actionName] || { cooldown: 60000 };
        
        const modal = new ModalBuilder()
            .setCustomId(`action_cooldown_modal_${actionName}`)
            .setTitle(`‚è∞ Cooldown - ${actionName.charAt(0).toUpperCase() + actionName.slice(1)}`);

        const cooldownInput = new TextInputBuilder()
            .setCustomId('cooldown')
            .setLabel('Cooldown en secondes (10-300s)')
            .setStyle(TextInputStyle.Short)
            .setValue(`${Math.round(actionConfig.cooldown / 1000)}`)
            .setMinLength(2)
            .setMaxLength(3)
            .setRequired(true);

        const cooldownRow = new ActionRowBuilder().addComponents(cooldownInput);
        
        modal.addComponents(cooldownRow);
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.showModal(modal);
            } else {
                console.log('‚ùå Interaction d√©j√† trait√©e, impossible d\'afficher modal cooldown');
            }
        } catch (error) {
            console.error('‚ùå Erreur affichage modal cooldown:', error);
        }
    }

    async toggleAction(interaction, actionName) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.actions) economyConfig.actions = {};
        if (!economyConfig.actions[actionName]) {
            economyConfig.actions[actionName] = { enabled: true };
        }
        
        economyConfig.actions[actionName].enabled = !economyConfig.actions[actionName].enabled;
        await this.dataManager.saveData('economy.json', economyConfig);
        
        await interaction.reply({
            content: `‚úÖ Action **${actionName}** ${economyConfig.actions[actionName].enabled ? 'activ√©e' : 'd√©sactiv√©e'}`,
            flags: 64
        });
    }

    // Handlers pour les modals de configuration des actions
    async handleActionRewardsModal(interaction, actionName) {
        console.log(`üí∞ Modal r√©compenses pour: ${actionName}`);
        
        const minReward = parseInt(interaction.fields.getTextInputValue('min_reward'));
        const maxReward = parseInt(interaction.fields.getTextInputValue('max_reward'));
        
        if (isNaN(minReward) || minReward < 1 || minReward > 1000) {
            await interaction.reply({ content: '‚ùå R√©compense minimum invalide (1-1000‚Ç¨)', flags: 64 });
            return;
        }
        
        if (isNaN(maxReward) || maxReward < 1 || maxReward > 1000) {
            await interaction.reply({ content: '‚ùå R√©compense maximum invalide (1-1000‚Ç¨)', flags: 64 });
            return;
        }
        
        if (minReward > maxReward) {
            await interaction.reply({ content: '‚ùå Le minimum ne peut pas √™tre sup√©rieur au maximum', flags: 64 });
            return;
        }
        
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.actions) economyConfig.actions = {};
        if (!economyConfig.actions[actionName]) economyConfig.actions[actionName] = {};
        
        economyConfig.actions[actionName].minReward = minReward;
        economyConfig.actions[actionName].maxReward = maxReward;
        
        await this.dataManager.saveData('economy.json', economyConfig);
        
        await interaction.reply({
            content: `‚úÖ R√©compenses **${actionName}** configur√©es :\nüí∞ Min: **${minReward}‚Ç¨** | Max: **${maxReward}‚Ç¨**`,
            flags: 64
        });
    }

    async handleActionKarmaModal(interaction, actionName) {
        try {
            console.log(`‚öñÔ∏è Modal karma pour: ${actionName}`);
            
            const goodKarma = parseInt(interaction.fields.getTextInputValue('good_karma'));
            const badKarma = parseInt(interaction.fields.getTextInputValue('bad_karma'));
            
            if (isNaN(goodKarma) || goodKarma < 0 || goodKarma > 10) {
                await interaction.reply({ content: '‚ùå Karma bon invalide (0-10)', flags: 64 });
                return;
            }
            
            if (isNaN(badKarma) || badKarma < 0 || badKarma > 10) {
                await interaction.reply({ content: '‚ùå Karma mauvais invalide (0-10)', flags: 64 });
                return;
            }
            
            const economyConfig = await this.dataManager.loadData('economy.json', {});
            if (!economyConfig.actions) economyConfig.actions = {};
            if (!economyConfig.actions[actionName]) economyConfig.actions[actionName] = {};
            
            economyConfig.actions[actionName].goodKarma = goodKarma;
            economyConfig.actions[actionName].badKarma = -badKarma; // N√©gatif pour bad karma
            
            await this.dataManager.saveData('economy.json', economyConfig);
            
            console.log(`‚úÖ Config karma sauv√©e pour ${actionName}:`, economyConfig.actions[actionName]);
            
            await interaction.reply({
                content: `‚úÖ Karma **${actionName}** configur√© :\nüòá Bon: **+${goodKarma}** | üòà Mauvais: **${badKarma}**`,
                flags: 64
            });
        } catch (error) {
            console.error('‚ùå Erreur handleActionKarmaModal:', error);
            if (!interaction.replied) {
                await interaction.reply({
                    content: '‚ùå Erreur lors de la configuration du karma.',
                    flags: 64
                });
            }
        }
    }

    async handleActionCooldownModal(interaction, actionName) {
        console.log(`‚è∞ Modal cooldown pour: ${actionName}`);
        
        const cooldownSeconds = parseInt(interaction.fields.getTextInputValue('cooldown'));
        
        if (isNaN(cooldownSeconds) || cooldownSeconds < 10 || cooldownSeconds > 300) {
            await interaction.reply({ content: '‚ùå Cooldown invalide (10-300 secondes)', flags: 64 });
            return;
        }
        
        const cooldownMs = cooldownSeconds * 1000;
        
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.actions) economyConfig.actions = {};
        if (!economyConfig.actions[actionName]) economyConfig.actions[actionName] = {};
        
        economyConfig.actions[actionName].cooldown = cooldownMs;
        
        await this.dataManager.saveData('economy.json', economyConfig);
        
        await interaction.reply({
            content: `‚úÖ Cooldown **${actionName}** configur√© :\n‚è∞ Temps d'attente: **${cooldownSeconds}s**`,
            flags: 64
        });
    }

    // Nouvelle m√©thode pour reset karma uniquement
    async showKarmaResetConfirmation(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff4444')
            .setTitle('üóëÔ∏è Reset Karma Total - ATTENTION')
            .setDescription('**‚ö†Ô∏è CETTE ACTION EST IRR√âVERSIBLE !**\n\nVous √™tes sur le point de remettre √† z√©ro TOUT le karma (positif et n√©gatif) de TOUS les membres du serveur.')
            .addFields([
                {
                    name: '‚ùå Sera supprim√© :',
                    value: '‚Ä¢ Tout le karma positif üòá\n‚Ä¢ Tout le karma n√©gatif üòà\n‚Ä¢ Karma net (calcul√©)',
                    inline: false
                },
                {
                    name: '‚úÖ Sera conserv√© :',
                    value: '‚Ä¢ Soldes des membres üí∞\n‚Ä¢ Daily streaks üî•\n‚Ä¢ Autres donn√©es √©conomiques',
                    inline: false
                }
            ])
            .setFooter({ text: 'Cette action ne peut pas √™tre annul√©e !' });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('karma_reset_confirm')
            .setPlaceholder('Confirmer l\'action...')
            .addOptions([
                {
                    label: 'üóëÔ∏è CONFIRMER LE RESET KARMA',
                    value: 'confirm_reset',
                    description: 'EFFACER D√âFINITIVEMENT tout le karma du serveur',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: '‚ùå Annuler',
                    value: 'cancel_reset',
                    description: 'Annuler et retourner au menu karma',
                    emoji: '‚ùå'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleKarmaReset(interaction) {
        const option = interaction.values[0];
        const guildId = interaction.guild.id;
        
        if (option === 'confirm_reset') {
            try {
                const economyData = await this.dataManager.loadData('economy.json', {});
                
                console.log('üîÑ Reset karma complet - suppression de toutes les donn√©es karma...');
                
                // Remettre √† z√©ro SEULEMENT le karma de tous les utilisateurs
                let resetCount = 0;
                for (const userKey in economyData) {
                    if (userKey.includes('_') && economyData[userKey].goodKarma !== undefined) {
                        economyData[userKey].goodKarma = 0;
                        economyData[userKey].badKarma = 0;
                        // Garder les autres propri√©t√©s (karmaGood, karmaBad pour compatibilit√©)
                        if (economyData[userKey].karmaGood !== undefined) economyData[userKey].karmaGood = 0;
                        if (economyData[userKey].karmaBad !== undefined) economyData[userKey].karmaBad = 0;
                        // CONSERVER l'argent, daily streaks et autres donn√©es
                        resetCount++;
                    }
                }
                
                // Supprimer aussi les donn√©es manuelles ajout√©es (format diff√©rent)
                const keysToRemove = [];
                for (const key in economyData) {
                    if (!key.includes('_') && typeof economyData[key] === 'object' && 
                        (economyData[key].goodKarma !== undefined || economyData[key].badKarma !== undefined)) {
                        keysToRemove.push(key);
                    }
                }
                
                keysToRemove.forEach(key => {
                    console.log(`üóëÔ∏è Suppression donn√©es karma manuelles: ${key}`);
                    delete economyData[key];
                });
                
                // Supprimer √©galement les donn√©es du fichier economy (format alternatif)
                const economyAlt = await this.dataManager.loadData('economy', {});
                if (economyAlt[guildId]) {
                    let altRemoved = 0;
                    for (const userId in economyAlt[guildId]) {
                        if (economyAlt[guildId][userId].goodKarma !== undefined || 
                            economyAlt[guildId][userId].badKarma !== undefined) {
                            economyAlt[guildId][userId].goodKarma = 0;
                            economyAlt[guildId][userId].badKarma = 0;
                            altRemoved++;
                        }
                    }
                    await this.dataManager.saveData('economy', economyAlt);
                    console.log(`üóëÔ∏è Reset karma fichier economy alternatif: ${altRemoved} membres`);
                }
                
                console.log(`‚úÖ Reset effectu√©: ${resetCount} membres + ${keysToRemove.length} donn√©es manuelles supprim√©es`);
                
                await this.dataManager.saveData('economy.json', economyData);
                
                const embed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('‚úÖ Reset Karma Termin√©')
                    .setDescription(`**${resetCount} membres** ont eu leur karma remis √† z√©ro.`)
                    .addFields([
                        {
                            name: 'üóëÔ∏è Donn√©es effac√©es',
                            value: '‚Ä¢ Karma positif : 0\n‚Ä¢ Karma n√©gatif : 0\n‚Ä¢ Karma net : 0',
                            inline: false
                        },
                        {
                            name: '‚úÖ Donn√©es conserv√©es',
                            value: '‚Ä¢ Argent des membres üí∞\n‚Ä¢ Daily streaks üî•\n‚Ä¢ Autres donn√©es √©conomiques',
                            inline: false
                        }
                    ])
                    .setTimestamp();

                await interaction.update({ embeds: [embed], components: [] });
                
            } catch (error) {
                console.error('Erreur reset karma:', error);
                await interaction.update({
                    content: '‚ùå Erreur lors du reset karma.',
                    embeds: [],
                    components: []
                });
            }
        } else {
            // Annuler - retourner au menu karma
            await this.showKarmaConfig(interaction);
        }
    }

    async handleShopItemActions(interaction) {
        const customId = interaction.customId;
        const selectedValue = interaction.values[0];
        
        if (selectedValue === 'back_management') {
            await this.showShopManagement(interaction);
            return;
        }

        const itemId = customId.replace('shop_item_actions_', '');
        
        if (selectedValue.startsWith('edit_item_')) {
            await this.showEditItemModal(interaction, itemId);
        } else if (selectedValue.startsWith('delete_item_')) {
            await this.confirmDeleteItem(interaction, itemId);
        }
    }

    async showEditItemModal(interaction, itemId) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        const item = guildShop.find(i => i.id.toString() === itemId.toString());
        if (!item) {
            await interaction.reply({ content: '‚ùå Article introuvable.', flags: 64 });
            return;
        }

        const modal = new ModalBuilder()
            .setCustomId(`edit_item_modal_${itemId}`)
            .setTitle('‚úèÔ∏è Modifier Article');

        const nameInput = new TextInputBuilder()
            .setCustomId('item_name')
            .setLabel('Nom de l\'article')
            .setStyle(TextInputStyle.Short)
            .setValue(item.name)
            .setMinLength(1)
            .setMaxLength(50)
            .setRequired(true);

        const priceInput = new TextInputBuilder()
            .setCustomId('item_price')
            .setLabel('Prix (en ‚Ç¨)')
            .setStyle(TextInputStyle.Short)
            .setValue(item.price.toString())
            .setMinLength(1)
            .setMaxLength(10)
            .setRequired(true);

        const descInput = new TextInputBuilder()
            .setCustomId('item_description')
            .setLabel('Description')
            .setStyle(TextInputStyle.Paragraph)
            .setValue(item.description || '')
            .setMinLength(0)
            .setMaxLength(200)
            .setRequired(false);

        const nameRow = new ActionRowBuilder().addComponents(nameInput);
        const priceRow = new ActionRowBuilder().addComponents(priceInput);
        const descRow = new ActionRowBuilder().addComponents(descInput);

        modal.addComponents(nameRow, priceRow, descRow);
        await interaction.showModal(modal);
    }

    async confirmDeleteItem(interaction, itemId) {
        const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
        
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        const guildShop = shopData[guildId] || [];
        
        const item = guildShop.find(i => i.id.toString() === itemId.toString());
        if (!item) {
            await interaction.update({
                content: '‚ùå Article introuvable.',
                embeds: [],
                components: []
            });
            return;
        }

        const typeIcon = item.type === 'temporary_role' ? '‚åõ' : 
                        item.type === 'permanent_role' ? '‚≠ê' : 'üé®';

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Confirmation Suppression')
            .setDescription(`**‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer cet article ?**\n\n${typeIcon} **${item.name}**\nPrix: ${item.price}‚Ç¨`)
            .addFields([
                {
                    name: '‚ö†Ô∏è Attention',
                    value: 'Cette action est **irr√©versible**',
                    inline: false
                }
            ]);

        const confirmButton = new ButtonBuilder()
            .setCustomId(`confirm_delete_${itemId}`)
            .setLabel('üóëÔ∏è Supprimer')
            .setStyle(ButtonStyle.Danger);

        const cancelButton = new ButtonBuilder()
            .setCustomId(`cancel_delete_${itemId}`)
            .setLabel('‚ùå Annuler')
            .setStyle(ButtonStyle.Secondary);

        const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleItemDeletion(interaction) {
        const customId = interaction.customId;
        
        if (customId.startsWith('cancel_delete_')) {
            const itemId = customId.replace('cancel_delete_', '');
            // Retour au menu de gestion de l'article
            await this.handleShopItemManagement(interaction);
            return;
        }

        if (customId.startsWith('confirm_delete_')) {
            const itemId = customId.replace('confirm_delete_', '');
            await this.deleteShopItem(interaction, itemId);
        }
    }

    async deleteShopItem(interaction, itemId) {
        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        
        if (!shopData[guildId]) {
            await interaction.update({
                content: '‚ùå Aucun article trouv√©.',
                embeds: [],
                components: []
            });
            return;
        }

        const item = shopData[guildId].find(i => i.id.toString() === itemId.toString());
        if (!item) {
            await interaction.update({
                content: '‚ùå Article introuvable.',
                embeds: [],
                components: []
            });
            return;
        }

        // Supprimer l'article
        shopData[guildId] = shopData[guildId].filter(i => i.id.toString() !== itemId.toString());
        await this.dataManager.saveData('shop.json', shopData);

        const { EmbedBuilder } = require('discord.js');
        const embed = new EmbedBuilder()
            .setColor('#27ae60')
            .setTitle('‚úÖ Article Supprim√©')
            .setDescription(`L'article **${item.name}** a √©t√© supprim√© avec succ√®s de la boutique.`)
            .addFields([
                {
                    name: 'üìä Articles Restants',
                    value: `${shopData[guildId].length} article(s)`,
                    inline: true
                }
            ]);

        const { ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
        const backButton = new ButtonBuilder()
            .setCustomId('back_to_shop_management')
            .setLabel('‚Ü©Ô∏è Retour Gestion')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(backButton);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleEditItemModal(interaction) {
        const customId = interaction.customId;
        const itemId = customId.replace('edit_item_modal_', '');
        
        const newName = interaction.fields.getTextInputValue('item_name');
        const newPrice = parseInt(interaction.fields.getTextInputValue('item_price'));
        const newDescription = interaction.fields.getTextInputValue('item_description');

        // Validation du prix
        if (isNaN(newPrice) || newPrice < 1 || newPrice > 999999) {
            await interaction.reply({
                content: '‚ùå Le prix doit √™tre un nombre entre 1 et 999,999‚Ç¨.',
                flags: 64
            });
            return;
        }

        const guildId = interaction.guild.id;
        const shopData = await this.dataManager.loadData('shop.json', {});
        
        if (!shopData[guildId]) {
            await interaction.reply({
                content: '‚ùå Aucun article trouv√©.',
                flags: 64
            });
            return;
        }

        const itemIndex = shopData[guildId].findIndex(i => i.id.toString() === itemId.toString());
        if (itemIndex === -1) {
            await interaction.reply({
                content: '‚ùå Article introuvable.',
                flags: 64
            });
            return;
        }

        // Mettre √† jour l'article
        shopData[guildId][itemIndex].name = newName;
        shopData[guildId][itemIndex].price = newPrice;
        shopData[guildId][itemIndex].description = newDescription;
        shopData[guildId][itemIndex].updatedAt = Date.now();

        await this.dataManager.saveData('shop.json', shopData);

        const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
        const item = shopData[guildId][itemIndex];
        const typeIcon = item.type === 'temporary_role' ? '‚åõ' : 
                        item.type === 'permanent_role' ? '‚≠ê' : 'üé®';

        const embed = new EmbedBuilder()
            .setColor('#27ae60')
            .setTitle('‚úÖ Article Modifi√©')
            .setDescription(`${typeIcon} **${item.name}** a √©t√© mis √† jour avec succ√®s !`)
            .addFields([
                {
                    name: 'üí∞ Nouveau Prix',
                    value: `${item.price}‚Ç¨`,
                    inline: true
                },
                {
                    name: 'üìù Description',
                    value: item.description || 'Aucune description',
                    inline: true
                }
            ]);

        const backButton = new ButtonBuilder()
            .setCustomId('back_to_shop_management')
            .setLabel('‚Ü©Ô∏è Retour Gestion')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(backButton);
        await interaction.reply({ embeds: [embed], components: [row] });
    }

    async showKarmaDiscountsConfig(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const karmaDiscounts = economyConfig.karmaDiscounts || {
            enabled: false,
            ranges: []
        };

        const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');

        let discountsList = 'Aucune remise configur√©e';
        if (karmaDiscounts.ranges && karmaDiscounts.ranges.length > 0) {
            discountsList = karmaDiscounts.ranges
                .sort((a, b) => b.minKarma - a.minKarma)
                .map(range => {
                    const karmaIcon = range.minKarma >= 0 ? 'üòá' : 'üòà';
                    return `${karmaIcon} **${range.minKarma}+ karma net** ‚Üí -${range.discount}%`;
                })
                .join('\n');
        }

        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('üí∏ Remises Karma Boutique')
            .setDescription('Syst√®me de remises automatiques bas√© sur le karma net')
            .addFields([
                {
                    name: 'üîÑ Status',
                    value: karmaDiscounts.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©',
                    inline: true
                },
                {
                    name: 'üìä Tranches Configur√©es',
                    value: `${karmaDiscounts.ranges?.length || 0}`,
                    inline: true
                },
                {
                    name: 'üí∞ Remises Actuelles',
                    value: discountsList,
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('karma_discounts_actions')
            .setPlaceholder('Configuration remises karma...')
            .addOptions([
                {
                    label: 'üîÑ Toggle Activation',
                    value: 'toggle_karma_discounts',
                    description: karmaDiscounts.enabled ? 'D√©sactiver les remises' : 'Activer les remises',
                    emoji: 'üîÑ'
                },
                {
                    label: '‚ûï Cr√©er Remise',
                    value: 'create_karma_discount',
                    description: 'Cr√©er une nouvelle remise karma',
                    emoji: '‚ûï'
                },
                {
                    label: '‚úèÔ∏è Modifier Remise',
                    value: 'modify_karma_discount',
                    description: 'Modifier une remise existante',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'üóëÔ∏è Supprimer Remise',
                    value: 'delete_karma_discount',
                    description: 'Supprimer une remise',
                    emoji: 'üóëÔ∏è'
                },
                {
                    label: '‚Ü©Ô∏è Retour Boutique',
                    value: 'economy_shop_config',
                    description: 'Retour configuration boutique'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.update) {
            await interaction.update({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async showAddKarmaDiscountModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');

        const modal = new ModalBuilder()
            .setCustomId('add_karma_discount_modal')
            .setTitle('‚ûï Nouvelle Tranche Remise');

        const karmaInput = new TextInputBuilder()
            .setCustomId('min_karma')
            .setLabel('Karma Net Minimum')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 10 ou -5')
            .setMinLength(1)
            .setMaxLength(4)
            .setRequired(true);

        const discountInput = new TextInputBuilder()
            .setCustomId('discount_percent')
            .setLabel('Pourcentage de Remise (1-50%)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 15')
            .setMinLength(1)
            .setMaxLength(2)
            .setRequired(true);

        const nameInput = new TextInputBuilder()
            .setCustomId('range_name')
            .setLabel('Nom de la Tranche (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: Remise H√©ros')
            .setMinLength(0)
            .setMaxLength(30)
            .setRequired(false);

        const karmaRow = new ActionRowBuilder().addComponents(karmaInput);
        const discountRow = new ActionRowBuilder().addComponents(discountInput);
        const nameRow = new ActionRowBuilder().addComponents(nameInput);

        modal.addComponents(karmaRow, discountRow, nameRow);
        await interaction.showModal(modal);
    }

    async handleAddKarmaDiscountModal(interaction) {
        const minKarma = parseInt(interaction.fields.getTextInputValue('min_karma'));
        const discountPercent = parseInt(interaction.fields.getTextInputValue('discount_percent'));
        const rangeName = interaction.fields.getTextInputValue('range_name') || null;

        // Validation
        if (isNaN(minKarma) || minKarma < -999 || minKarma > 999) {
            await interaction.reply({
                content: '‚ùå Le karma minimum doit √™tre un nombre entre -999 et +999.',
                flags: 64
            });
            return;
        }

        if (isNaN(discountPercent) || discountPercent < 1 || discountPercent > 50) {
            await interaction.reply({
                content: '‚ùå Le pourcentage de remise doit √™tre entre 1% et 50%.',
                flags: 64
            });
            return;
        }

        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.karmaDiscounts) {
            economyConfig.karmaDiscounts = { enabled: false, ranges: [] };
        }

        // V√©rifier si cette tranche existe d√©j√†
        const existingRange = economyConfig.karmaDiscounts.ranges.find(r => r.minKarma === minKarma);
        if (existingRange) {
            await interaction.reply({
                content: `‚ùå Une tranche pour ${minKarma} karma net existe d√©j√† (${existingRange.discount}% de remise).`,
                flags: 64
            });
            return;
        }

        // Ajouter la nouvelle tranche
        const newRange = {
            id: Date.now(),
            minKarma: minKarma,
            discount: discountPercent,
            name: rangeName,
            createdAt: new Date().toISOString()
        };

        economyConfig.karmaDiscounts.ranges.push(newRange);
        await this.dataManager.saveData('economy.json', economyConfig);

        const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
        const karmaIcon = minKarma >= 0 ? 'üòá' : 'üòà';

        const embed = new EmbedBuilder()
            .setColor('#27ae60')
            .setTitle('‚úÖ Tranche Remise Ajout√©e')
            .setDescription(`${karmaIcon} **Nouvelle tranche cr√©√©e avec succ√®s !**`)
            .addFields([
                {
                    name: '‚öñÔ∏è Karma Net Minimum',
                    value: `${minKarma}`,
                    inline: true
                },
                {
                    name: 'üí∏ Remise',
                    value: `${discountPercent}%`,
                    inline: true
                },
                {
                    name: 'üè∑Ô∏è Nom',
                    value: rangeName || 'Sans nom',
                    inline: true
                },
                {
                    name: 'üìä Total Tranches',
                    value: `${economyConfig.karmaDiscounts.ranges.length} configur√©es`,
                    inline: false
                }
            ]);

        const backButton = new ButtonBuilder()
            .setCustomId('back_karma_discounts')
            .setLabel('‚Ü©Ô∏è Retour Remises')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(backButton);
        await interaction.reply({ embeds: [embed], components: [row] });
    }

    async toggleKarmaDiscounts(interaction) {
        const guildId = interaction.guild.id;
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.karmaDiscounts) {
            economyConfig.karmaDiscounts = { enabled: false, ranges: [] };
        }

        economyConfig.karmaDiscounts.enabled = !economyConfig.karmaDiscounts.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        const status = economyConfig.karmaDiscounts.enabled ? 'activ√©es' : 'd√©sactiv√©es';
        const icon = economyConfig.karmaDiscounts.enabled ? '‚úÖ' : '‚ùå';

        await interaction.update({
            content: `${icon} Les remises karma ont √©t√© **${status}** !`,
            embeds: [],
            components: []
        });

        // Retour automatique au menu remises apr√®s 2 secondes
        setTimeout(async () => {
            try {
                await this.showKarmaDiscountsConfig(interaction);
            } catch (error) {
                console.log('Timeout retour menu remises:', error.message);
            }
        }, 2000);
    }

    async handleKarmaDiscountsInteraction(interaction) {
        const selectedValue = interaction.values[0];
        
        switch (selectedValue) {
            case 'toggle_karma_discounts':
                await this.toggleKarmaDiscounts(interaction);
                break;
                
            case 'add_karma_discount_range':
                await this.showAddKarmaDiscountModal(interaction);
                break;
                
            case 'back_shop_config':
                await this.showShopConfig(interaction);
                break;
                
            default:
                await interaction.reply({ 
                    content: '‚ùå Option de remise karma non reconnue.', 
                    flags: 64 
                });
        }
    }

    async handleKarmaDiscountsAction(interaction) {
        const selectedValue = interaction.values[0];
        
        console.log('üéØ Action remise karma s√©lectionn√©e:', selectedValue);
        
        switch (selectedValue) {
            case 'toggle_karma_discounts':
                await this.toggleKarmaDiscounts(interaction);
                break;
                
            case 'create_karma_discount':
                await this.showCreateKarmaDiscountModal(interaction);
                break;
                
            case 'modify_karma_discount':
                await this.showModifyKarmaDiscountSelector(interaction);
                break;
                
            case 'delete_karma_discount':
                await this.showDeleteKarmaDiscountSelector(interaction);
                break;
                
            case 'economy_shop_config':
                await this.showShopConfig(interaction);
                break;
                
            default:
                await interaction.reply({ 
                    content: '‚ùå Option de remise karma non reconnue.', 
                    flags: 64 
                });
        }
    }

    // Nouvelles m√©thodes pour la gestion compl√®te des remises karma

    async showCreateKarmaDiscountModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');

        const modal = new ModalBuilder()
            .setCustomId('create_karma_discount_modal')
            .setTitle('‚ûï Cr√©er Remise Karma');

        const nameInput = new TextInputBuilder()
            .setCustomId('discount_name')
            .setLabel('Nom de la remise')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(30)
            .setPlaceholder('Ex: Membres Exemplaires')
            .setRequired(true);

        const karmaInput = new TextInputBuilder()
            .setCustomId('discount_karma')
            .setLabel('Karma net minimum requis')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(5)
            .setPlaceholder('Ex: 10 (pour karma net ‚â• 10)')
            .setRequired(true);

        const percentInput = new TextInputBuilder()
            .setCustomId('discount_percent')
            .setLabel('Pourcentage de remise (1-99)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(2)
            .setPlaceholder('Ex: 15 (pour 15% de remise)')
            .setRequired(true);

        const nameRow = new ActionRowBuilder().addComponents(nameInput);
        const karmaRow = new ActionRowBuilder().addComponents(karmaInput);
        const percentRow = new ActionRowBuilder().addComponents(percentInput);

        modal.addComponents(nameRow, karmaRow, percentRow);
        await interaction.showModal(modal);
    }

    async showModifyKarmaDiscountSelector(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const discounts = economyConfig.karmaDiscounts?.ranges || [];

        if (discounts.length === 0) {
            await interaction.update({
                content: '‚ùå Aucune remise karma configur√©e √† modifier.',
                components: []
            });
            return;
        }

        const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');

        const embed = new EmbedBuilder()
            .setColor('#f39c12')
            .setTitle('‚úèÔ∏è Modifier Remise Karma')
            .setDescription('S√©lectionnez la remise √† modifier');

        const options = discounts.slice(0, 20).map(discount => ({
            label: `${discount.name || 'Remise sans nom'}`,
            value: `modify_discount_${discount.id}`,
            description: `Karma ‚â• ${discount.minKarma} ‚Üí ${discount.discount}% de remise`,
            emoji: discount.minKarma >= 0 ? 'üòá' : 'üòà'
        }));

        options.push({
            label: '‚Ü©Ô∏è Retour aux remises',
            value: 'back_karma_discounts',
            description: 'Retour au menu des remises karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('modify_karma_discount_select')
            .setPlaceholder('Choisir une remise √† modifier...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showDeleteKarmaDiscountSelector(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const discounts = economyConfig.karmaDiscounts?.ranges || [];

        if (discounts.length === 0) {
            await interaction.update({
                content: '‚ùå Aucune remise karma configur√©e √† supprimer.',
                components: []
            });
            return;
        }

        const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');

        const embed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üóëÔ∏è Supprimer Remise Karma')
            .setDescription('‚ö†Ô∏è S√©lectionnez la remise √† supprimer d√©finitivement');

        const options = discounts.slice(0, 20).map(discount => ({
            label: `${discount.name || 'Remise sans nom'}`,
            value: `delete_discount_${discount.id}`,
            description: `Karma ‚â• ${discount.minKarma} ‚Üí ${discount.discount}% de remise`,
            emoji: 'üóëÔ∏è'
        }));

        options.push({
            label: '‚Ü©Ô∏è Retour aux remises',
            value: 'back_karma_discounts',
            description: 'Retour au menu des remises karma'
        });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('delete_karma_discount_select')
            .setPlaceholder('Choisir une remise √† supprimer...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showModifyKarmaDiscountModal(interaction, discountId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const discount = economyConfig.karmaDiscounts?.ranges?.find(d => d.id == discountId);

        if (!discount) {
            await interaction.reply({
                content: '‚ùå Remise introuvable.',
                flags: 64
            });
            return;
        }

        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');

        const modal = new ModalBuilder()
            .setCustomId(`modify_karma_discount_modal_${discountId}`)
            .setTitle('‚úèÔ∏è Modifier Remise Karma');

        const nameInput = new TextInputBuilder()
            .setCustomId('discount_name')
            .setLabel('Nom de la remise')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(30)
            .setValue(discount.name || '')
            .setPlaceholder('Ex: Membres Exemplaires')
            .setRequired(true);

        const karmaInput = new TextInputBuilder()
            .setCustomId('discount_karma')
            .setLabel('Karma net minimum requis')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(5)
            .setValue(discount.minKarma.toString())
            .setPlaceholder('Ex: 10 (pour karma net ‚â• 10)')
            .setRequired(true);

        const percentInput = new TextInputBuilder()
            .setCustomId('discount_percent')
            .setLabel('Pourcentage de remise (1-99)')
            .setStyle(TextInputStyle.Short)
            .setMinLength(1)
            .setMaxLength(2)
            .setValue(discount.discount.toString())
            .setPlaceholder('Ex: 15 (pour 15% de remise)')
            .setRequired(true);

        const nameRow = new ActionRowBuilder().addComponents(nameInput);
        const karmaRow = new ActionRowBuilder().addComponents(karmaInput);
        const percentRow = new ActionRowBuilder().addComponents(percentInput);

        modal.addComponents(nameRow, karmaRow, percentRow);
        await interaction.showModal(modal);
    }

    async handleDeleteKarmaDiscount(interaction, discountId) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const discountIndex = economyConfig.karmaDiscounts?.ranges?.findIndex(d => d.id == discountId);

        if (discountIndex === -1 || discountIndex === undefined) {
            await interaction.reply({
                content: '‚ùå Remise introuvable.',
                flags: 64
            });
            return;
        }

        const discount = economyConfig.karmaDiscounts.ranges[discountIndex];
        
        // Supprimer la remise
        economyConfig.karmaDiscounts.ranges.splice(discountIndex, 1);
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Remise supprim√©e !\n\nüóëÔ∏è **${discount.name}** (${discount.minKarma}+ karma ‚Üí ${discount.discount}% remise) a √©t√© supprim√©e d√©finitivement.`,
            flags: 64
        });
    }

    async handleModifyKarmaDiscountModal(interaction) {
        const discountId = interaction.customId.split('_').pop();
        const name = interaction.fields.getTextInputValue('discount_name');
        const karmaStr = interaction.fields.getTextInputValue('discount_karma');
        const percentStr = interaction.fields.getTextInputValue('discount_percent');

        // Validation
        const karmaValue = parseInt(karmaStr);
        const percentage = parseInt(percentStr);

        if (isNaN(karmaValue) || karmaValue < -999 || karmaValue > 999) {
            await interaction.reply({
                content: '‚ùå Valeur karma invalide. Entrez un nombre entre -999 et +999.',
                flags: 64
            });
            return;
        }

        if (isNaN(percentage) || percentage < 1 || percentage > 99) {
            await interaction.reply({
                content: '‚ùå Pourcentage invalide. Entrez un nombre entre 1 et 99.',
                flags: 64
            });
            return;
        }

        // Modifier la remise
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        const discount = economyConfig.karmaDiscounts?.ranges?.find(d => d.id == discountId);

        if (!discount) {
            await interaction.reply({
                content: '‚ùå Remise introuvable.',
                flags: 64
            });
            return;
        }

        discount.name = name;
        discount.minKarma = karmaValue;
        discount.discount = percentage;
        discount.modifiedAt = new Date().toISOString();

        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Remise modifi√©e !\n\nüí∏ **${name}**\n‚öñÔ∏è Karma net ‚â• ${karmaValue}\nüìä Remise: **${percentage}%**`,
            flags: 64
        });
    }

    async handleCreateKarmaDiscountModal(interaction) {
        const name = interaction.fields.getTextInputValue('discount_name');
        const karmaStr = interaction.fields.getTextInputValue('discount_karma');
        const percentStr = interaction.fields.getTextInputValue('discount_percent');

        // Validation
        const karmaValue = parseInt(karmaStr);
        const percentage = parseInt(percentStr);

        if (isNaN(karmaValue) || karmaValue < -999 || karmaValue > 999) {
            await interaction.reply({
                content: '‚ùå Valeur karma invalide. Entrez un nombre entre -999 et +999.',
                flags: 64
            });
            return;
        }

        if (isNaN(percentage) || percentage < 1 || percentage > 99) {
            await interaction.reply({
                content: '‚ùå Pourcentage invalide. Entrez un nombre entre 1 et 99.',
                flags: 64
            });
            return;
        }

        // Sauvegarder
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        if (!economyConfig.karmaDiscounts) {
            economyConfig.karmaDiscounts = { enabled: false, ranges: [] };
        }

        const newRange = {
            id: Date.now(),
            name: name,
            minKarma: karmaValue,
            discount: percentage,
            createdAt: new Date().toISOString()
        };

        economyConfig.karmaDiscounts.ranges.push(newRange);
        await this.dataManager.saveData('economy.json', economyConfig);

        await interaction.reply({
            content: `‚úÖ Remise karma cr√©√©e !\n\nüí∏ **${name}**\n‚öñÔ∏è Karma net ‚â• ${karmaValue}\nüìä Remise: **${percentage}%**`,
            flags: 64
        });
    }

    async handleToggleKarmaDiscounts(interaction) {
        const economyConfig = await this.dataManager.loadData('economy.json', {});
        
        if (!economyConfig.karmaDiscounts) {
            economyConfig.karmaDiscounts = { enabled: false, ranges: [] };
        }

        economyConfig.karmaDiscounts.enabled = !economyConfig.karmaDiscounts.enabled;
        await this.dataManager.saveData('economy.json', economyConfig);

        const status = economyConfig.karmaDiscounts.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©';
        
        await interaction.reply({
            content: `üîÑ **Remises Karma ${status}**\n\n${economyConfig.karmaDiscounts.enabled ? 'üí∏ Les remises karma sont maintenant appliqu√©es lors des achats.' : '‚ö†Ô∏è Les remises karma sont d√©sactiv√©es.'}`,
            flags: 64
        });
    }
}

module.exports = EconomyConfigHandler;
