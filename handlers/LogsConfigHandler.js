const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelSelectMenuBuilder, ChannelType, StringSelectMenuBuilder } = require('discord.js');

class LogsConfigHandler {
  constructor(dataManager, logManager) {
    this.dataManager = dataManager;
    this.logManager = logManager;
  }

  async showMain(interaction) {
    const guildId = interaction.guild.id;
    const cfg = await this.logManager.getGuildConfig(guildId);
    const c = cfg.categories;

    const formatChannel = (id) => id ? `<#${id}>` : 'non-configur√©';

    const embed = new EmbedBuilder()
      .setColor('#00bcd4')
      .setTitle('üßæ Configuration des Logs')
      .setDescription('Configurez les salons et l‚Äôactivation des cat√©gories. Les logs de confessions restent dans le menu `config-confession`.')
      .addFields(
        { name: 'üìù Messages', value: `${c.messages.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.messages.channelId)} ‚Ä¢ √âditions: ${c.messages.logEdits ? '‚úÖ' : '‚ùå'} ‚Ä¢ Suppressions: ${c.messages.logDeletes ? '‚úÖ' : '‚ùå'}` },
        { name: 'üõ°Ô∏è Mod√©ration', value: `${c.moderation.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.moderation.channelId)}` },
        { name: 'üë• Arriv√©es/D√©parts', value: `${c.members.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.members.channelId)}` },
        { name: 'üè∑Ô∏è Pseudos', value: `${c.nicknames.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.nicknames.channelId)}` },
        { name: 'üí∞ √âconomie', value: `${c.economy.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.economy.channelId)}` },
        { name: 'üîä Vocaux', value: `${c.voice?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.voice?.channelId)}` },
        { name: 'üß© R√¥les', value: `${c.roles?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.roles?.channelId)}` },
        { name: 'üì∫ Salons', value: `${c.channels?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.channels?.channelId)}` },
        { name: 'üßµ Threads', value: `${c.threads?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.threads?.channelId)}` },
        { name: 'üòú √âmojis', value: `${c.emojis?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.emojis?.channelId)}` },
        { name: 'üè∑Ô∏è Stickers', value: `${c.stickers?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.stickers?.channelId)}` },
        { name: '‚úâÔ∏è Invitations', value: `${c.invites?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.invites?.channelId)}` },
        { name: 'ü™ù Webhooks', value: `${c.webhooks?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.webhooks?.channelId)}` },
        { name: 'üè∞ Serveur', value: `${c.server?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.server?.channelId)}` },
        { name: 'üíé Boosts', value: `${c.boosts?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.boosts?.channelId)}` },
        { name: 'üìÖ √âv√©nements', value: `${c.events?.enabled ? '‚úÖ' : '‚ùå'} ${formatChannel(c.events?.channelId)}` },
        { name: 'üé® Th√®me', value: `NSFW: ${cfg.theme?.nsfwTone ? 'üîû' : 'üö´'} ‚Ä¢ Avatars: ${cfg.theme?.includeAvatars ? '‚úÖ' : '‚ùå'} ‚Ä¢ Liens: ${cfg.theme?.includeJumpLinks ? '‚úÖ' : '‚ùå'}\nFooter: ${cfg.theme?.footer || '‚Äî'}` }
      );

    // Nouvelle UI: menu de s√©lection de cat√©gorie + options de th√®me
    const categorySelect = new StringSelectMenuBuilder()
      .setCustomId('logs_category_select')
      .setPlaceholder('Choisissez une cat√©gorie √† configurer')
      .addOptions(
        { label: 'Messages', value: 'messages' },
        { label: 'Mod√©ration', value: 'moderation' },
        { label: 'Arriv√©es/D√©parts', value: 'members' },
        { label: 'Pseudos', value: 'nicknames' },
        { label: '√âconomie', value: 'economy' },
        { label: 'Vocaux', value: 'voice' },
        { label: 'R√¥les', value: 'roles' },
        { label: 'Salons', value: 'channels' },
        { label: 'Threads', value: 'threads' },
        { label: '√âmojis', value: 'emojis' },
        { label: 'Stickers', value: 'stickers' },
        { label: 'Invitations', value: 'invites' },
        { label: 'Webhooks', value: 'webhooks' },
        { label: 'Serveur', value: 'server' },
        { label: 'Boosts', value: 'boosts' },
        { label: '√âv√©nements', value: 'events' }
      );

    const rows = [
      new ActionRowBuilder().addComponents(categorySelect),
      new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('logs_theme_toggle_nsfw').setLabel('NSFW On/Off').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId('logs_theme_toggle_avatars').setLabel('Avatars On/Off').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId('logs_theme_toggle_links').setLabel('Liens On/Off').setStyle(ButtonStyle.Secondary)
      ),
      new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('logs_theme_footer_set').setLabel('D√©finir Footer par d√©faut').setStyle(ButtonStyle.Primary)
      )
    ];

    if (interaction.replied || interaction.deferred) {
      return interaction.editReply({ embeds: [embed], components: rows });
    }
    return interaction.reply({ embeds: [embed], components: rows, ephemeral: true });
  }

  async handle(interaction, customId) {
    const guildId = interaction.guild.id;

    if (customId === 'logs_main') {
      return this.showMain(interaction);
    }

    // S√©lection de cat√©gorie -> proposer actions basiques pour cette cat√©gorie
    if (customId === 'logs_category_select') {
      const category = interaction.values?.[0];
      if (!category) return interaction.reply({ content: 'Aucune cat√©gorie s√©lectionn√©e.', ephemeral: true });

      const cfg = await this.logManager.getGuildConfig(guildId);
      const enabled = cfg.categories[category]?.enabled ?? false;

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`logs_toggle_${category}`)
          .setLabel(enabled ? 'D√©sactiver' : 'Activer')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId(`logs_set_channel_${category}`)
          .setLabel('D√©finir le salon')
          .setStyle(ButtonStyle.Primary)
      );

      return interaction.reply({ content: `Options pour ${category}`, components: [row], ephemeral: true });
    }

    // Toggle
    if (customId.startsWith('logs_toggle_')) {
      const category = customId.split('logs_toggle_')[1];
      const cfg = await this.logManager.getGuildConfig(guildId);
      const old = cfg.categories[category]?.enabled ?? true;
      await this.logManager.setCategoryConfig(guildId, category, { enabled: !old });
      return this.showMain(interaction);
    }

    // Open channel picker
    if (customId.startsWith('logs_set_channel_')) {
      const category = customId.split('logs_set_channel_')[1];
      const picker = new ChannelSelectMenuBuilder()
        .setCustomId(`logs_channel_select_${category}`)
        .setPlaceholder('Choisissez un salon pour les logs')
        .setMinValues(1)
        .setMaxValues(1)
        .addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement);

      const row = new ActionRowBuilder().addComponents(picker);
      return interaction.reply({ content: `S√©lectionnez le salon pour ${category}`, components: [row], ephemeral: true });
    }

    // Channel picked
    if (customId.startsWith('logs_channel_select_')) {
      const category = customId.split('logs_channel_select_')[1];
      const channelId = interaction.values?.[0];
      if (!channelId) return interaction.reply({ content: 'Aucun salon s√©lectionn√©.', ephemeral: true });
      await this.logManager.setCategoryConfig(guildId, category, { channelId });
      await interaction.update({ content: `Salon configur√© pour ${category}: <#${channelId}>`, components: [] });
      return;
    }

    // Theme toggles
    if (customId === 'logs_theme_toggle_nsfw') {
      const cfg = await this.logManager.getGuildConfig(guildId);
      const nsfwTone = !cfg.theme?.nsfwTone;
      await this.logManager.setThemeConfig(guildId, { nsfwTone });
      return this.showMain(interaction);
    }

    if (customId === 'logs_theme_toggle_avatars') {
      const cfg = await this.logManager.getGuildConfig(guildId);
      const includeAvatars = !cfg.theme?.includeAvatars;
      await this.logManager.setThemeConfig(guildId, { includeAvatars });
      return this.showMain(interaction);
    }

    if (customId === 'logs_theme_toggle_links') {
      const cfg = await this.logManager.getGuildConfig(guildId);
      const includeJumpLinks = !cfg.theme?.includeJumpLinks;
      await this.logManager.setThemeConfig(guildId, { includeJumpLinks });
      return this.showMain(interaction);
    }

    if (customId === 'logs_theme_footer_set') {
      // D√©finit le footer par d√©faut NSFW Boys & Girls
      await this.logManager.setThemeConfig(guildId, { footer: 'Boys & Girls üî• Logs' });
      return this.showMain(interaction);
    }

    return false;
  }
}

module.exports = LogsConfigHandler;