/**
 * Handler AutoThread - Recr√©√© Compl√®tement
 */

const { EmbedBuilder, ChannelSelectMenuBuilder, ActionRowBuilder, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');

class AutoThreadConfigHandler {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    async handleMainConfig(interaction) {
        const guildId = interaction.guild.id;
        const config = await this.dataManager.loadData('autothread.json', {});
        const guildConfig = config[guildId] || { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };

        // G√©n√©rer la liste des canaux configur√©s
        let channelsList = 'Aucun canal configur√©';
        if (guildConfig.channels && guildConfig.channels.length > 0) {
            const channelMentions = [];
            for (const channel of guildConfig.channels) {
                const channelId = typeof channel === 'string' ? channel : channel.channelId;
                channelMentions.push(`<#${channelId}>`);
            }
            channelsList = channelMentions.join('\n');
        }

        const embed = new EmbedBuilder()
            .setColor('#36393f')
            .setTitle('Choisissez une action...')
            .setDescription('**Configuration Auto-Thread Actuelle**')
            .addFields([
                { 
                    name: '‚ö° Statut du Syst√®me', 
                    value: guildConfig.enabled ? 'üü¢ **Activ√©**' : 'üî¥ **D√©sactiv√©**', 
                    inline: true 
                },
                { 
                    name: 'üè∑Ô∏è Nom des Threads', 
                    value: `\`${guildConfig.threadName === '__RANDOM_NSFW_BG__' ? 'Al√©atoire NSFW (Boys & Girls)' : (guildConfig.threadName || 'Thread automatique')}\``, 
                    inline: true 
                },
                { 
                    name: 'üóÉÔ∏è Archivage Auto', 
                    value: guildConfig.permanentThreads ? '‚ôæÔ∏è Permanent (Jamais)' : `${guildConfig.archiveTime || 1440} minutes`, 
                    inline: true 
                },
                { 
                    name: 'üêå Mode Lent', 
                    value: guildConfig.slowMode > 0 ? `${guildConfig.slowMode} secondes` : 'D√©sactiv√©', 
                    inline: true 
                },
                { 
                    name: 'üìä Threads Cr√©√©s', 
                    value: `${guildConfig.stats?.threadsCreated || 0}`, 
                    inline: true 
                },
                { 
                    name: 'üìÖ Dernier Thread', 
                    value: guildConfig.stats?.lastCreated ? new Date(guildConfig.stats.lastCreated).toLocaleDateString('fr-FR') : 'Jamais', 
                    inline: true 
                },
                { 
                    name: 'üìù Canaux Configur√©s', 
                    value: channelsList, 
                    inline: false 
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('autothread_action')
            .setPlaceholder('Choisissez une action...')
            .addOptions([
                {
                    label: 'üîß Activer/D√©sactiver',
                    value: 'toggle',
                    description: 'Basculer le syst√®me on/off'
                },
                {
                    label: '‚ûï Ajouter Canal',
                    value: 'add_channel',
                    description: 'Ajouter un canal au syst√®me'
                },
                {
                    label: 'üóëÔ∏è Retirer Canal',
                    value: 'remove_channel',
                    description: 'Retirer un canal'
                },
                {
                    label: 'üè∑Ô∏è Nom des Threads',
                    value: 'thread_name',
                    description: 'Configurer le nom des threads'
                },
                {
                    label: 'üóÉÔ∏è Dur√©e Archivage',
                    value: 'archive_time',
                    description: 'R√©gler l\'archivage automatique'
                },
                {
                    label: 'üêå Slow Mode',
                    value: 'slow_mode',
                    description: 'Configurer le d√©lai entre messages'
                },
                {
                    label: 'üìä Voir Statistiques',
                    value: 'stats',
                    description: 'Afficher les performances'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        if (interaction.replied || interaction.deferred) {
            await interaction.editReply({ embeds: [embed], components: [row] });
        } else {
            await interaction.reply({ embeds: [embed], components: [row], flags: 64 });
        }
    }

    async handleAction(interaction) {
        const action = interaction.values[0];
        
        switch (action) {
            case 'toggle':
                await this.toggleSystem(interaction);
                break;
            case 'add_channel':
                await this.showAddChannel(interaction);
                break;
            case 'remove_channel':
                await this.showRemoveChannel(interaction);
                break;
            case 'thread_name':
                await this.showThreadNameSelector(interaction);
                break;
            case 'archive_time':
                await this.showArchiveMenu(interaction);
                break;
            case 'slow_mode':
                await this.showSlowModeMenu(interaction);
                break;
            case 'stats':
                await this.showStats(interaction);
                break;
        }
    }

    async toggleSystem(interaction) {
        const guildId = interaction.guild.id;
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }
        
        config[guildId].enabled = !config[guildId].enabled;
        await this.dataManager.saveData('autothread.json', config);

        const embed = new EmbedBuilder()
            .setColor(config[guildId].enabled ? '#00ff00' : '#ff0000')
            .setTitle(config[guildId].enabled ? '‚úÖ Syst√®me Activ√©' : '‚ùå Syst√®me D√©sactiv√©')
            .setDescription(`Le syst√®me auto-thread est maintenant ${config[guildId].enabled ? 'activ√©' : 'd√©sactiv√©'}`);

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async showAddChannel(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('‚ûï Ajouter Canal')
            .setDescription('S√©lectionnez un canal √† ajouter au syst√®me auto-thread');

        const channelSelect = new ChannelSelectMenuBuilder()
            .setCustomId('autothread_add_channel')
            .setPlaceholder('S√©lectionnez un canal...')
            .setChannelTypes([0]);

        const row = new ActionRowBuilder().addComponents(channelSelect);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async showRemoveChannel(interaction) {
        const guildId = interaction.guild.id;
        const config = await this.dataManager.loadData('autothread.json', {});
        const channels = config[guildId]?.channels || [];

        if (channels.length === 0) {
            const embed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Aucun Canal')
                .setDescription('Aucun canal configur√© √† retirer');

            await interaction.update({ embeds: [embed], components: [] });
            
            setTimeout(() => {
                this.handleMainConfig(interaction).catch(console.error);
            }, 2000);
            return;
        }

        const embed = new EmbedBuilder()
            .setColor('#ff4444')
            .setTitle('üóëÔ∏è Retirer Canal')
            .setDescription('S√©lectionnez un canal √† retirer du syst√®me auto-thread');

        // Cr√©er les options seulement pour les canaux configur√©s
        const options = [];
        for (const channel of channels) {
            const channelId = typeof channel === 'string' ? channel : channel.channelId;
            try {
                const discordChannel = await interaction.guild.channels.fetch(channelId);
                if (discordChannel) {
                    options.push({
                        label: `#${discordChannel.name}`,
                        description: `Retirer ce canal de l'auto-thread`,
                        value: channelId,
                        emoji: 'üóëÔ∏è'
                    });
                }
            } catch (error) {
                // Canal supprim√© ou inaccessible, l'ajouter quand m√™me pour nettoyage
                options.push({
                    label: `Canal supprim√© (${channelId})`,
                    description: `Nettoyer ce canal de la configuration`,
                    value: channelId,
                    emoji: 'üö´'
                });
            }
        }

        const channelSelect = new StringSelectMenuBuilder()
            .setCustomId('autothread_remove_channel')
            .setPlaceholder('S√©lectionnez un canal √† retirer...')
            .addOptions(options);

        const row = new ActionRowBuilder().addComponents(channelSelect);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleAddChannel(interaction) {
        const guildId = interaction.guild.id;
        const channelId = interaction.values[0];
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }

        if (!config[guildId].channels.includes(channelId)) {
            config[guildId].channels.push(channelId);
            await this.dataManager.saveData('autothread.json', config);
        }

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚úÖ Canal Ajout√©')
            .setDescription(`<#${channelId}> ajout√© au syst√®me auto-thread`);

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async handleRemoveChannel(interaction) {
        const guildId = interaction.guild.id;
        const channelId = interaction.values[0];
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (config[guildId]?.channels) {
            config[guildId].channels = config[guildId].channels.filter(id => id !== channelId);
            await this.dataManager.saveData('autothread.json', config);
        }

        const embed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('üóëÔ∏è Canal Retir√©')
            .setDescription(`<#${channelId}> retir√© du syst√®me auto-thread`);

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async showThreadNameSelector(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle('üè∑Ô∏è Nom des Threads')
            .setDescription('Choisissez un format pour le nom des threads automatiques')
            .addFields([
                { name: 'Variables disponibles:', value: '‚Ä¢ `{user}` - Nom de l\'utilisateur\n‚Ä¢ `{channel}` - Nom du canal\n‚Ä¢ `{date}` - Date actuelle\n‚Ä¢ `{time}` - Heure actuelle', inline: false }
            ]);

        const nameSelect = new StringSelectMenuBuilder()
            .setCustomId('autothread_name_select')
            .setPlaceholder('S√©lectionnez un format de nom...')
            .addOptions([
                {
                    label: 'Fil de {user}',
                    description: 'Exemple: Fil de Jormungand',
                    value: 'Fil de {user}',
                    emoji: 'üë§'
                },
                {
                    label: 'Discussion - {user}',
                    description: 'Exemple: Discussion - Jormungand',
                    value: 'Discussion - {user}',
                    emoji: 'üí¨'
                },
                {
                    label: 'Thread #{channel}',
                    description: 'Exemple: Thread #general',
                    value: 'Thread #{channel}',
                    emoji: 'üì±'
                },
                {
                    label: '{user} | {date}',
                    description: 'Exemple: Jormungand | 22/07/2025',
                    value: '{user} | {date}',
                    emoji: 'üìÖ'
                },
                {
                    label: 'üí≠ {user} √† {time}',
                    description: 'Exemple: üí≠ Jormungand √† 15:30',
                    value: 'üí≠ {user} √† {time}',
                    emoji: 'üïê'
                },
                {
                    label: 'Thread automatique',
                    description: 'Nom simple sans variables',
                    value: 'Thread automatique',
                    emoji: 'ü§ñ'
                },
                {
                    label: 'Nom personnalis√©...',
                    description: 'Ouvrir un modal pour saisir un nom custom',
                    value: 'custom_modal',
                    emoji: '‚úèÔ∏è'
                },
                {
                    label: 'Nom al√©atoire (NSFW 18+)',
                    description: 'Th√®me ¬´ Boys & Girls ¬ª 18+ (‚âà10 noms al√©atoires)',
                    value: 'random_nsfw_bg',
                    emoji: 'üîû'
                }
            ]);

        const row = new ActionRowBuilder().addComponents(nameSelect);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleThreadNameSelection(interaction) {
        const selectedValue = interaction.values[0];
        const guildId = interaction.guild.id;
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }

        if (selectedValue === 'custom_modal') {
            // Ouvrir le modal pour nom personnalis√©
            const modal = new ModalBuilder()
                .setCustomId('autothread_name_modal')
                .setTitle('üè∑Ô∏è Nom des Threads Personnalis√©');

            const nameInput = new TextInputBuilder()
                .setCustomId('thread_name')
                .setLabel('Nom des threads automatiques')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Entrez un nom personnalis√©...')
                .setRequired(true)
                .setMaxLength(100);

            const row = new ActionRowBuilder().addComponents(nameInput);
            modal.addComponents(row);

            await interaction.showModal(modal);
        } else {
            if (selectedValue === 'random_nsfw_bg') {
                config[guildId].threadName = '__RANDOM_NSFW_BG__';
                config[guildId].nsfw = true;
                await this.dataManager.saveData('autothread.json', config);

                const embed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('‚úÖ Mode al√©atoire NSFW activ√©')
                    .setDescription('Les threads auront un nom al√©atoire (th√®me 18+). Utilisez cela dans des canaux NSFW uniquement.');

                await interaction.update({ embeds: [embed], components: [] });
                
                setTimeout(() => {
                    this.handleMainConfig(interaction).catch(console.error);
                }, 2000);
                return;
            }
            // Utiliser la valeur s√©lectionn√©e directement
            config[guildId].threadName = selectedValue;
            config[guildId].nsfw = false;
            await this.dataManager.saveData('autothread.json', config);

            const embed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('‚úÖ Nom Configur√©')
                .setDescription(`Nom des threads : **${selectedValue}**`)
                .addFields([
                    { name: 'Aper√ßu avec variables:', value: this.previewThreadName(selectedValue), inline: false }
                ]);

            await interaction.update({ embeds: [embed], components: [] });
            
            setTimeout(() => {
                this.handleMainConfig(interaction).catch(console.error);
            }, 2000);
        }
    }

    previewThreadName(template) {
        return template
            .replace('{user}', 'Jormungand')
            .replace('{channel}', 'general')
            .replace('{date}', new Date().toLocaleDateString('fr-FR'))
            .replace('{time}', new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }));
    }

    async handleThreadNameModal(interaction) {
        const guildId = interaction.guild.id;
        const threadName = interaction.fields.getTextInputValue('thread_name');
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }
        
        config[guildId].threadName = threadName;
        config[guildId].nsfw = false;
        await this.dataManager.saveData('autothread.json', config);

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚úÖ Nom Configur√©')
            .setDescription(`Nom des threads : **${threadName}**`);

        await interaction.reply({ embeds: [embed], flags: 64 });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async showArchiveMenu(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffa500')
            .setTitle('üóÉÔ∏è Dur√©e d\'Archivage')
            .setDescription('Choisissez la dur√©e avant archivage automatique\n\n‚ö†Ô∏è **Permanent** : Garde les threads actifs ind√©finiment');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('autothread_archive')
            .setPlaceholder('S√©lectionnez une dur√©e...')
            .addOptions([
                { label: 'üö´ Permanent (Jamais archiv√©)', value: 'never', description: 'Les threads restent actifs en permanence', emoji: '‚ôæÔ∏è' },
                { label: '1 heure', value: '60', description: 'Archive apr√®s 1 heure d\'inactivit√©' },
                { label: '24 heures', value: '1440', description: 'Archive apr√®s 1 jour d\'inactivit√©' },
                { label: '3 jours', value: '4320', description: 'Archive apr√®s 3 jours d\'inactivit√©' },
                { label: '7 jours', value: '10080', description: 'Archive apr√®s 1 semaine d\'inactivit√©' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleArchive(interaction) {
        const guildId = interaction.guild.id;
        const selectedValue = interaction.values[0];
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }
        
        let archiveDescription;
        
        if (selectedValue === 'never') {
            // Mode permanent : utiliser 10080 (7 jours) mais avec un flag sp√©cial
            config[guildId].archiveTime = 10080; // Maximum Discord
            config[guildId].permanentThreads = true;
            archiveDescription = '‚ôæÔ∏è **Permanent** (Jamais archiv√©)';
        } else {
            const archiveTime = parseInt(selectedValue);
            config[guildId].archiveTime = archiveTime;
            config[guildId].permanentThreads = false;
            
            const labels = { 60: '1 heure', 1440: '24 heures', 4320: '3 jours', 10080: '7 jours' };
            archiveDescription = `**${labels[archiveTime]}**`;
        }
        
        await this.dataManager.saveData('autothread.json', config);

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚úÖ Archivage Configur√©')
            .setDescription(`Dur√©e d'archivage : ${archiveDescription}`);

        if (selectedValue === 'never') {
            embed.addFields({
                name: '‚ö†Ô∏è Mode Permanent Activ√©',
                value: 'Les threads seront gard√©s actifs ind√©finiment.\nLe bot r√©activera automatiquement les threads archiv√©s.',
                inline: false
            });
        }

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async showSlowModeMenu(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('üêå Slow Mode')
            .setDescription('Choisissez le d√©lai entre les messages');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('autothread_slowmode')
            .setPlaceholder('S√©lectionnez un d√©lai...')
            .addOptions([
                { label: 'D√©sactiv√©', value: '0', description: 'Aucun d√©lai' },
                { label: '5 secondes', value: '5', description: '5 secondes entre messages' },
                { label: '10 secondes', value: '10', description: '10 secondes entre messages' },
                { label: '30 secondes', value: '30', description: '30 secondes entre messages' },
                { label: '1 minute', value: '60', description: '1 minute entre messages' }
            ]);

        const row = new ActionRowBuilder().addComponents(selectMenu);
        await interaction.update({ embeds: [embed], components: [row] });
    }

    async handleSlowMode(interaction) {
        const guildId = interaction.guild.id;
        const slowMode = parseInt(interaction.values[0]);
        const config = await this.dataManager.loadData('autothread.json', {});
        
        if (!config[guildId]) {
            config[guildId] = { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };
        }
        
        config[guildId].slowMode = slowMode;
        await this.dataManager.saveData('autothread.json', config);

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚úÖ Slow Mode Configur√©')
            .setDescription(`D√©lai entre messages : **${slowMode === 0 ? 'D√©sactiv√©' : slowMode + ' secondes'}**`);

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    async showStats(interaction) {
        const guildId = interaction.guild.id;
        const config = await this.dataManager.loadData('autothread.json', {});
        const guildConfig = config[guildId] || { enabled: false, channels: [], threadName: 'Thread automatique', archiveTime: 1440, slowMode: 0 };

        const embed = new EmbedBuilder()
            .setColor('#00aaff')
            .setTitle('üìä Statistiques Auto-Thread')
            .addFields([
                { name: '‚ö° Statut', value: guildConfig.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©', inline: true },
                { name: 'üìù Canaux', value: `${guildConfig.channels.length}`, inline: true },
                { name: 'üè∑Ô∏è Nom Thread', value: (guildConfig.threadName === '__RANDOM_NSFW_BG__' ? 'Al√©atoire NSFW (Boys & Girls)' : guildConfig.threadName), inline: true },
                { name: 'üóÉÔ∏è Archivage', value: `${guildConfig.archiveTime} min`, inline: true },
                { name: 'üêå Slow Mode', value: guildConfig.slowMode === 0 ? 'D√©sactiv√©' : `${guildConfig.slowMode}s`, inline: true }
            ]);

        await interaction.update({ embeds: [embed], components: [] });
        
        setTimeout(() => {
            this.handleMainConfig(interaction).catch(console.error);
        }, 2000);
    }

    /**
     * M√©thode principale pour g√©rer toutes les interactions autothread
     * Appel√©e par MainRouterHandler
     */
    async handleAutothreadSelect(interaction) {
        const customId = interaction.customId;
        
        try {
            // Router selon le customId
            switch (customId) {
                case 'autothread_action':
                case 'autothread_config':
                    await this.handleAction(interaction);
                    break;
                    
                case 'autothread_add_channel':
                    await this.handleAddChannel(interaction);
                    break;
                    
                case 'autothread_remove_channel':
                    await this.handleRemoveChannel(interaction);
                    break;
                    
                case 'autothread_name_select':
                    await this.handleThreadNameSelection(interaction);
                    break;
                    
                case 'autothread_archive':
                    await this.handleArchive(interaction);
                    break;
                    
                case 'autothread_slowmode':
                    await this.handleSlowMode(interaction);
                    break;
                    
                default:
                    console.log(`‚ö†Ô∏è Interaction autothread non g√©r√©e: ${customId}`);
                    if (!interaction.replied && !interaction.deferred) {
                        await interaction.reply({
                            content: '‚ùå Interaction autothread non reconnue.',
                            flags: 64
                        });
                    }
                    break;
            }
        } catch (error) {
            console.error('‚ùå Erreur handleAutothreadSelect:', error);
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: '‚ùå Erreur lors du traitement de l\'interaction autothread.',
                    flags: 64
                });
            }
        }
    }
}

module.exports = AutoThreadConfigHandler;