const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');

class EconomyHandler {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    async handleEconomyMainConfig(interaction) {
        const value = interaction.values[0];
        
        switch(value) {
            case 'actions':
                await this.showActionsConfig(interaction);
                break;
            case 'shop':
                await this.showShopConfig(interaction);
                break;
            case 'karma':
                await this.showKarmaConfig(interaction);
                break;
            case 'daily':
                await this.showDailyConfig(interaction);
                break;
            case 'messages':
                await this.showMessagesConfig(interaction);
                break;
            case 'stats':
                await this.showStatsConfig(interaction);
                break;
            default:
                await interaction.reply({
                    content: `Configuration √©conomique ${value} disponible prochainement.`,
                    flags: 64
                });
        }
    }

    async showActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('üíº Configuration Actions √âconomiques')
            .setDescription('Configurez les actions √©conomiques disponibles sur ce serveur')
            .addFields([
                {
                    name: 'üòá Actions Positives',
                    value: '**Travailler** - Gain d\'argent l√©gal\n**P√™cher** - Activit√© relaxante\n**Donner** - G√©n√©rosit√© entre membres',
                    inline: true
                },
                {
                    name: 'üòà Actions N√©gatives',
                    value: '**Voler** - Vol d\'argent risqu√©\n**Crime** - Activit√© criminelle\n**Parier** - Jeu de hasard',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_actions_config')
            .setPlaceholder('üíº Configurer une action')
            .addOptions([
                {
                    label: 'Travailler',
                    description: 'Configuration travail (r√©compenses, cooldown)',
                    value: 'travailler',
                    emoji: 'üë∑'
                },
                {
                    label: 'P√™cher',
                    description: 'Configuration p√™che (r√©compenses, cooldown)',
                    value: 'pecher',
                    emoji: 'üé£'
                },
                {
                    label: 'Donner',
                    description: 'Configuration dons entre membres',
                    value: 'donner',
                    emoji: 'üíù'
                },
                {
                    label: 'Voler',
                    description: 'Configuration vol (r√©compenses, risques)',
                    value: 'voler',
                    emoji: 'üî´'
                },
                {
                    label: 'Crime',
                    description: 'Configuration crimes (r√©compenses, risques)',
                    value: 'crime',
                    emoji: 'üî™'
                },
                {
                    label: 'Parier',
                    description: 'Configuration paris (limites, taux)',
                    value: 'parier',
                    emoji: 'üé∞'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showShopConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üõí Configuration Boutique')
            .setDescription('G√©rez les objets et r√¥les disponibles dans la boutique');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_config')
            .setPlaceholder('üõí Configurer la boutique')
            .addOptions([
                {
                    label: 'Ajouter R√¥le',
                    description: 'Ajouter un r√¥le √† vendre',
                    value: 'add_role',
                    emoji: '‚ûï'
                },
                {
                    label: 'Retirer R√¥le',
                    description: 'Retirer un r√¥le de la boutique',
                    value: 'remove_role',
                    emoji: '‚ûñ'
                },
                {
                    label: 'Prix R√¥les',
                    description: 'Modifier les prix des r√¥les',
                    value: 'edit_prices',
                    emoji: 'üí∞'
                },
                {
                    label: 'Voir Boutique',
                    description: 'Afficher tous les objets disponibles',
                    value: 'list_items',
                    emoji: 'üìã'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showKarmaConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6600')
            .setTitle('‚öñÔ∏è Configuration Syst√®me Karma')
            .setDescription('Configurez les sanctions et r√©compenses automatiques bas√©es sur le karma');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_config')
            .setPlaceholder('‚öñÔ∏è Configurer le karma')
            .addOptions([
                {
                    label: 'Niveaux Karma',
                    description: 'Configurer les seuils et noms des niveaux',
                    value: 'levels',
                    emoji: 'üìä'
                },
                {
                    label: 'R√©compenses Automatiques',
                    description: 'R√©compenses hebdomadaires par niveau',
                    value: 'rewards',
                    emoji: 'üéÅ'
                },
                {
                    label: 'Reset Hebdomadaire',
                    description: 'Configuration du reset automatique',
                    value: 'reset',
                    emoji: 'üîÑ'
                },
                {
                    label: 'Gains par Action',
                    description: 'Karma gagn√©/perdu par action',
                    value: 'action_karma',
                    emoji: '‚ö°'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showDailyConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffff00')
            .setTitle('üéÅ Configuration Daily')
            .setDescription('Configurez les r√©compenses quotidiennes');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_config')
            .setPlaceholder('üéÅ Configurer le daily')
            .addOptions([
                {
                    label: 'Montants Daily',
                    description: 'Configurer les montants quotidiens',
                    value: 'amounts',
                    emoji: 'üí∞'
                },
                {
                    label: 'Bonus Streak',
                    description: 'Bonus pour les s√©ries quotidiennes',
                    value: 'streak',
                    emoji: 'üî•'
                },
                {
                    label: 'Reset Hebdomadaire',
                    description: 'Configuration du reset des streaks',
                    value: 'reset',
                    emoji: 'üîÑ'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showMessagesConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ffff')
            .setTitle('üí¨ Configuration R√©compenses Messages')
            .setDescription('Configurez les gains automatiques pour chaque message');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_config')
            .setPlaceholder('üí¨ Configurer les r√©compenses messages')
            .addOptions([
                {
                    label: 'Activer/D√©sactiver',
                    description: 'Activer ou d√©sactiver le syst√®me',
                    value: 'toggle',
                    emoji: 'üîÑ'
                },
                {
                    label: 'Montant par Message',
                    description: 'Argent gagn√© par message √©crit',
                    value: 'amount',
                    emoji: 'üí∞'
                },
                {
                    label: 'Cooldown Messages',
                    description: 'Temps d\'attente entre r√©compenses',
                    value: 'cooldown',
                    emoji: '‚è∞'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // M√©thodes de configuration d√©taill√©es - STATISTIQUES
    async showStatsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff00ff')
            .setTitle('üìä Statistiques √âconomiques')
            .setDescription('Consultez et g√©rez les donn√©es du syst√®me √©conomique')
            .addFields([
                { name: 'üë• Membres Actifs', value: '0 utilisateurs enregistr√©s', inline: true },
                { name: 'üí∞ √âconomie Totale', value: '0‚Ç¨ en circulation', inline: true },
                { name: 'üìà Transactions', value: '0 actions effectu√©es', inline: true },
                { name: 'üéØ Action la Plus Populaire', value: 'Aucune donn√©e', inline: true },
                { name: 'üíé Membre le Plus Riche', value: 'Aucun membre', inline: true },
                { name: 'üòá Saint du Serveur', value: 'Aucun karma positif', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_stats_action')
            .setPlaceholder('üìä Consulter les statistiques')
            .addOptions([
                { label: '√âconomie G√©n√©rale', value: 'general_economy', emoji: 'üí∞' },
                { label: 'Statistiques Actions', value: 'actions_stats', emoji: 'üìã' },
                { label: 'Classements D√©taill√©s', value: 'detailed_rankings', emoji: 'üèÜ' },
                { label: 'Statistiques Karma', value: 'karma_stats', emoji: '‚öñÔ∏è' },
                { label: 'Revenus Boutique', value: 'shop_revenue', emoji: 'üõí' },
                { label: 'Graphiques Mensuels', value: 'monthly_charts', emoji: 'üìà' },
                { label: 'Exporter Donn√©es', value: 'export_data', emoji: 'üìÅ' },
                { label: 'Reset Statistiques', value: 'reset_stats', emoji: 'üîÑ' },
                { label: 'Retour Menu Principal', value: 'back_main', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Handlers pour les actions sp√©cifiques
    async handleEconomyActionsConfig(interaction) {
        const action = interaction.values[0];
        
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle(`‚öôÔ∏è Configuration Action: ${action}`)
            .setDescription(`Configurez les param√®tres pour l'action **${action}**`);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`economy_action_rewards_config`)
            .setPlaceholder('‚öôÔ∏è Configurer les param√®tres')
            .addOptions([
                {
                    label: 'R√©compenses',
                    description: 'Modifier les montants min/max',
                    value: 'rewards',
                    emoji: 'üí∞'
                },
                {
                    label: 'Karma',
                    description: 'Configuration gains/pertes karma',
                    value: 'karma',
                    emoji: '‚öñÔ∏è'
                },
                {
                    label: 'Cooldown',
                    description: 'Temps d\'attente entre utilisations',
                    value: 'cooldown',
                    emoji: '‚è∞'
                },
                {
                    label: 'Activer/D√©sactiver',
                    description: 'Activer ou d√©sactiver cette action',
                    value: 'toggle',
                    emoji: 'üîÑ'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async handleEconomyShopConfig(interaction) {
        const option = interaction.values[0];
        
        switch(option) {
            case 'add_role':
                await this.showAddRoleConfig(interaction);
                break;
            case 'remove_role':
                await this.showRemoveRoleConfig(interaction);
                break;
            case 'edit_prices':
                await this.showEditPricesConfig(interaction);
                break;
            case 'list_items':
                await this.showShopItems(interaction);
                break;
            default:
                await interaction.update({
                    content: `üõí Configuration boutique **${option}** disponible prochainement.`,
                    embeds: [],
                    components: []
                });
        }
    }

    async handleEconomyKarmaConfig(interaction) {
        const option = interaction.values[0];
        
        switch(option) {
            case 'levels':
                await this.showKarmaLevelsConfig(interaction);
                break;
            case 'rewards':
                await this.showKarmaRewardsConfig(interaction);
                break;
            case 'reset':
                await this.showKarmaResetConfig(interaction);
                break;
            case 'action_karma':
                await this.showActionKarmaConfig(interaction);
                break;
            default:
                await interaction.update({
                    content: `‚öñÔ∏è Configuration karma **${option}** disponible prochainement.`,
                    embeds: [],
                    components: []
                });
        }
    }

    async handleEconomyDailyConfig(interaction) {
        const option = interaction.values[0];
        
        switch(option) {
            case 'amounts':
                await this.showDailyAmountsConfig(interaction);
                break;
            case 'streak':
                await this.showDailyStreakConfig(interaction);
                break;
            case 'reset':
                await this.showDailyResetConfig(interaction);
                break;
            default:
                await interaction.update({
                    content: `üéÅ Configuration daily **${option}** disponible prochainement.`,
                    embeds: [],
                    components: []
                });
        }
    }

    async handleEconomyMessagesConfig(interaction) {
        const option = interaction.values[0];
        
        switch(option) {
            case 'toggle':
                await this.showMessagesToggleConfig(interaction);
                break;
            case 'amount':
                await this.showMessagesAmountConfig(interaction);
                break;
            case 'cooldown':
                await this.showMessagesCooldownConfig(interaction);
                break;
            default:
                await interaction.update({
                    content: `üí¨ Configuration messages **${option}** disponible prochainement.`,
                    embeds: [],
                    components: []
                });
        }
    }

    // M√©thodes de configuration d√©taill√©es - BOUTIQUE
    async showAddRoleConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üõí Ajouter un R√¥le √† la Boutique')
            .setDescription('Configurez un nouveau r√¥le avec type, prix personnalis√© et s√©lection parmi les r√¥les du serveur')
            .addFields([
                { name: '‚è∞ Type de R√¥le', value: 'üîÑ **Permanent** - Le r√¥le reste √† vie\n‚åõ **Temporaire** - Expire apr√®s X jours', inline: true },
                { name: 'üí∞ Prix Personnalis√©', value: 'D√©finissez n\'importe quel montant\nDe 1‚Ç¨ √† 999,999‚Ç¨', inline: true },
                { name: 'üìã Processus', value: '1. Type (Permanent/Temporaire)\n2. Prix personnalis√©\n3. S√©lection r√¥le serveur\n4. Confirmation', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_role_type_select')
            .setPlaceholder('‚è∞ Choisir le type de r√¥le')
            .addOptions([
                { 
                    label: 'R√¥le Permanent', 
                    value: 'permanent', 
                    emoji: 'üîÑ',
                    description: 'Le r√¥le reste √† vie une fois achet√©'
                },
                { 
                    label: 'R√¥le Temporaire', 
                    value: 'temporary', 
                    emoji: '‚åõ',
                    description: 'Le r√¥le expire apr√®s une dur√©e d√©finie'
                },
                { label: 'Retour Boutique', value: 'back_shop', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showRemoveRoleConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff4444')
            .setTitle('üõí Retirer un R√¥le de la Boutique')
            .setDescription('S√©lectionnez le r√¥le √† retirer d√©finitivement de la boutique')
            .addFields([
                { name: 'R√¥les Actuels', value: 'Aucun r√¥le configur√© pour le moment', inline: false },
                { name: '‚ö†Ô∏è Attention', value: 'La suppression est d√©finitive', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_remove_role_confirm')
            .setPlaceholder('üóëÔ∏è Retirer un r√¥le de la vente')
            .addOptions([
                { label: 'Voir R√¥les Disponibles', value: 'list_current', emoji: 'üìã' },
                { label: 'Confirmation Requise', value: 'need_confirm', emoji: '‚ö†Ô∏è' },
                { label: 'Retour Boutique', value: 'back_shop', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showEditPricesConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üõí Modifier les Prix des R√¥les')
            .setDescription('Ajustez les prix des r√¥les d√©j√† en boutique')
            .addFields([
                { name: 'Prix Actuels', value: 'Aucun r√¥le configur√©', inline: true },
                { name: 'Modification', value: 'S√©lectionnez le nouveau prix', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_edit_price_value')
            .setPlaceholder('üí∞ Nouveau prix √† appliquer')
            .addOptions([
                { label: '100‚Ç¨', value: '100', emoji: 'üíµ' },
                { label: '250‚Ç¨', value: '250', emoji: 'üíµ' },
                { label: '500‚Ç¨', value: '500', emoji: 'üí∂' },
                { label: '750‚Ç¨', value: '750', emoji: 'üí∂' },
                { label: '1000‚Ç¨', value: '1000', emoji: 'üí∑' },
                { label: '1500‚Ç¨', value: '1500', emoji: 'üí∑' },
                { label: '2000‚Ç¨', value: '2000', emoji: 'üí¥' },
                { label: '2500‚Ç¨', value: '2500', emoji: 'üíé' },
                { label: '5000‚Ç¨', value: '5000', emoji: 'üëë' },
                { label: 'Retour Boutique', value: 'back_shop', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showShopItems(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00aaff')
            .setTitle('üõí Inventaire de la Boutique')
            .setDescription('Tous les r√¥les et objets disponibles √† l\'achat')
            .addFields([
                { name: 'üëë R√¥les Premium', value: 'Aucun r√¥le configur√©', inline: true },
                { name: 'üí∞ Prix Totaux', value: '0‚Ç¨ de revenus possibles', inline: true },
                { name: 'üìä Statistiques', value: '0 r√¥les ‚Ä¢ 0 ventes', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_items_action')
            .setPlaceholder('üìã Actions sur la boutique')
            .addOptions([
                { label: 'Actualiser Liste', value: 'refresh', emoji: 'üîÑ' },
                { label: 'Voir D√©tails R√¥le', value: 'details', emoji: 'üîç' },
                { label: 'Statistiques Ventes', value: 'sales_stats', emoji: 'üìà' },
                { label: 'Test Boutique', value: 'test_shop', emoji: 'üß™' },
                { label: 'Retour Boutique', value: 'back_shop', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // M√©thodes de configuration d√©taill√©es - KARMA
    async showKarmaLevelsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('‚öñÔ∏è Configuration Niveaux Karma')
            .setDescription('D√©finissez les seuils et noms pour chaque niveau de karma')
            .addFields([
                { name: 'üòà Niveaux Mal√©fiques', value: 'üëπ Evil (-20+)\nüòà Criminel (-10 √† -19)\nüñ§ Sombre (-5 √† -9)', inline: true },
                { name: 'üòê Niveau Neutre', value: '‚öñÔ∏è Neutre (-4 √† +4)', inline: true },
                { name: 'üòá Niveaux B√©n√©fiques', value: '‚ú® Bon (+5 √† +9)\nüòá Saint (+10 √† +19)\nüëº Ange (+20+)', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_levels_edit')
            .setPlaceholder('‚öñÔ∏è Modifier les seuils karma')
            .addOptions([
                { label: 'Seuil Criminel', description: 'Karma requis pour √™tre criminel', value: 'criminal_threshold', emoji: 'üòà' },
                { label: 'Seuil Neutre', description: 'Zone neutre de karma', value: 'neutral_range', emoji: '‚öñÔ∏è' },
                { label: 'Seuil Saint', description: 'Karma requis pour √™tre saint', value: 'saint_threshold', emoji: 'üòá' },
                { label: 'Noms Personnalis√©s', description: 'Modifier les noms des niveaux', value: 'custom_names', emoji: '‚úèÔ∏è' },
                { label: 'R√©initialiser', description: 'Remettre les valeurs par d√©faut', value: 'reset_levels', emoji: 'üîÑ' },
                { label: 'Retour Karma', value: 'back_karma', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showKarmaRewardsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('‚öñÔ∏è R√©compenses Automatiques Karma')
            .setDescription('Configuration des r√©compenses/sanctions hebdomadaires')
            .addFields([
                { name: 'üëº R√©compenses Positives', value: 'Saint: +500‚Ç¨\nBon: +250‚Ç¨\nNeutre: +100‚Ç¨', inline: true },
                { name: 'üòà Sanctions N√©gatives', value: 'Sombre: -100‚Ç¨\nCriminel: -200‚Ç¨\nEvil: -300‚Ç¨', inline: true },
                { name: 'üìÖ Distribution', value: 'Chaque dimanche √† minuit', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_rewards_edit')
            .setPlaceholder('üéÅ Modifier les r√©compenses karma')
            .addOptions([
                { label: 'R√©compense Saint', value: 'saint_reward', emoji: 'üëº' },
                { label: 'R√©compense Bon', value: 'good_reward', emoji: 'üòá' },
                { label: 'R√©compense Neutre', value: 'neutral_reward', emoji: '‚öñÔ∏è' },
                { label: 'Sanction Sombre', value: 'dark_penalty', emoji: 'üñ§' },
                { label: 'Sanction Criminel', value: 'criminal_penalty', emoji: 'üòà' },
                { label: 'Sanction Evil', value: 'evil_penalty', emoji: 'üëπ' },
                { label: 'Jour Distribution', value: 'distribution_day', emoji: 'üìÖ' },
                { label: 'Retour Karma', value: 'back_karma', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showKarmaResetConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6600')
            .setTitle('‚öñÔ∏è Reset Automatique du Karma')
            .setDescription('Configuration du syst√®me de reset hebdomadaire')
            .addFields([
                { name: 'üìÖ Jour Actuel', value: 'Dimanche √† 00:00', inline: true },
                { name: 'üîÑ Fr√©quence', value: 'Hebdomadaire', inline: true },
                { name: '‚ö†Ô∏è Impact', value: 'Karma remis √† z√©ro + Distribution r√©compenses', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_reset_edit')
            .setPlaceholder('üîÑ Configurer le reset karma')
            .addOptions([
                { label: 'Lundi', value: 'monday', emoji: 'üìÖ' },
                { label: 'Mardi', value: 'tuesday', emoji: 'üìÖ' },
                { label: 'Mercredi', value: 'wednesday', emoji: 'üìÖ' },
                { label: 'Jeudi', value: 'thursday', emoji: 'üìÖ' },
                { label: 'Vendredi', value: 'friday', emoji: 'üìÖ' },
                { label: 'Samedi', value: 'saturday', emoji: 'üìÖ' },
                { label: 'Dimanche', value: 'sunday', emoji: 'üìÖ' },
                { label: 'D√©sactiver Reset', value: 'disable', emoji: '‚ùå' },
                { label: 'Retour Karma', value: 'back_karma', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showActionKarmaConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('‚öñÔ∏è Karma par Action √âconomique')
            .setDescription('Configuration du karma gagn√©/perdu pour chaque action')
            .addFields([
                { name: 'üòá Actions Positives', value: 'Travailler: +2üòá -1üòà\nP√™cher: +1üòá -0üòà\nDonner: +3üòá -2üòà', inline: true },
                { name: 'üòà Actions N√©gatives', value: 'Voler: +2üòà -1üòá\nCrime: +3üòà -2üòá\nParier: +1üòà -1üòá', inline: true },
                { name: '‚öñÔ∏è √âquilibrage', value: 'Chaque action affecte les deux karmas', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_action_karma_values')
            .setPlaceholder('‚öñÔ∏è Configurer karma par action')
            .addOptions([
                { label: 'Karma Travailler', value: 'work_karma', emoji: 'üë∑' },
                { label: 'Karma P√™cher', value: 'fish_karma', emoji: 'üé£' },
                { label: 'Karma Donner', value: 'give_karma', emoji: 'üíù' },
                { label: 'Karma Voler', value: 'steal_karma', emoji: 'üî´' },
                { label: 'Karma Crime', value: 'crime_karma', emoji: 'üî™' },
                { label: 'Karma Parier', value: 'bet_karma', emoji: 'üé∞' },
                { label: 'Reset Valeurs', value: 'reset_karma_values', emoji: 'üîÑ' },
                { label: 'Retour Karma', value: 'back_karma', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // M√©thodes de configuration d√©taill√©es - DAILY
    async showDailyAmountsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üéÅ Configuration Montants Daily')
            .setDescription('D√©finissez les montants des r√©compenses quotidiennes')
            .addFields([
                { name: 'üí∞ Montant Base', value: '100‚Ç¨ par jour', inline: true },
                { name: 'üìà Bonus Karma', value: '+50‚Ç¨ si bon karma', inline: true },
                { name: 'üìâ Malus Karma', value: '-25‚Ç¨ si mauvais karma', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_amounts_edit')
            .setPlaceholder('üí∞ Modifier les montants daily')
            .addOptions([
                { label: '50‚Ç¨', value: '50', emoji: 'üíµ' },
                { label: '75‚Ç¨', value: '75', emoji: 'üíµ' },
                { label: '100‚Ç¨', value: '100', emoji: 'üí∂' },
                { label: '125‚Ç¨', value: '125', emoji: 'üí∂' },
                { label: '150‚Ç¨', value: '150', emoji: 'üí∑' },
                { label: '175‚Ç¨', value: '175', emoji: 'üí∑' },
                { label: '200‚Ç¨', value: '200', emoji: 'üí¥' },
                { label: 'Personnalis√©', value: 'custom', emoji: '‚úèÔ∏è' },
                { label: 'Retour Daily', value: 'back_daily', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showDailyStreakConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff4500')
            .setTitle('üî• Configuration Bonus Streak')
            .setDescription('Configurez les bonus pour les s√©ries quotidiennes cons√©cutives')
            .addFields([
                { name: 'üî• Streak 7 jours', value: '+50‚Ç¨ de bonus (150‚Ç¨ total)', inline: true },
                { name: '‚≠ê Streak 15 jours', value: '+100‚Ç¨ de bonus (200‚Ç¨ total)', inline: true },
                { name: 'üëë Streak 30 jours', value: '+200‚Ç¨ de bonus (300‚Ç¨ total)', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_streak_edit')
            .setPlaceholder('üî• Configurer les bonus streak')
            .addOptions([
                { label: 'Streak 3 jours', value: 'streak_3', emoji: 'ü•â' },
                { label: 'Streak 7 jours', value: 'streak_7', emoji: 'üî•' },
                { label: 'Streak 15 jours', value: 'streak_15', emoji: '‚≠ê' },
                { label: 'Streak 30 jours', value: 'streak_30', emoji: 'üëë' },
                { label: 'Bonus Personnalis√©s', value: 'custom_streaks', emoji: '‚úèÔ∏è' },
                { label: 'D√©sactiver Streaks', value: 'disable_streaks', emoji: '‚ùå' },
                { label: 'Reset Tous Streaks', value: 'reset_all_streaks', emoji: 'üîÑ' },
                { label: 'Retour Daily', value: 'back_daily', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showDailyResetConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6600')
            .setTitle('üîÑ Reset Daily & Streaks')
            .setDescription('Configuration du syst√®me de reset des r√©compenses quotidiennes')
            .addFields([
                { name: '‚è∞ Heure Reset', value: 'Minuit (00:00) chaque jour', inline: true },
                { name: 'üî• Streak Perdu', value: 'Apr√®s 48h sans daily', inline: true },
                { name: 'üóìÔ∏è Fuseau Horaire', value: 'Europe/Paris (UTC+1/+2)', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_daily_reset_edit')
            .setPlaceholder('üîÑ Configurer reset daily')
            .addOptions([
                { label: '22:00', value: '22', emoji: 'üåÉ' },
                { label: '23:00', value: '23', emoji: 'üåÉ' },
                { label: '00:00 (Minuit)', value: '0', emoji: 'üåô' },
                { label: '01:00', value: '1', emoji: 'üåô' },
                { label: '02:00', value: '2', emoji: 'üåô' },
                { label: '06:00', value: '6', emoji: 'üåÖ' },
                { label: 'D√©lai Streak', value: 'streak_delay', emoji: '‚è≥' },
                { label: 'Fuseau Horaire', value: 'timezone', emoji: 'üåç' },
                { label: 'Retour Daily', value: 'back_daily', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // M√©thodes de configuration d√©taill√©es - MESSAGES
    async showMessagesToggleConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üí¨ Activer/D√©sactiver R√©compenses Messages')
            .setDescription('Contr√¥lez le syst√®me automatique de r√©compenses par message')
            .addFields([
                { name: 'üìä √âtat Actuel', value: '‚úÖ Activ√© - 5‚Ç¨ par message', inline: true },
                { name: '‚è∞ Cooldown', value: '60 secondes entre r√©compenses', inline: true },
                { name: 'üîç D√©tection', value: 'Messages non-bot uniquement', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_toggle_edit')
            .setPlaceholder('üí¨ G√©rer les r√©compenses messages')
            .addOptions([
                { label: 'Activer Syst√®me', value: 'enable', emoji: '‚úÖ' },
                { label: 'D√©sactiver Syst√®me', value: 'disable', emoji: '‚ùå' },
                { label: 'Mode Test', value: 'test_mode', emoji: 'üß™' },
                { label: 'Canaux Exclus', value: 'excluded_channels', emoji: 'üö´' },
                { label: 'R√¥les Exclus', value: 'excluded_roles', emoji: '‚ö†Ô∏è' },
                { label: 'Statistiques', value: 'message_stats', emoji: 'üìä' },
                { label: 'Reset Compteurs', value: 'reset_counters', emoji: 'üîÑ' },
                { label: 'Retour Messages', value: 'back_messages', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showMessagesAmountConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üí∞ Configuration Montant par Message')
            .setDescription('D√©finissez l\'argent gagn√© automatiquement par message')
            .addFields([
                { name: 'üí∞ Montant Actuel', value: '5‚Ç¨ par message', inline: true },
                { name: 'üìä Statistiques', value: 'Moyenne: 50 messages/jour', inline: true },
                { name: 'üí∏ Impact Quotidien', value: '~250‚Ç¨ par membre actif', inline: true }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_amount_edit')
            .setPlaceholder('üí∞ Choisir le montant par message')
            .addOptions([
                { label: '1‚Ç¨', value: '1', emoji: 'üíµ' },
                { label: '2‚Ç¨', value: '2', emoji: 'üíµ' },
                { label: '3‚Ç¨', value: '3', emoji: 'üí∂' },
                { label: '5‚Ç¨', value: '5', emoji: 'üí∂' },
                { label: '7‚Ç¨', value: '7', emoji: 'üí∑' },
                { label: '10‚Ç¨', value: '10', emoji: 'üí∑' },
                { label: '15‚Ç¨', value: '15', emoji: 'üí¥' },
                { label: '20‚Ç¨', value: '20', emoji: 'üíé' },
                { label: 'Personnalis√©', value: 'custom', emoji: '‚úèÔ∏è' },
                { label: 'Retour Messages', value: 'back_messages', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showMessagesCooldownConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6600')
            .setTitle('‚è∞ Configuration Cooldown Messages')
            .setDescription('D√©finissez le d√©lai entre les r√©compenses automatiques')
            .addFields([
                { name: '‚è∞ Cooldown Actuel', value: '60 secondes', inline: true },
                { name: 'üõ°Ô∏è Protection Spam', value: 'Emp√™che les abus', inline: true },
                { name: '‚öñÔ∏è √âquilibre', value: 'Plus court = Plus d\'argent', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_messages_cooldown_edit')
            .setPlaceholder('‚è∞ Choisir le d√©lai entre r√©compenses')
            .addOptions([
                { label: '15 secondes', value: '15', emoji: '‚ö°' },
                { label: '30 secondes', value: '30', emoji: 'üî•' },
                { label: '45 secondes', value: '45', emoji: '‚è∞' },
                { label: '60 secondes', value: '60', emoji: 'üïê' },
                { label: '90 secondes', value: '90', emoji: 'üïë' },
                { label: '2 minutes', value: '120', emoji: 'üïí' },
                { label: '5 minutes', value: '300', emoji: 'üïî' },
                { label: '10 minutes', value: '600', emoji: 'üïô' },
                { label: 'Pas de cooldown', value: '0', emoji: 'üí®' },
                { label: 'Retour Messages', value: 'back_messages', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Handler pour les sous-configurations d'actions
    async handleActionSubConfig(interaction) {
        const configType = interaction.values[0];
        
        switch(configType) {
            case 'rewards':
                await this.showActionRewardsConfig(interaction);
                break;
            case 'karma':
                await this.showActionKarmaConfig(interaction);
                break;
            case 'cooldown':
                await this.showActionCooldownConfig(interaction);
                break;
            case 'toggle':
                await this.showActionToggleConfig(interaction);
                break;
            default:
                await interaction.update({
                    content: `‚öôÔ∏è Configuration **${configType}** disponible prochainement.`,
                    embeds: [],
                    components: []
                });
        }
    }

    async showActionRewardsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üí∞ Configuration R√©compenses Action')
            .setDescription('Configurez les montants min/max pour cette action')
            .addFields(
                { name: 'Montant Minimum', value: '50‚Ç¨', inline: true },
                { name: 'Montant Maximum', value: '200‚Ç¨', inline: true },
                { name: 'Bonus Karma', value: '+10%', inline: true }
            );

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_rewards_edit_config')
            .setPlaceholder('‚öôÔ∏è Modifier les r√©compenses')
            .addOptions([
                {
                    label: 'Montant Minimum',
                    description: 'Modifier le montant minimum (actuellement 50‚Ç¨)',
                    value: 'min_amount',
                    emoji: 'üìâ'
                },
                {
                    label: 'Montant Maximum', 
                    description: 'Modifier le montant maximum (actuellement 200‚Ç¨)',
                    value: 'max_amount',
                    emoji: 'üìà'
                },
                {
                    label: 'Bonus Karma',
                    description: 'Modifier le bonus karma (+10%)',
                    value: 'karma_bonus',
                    emoji: '‚≠ê'
                },
                {
                    label: 'Retour Actions',
                    description: 'Retourner au menu des actions',
                    value: 'back_actions',
                    emoji: 'üîô'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showActionKarmaConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('‚öñÔ∏è Configuration Karma Action')
            .setDescription('Configurez les gains/pertes de karma')
            .addFields(
                { name: 'Karma Bon', value: '+2 üòá', inline: true },
                { name: 'Karma Mauvais', value: '-1 üòà', inline: true },
                { name: 'Multiplicateur', value: 'x1.5', inline: true }
            );

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_karma_edit_config')
            .setPlaceholder('‚öôÔ∏è Modifier les gains karma')
            .addOptions([
                {
                    label: 'Karma Bon (üòá)',
                    description: 'Modifier le gain de bon karma (+2)',
                    value: 'good_karma',
                    emoji: 'üòá'
                },
                {
                    label: 'Karma Mauvais (üòà)',
                    description: 'Modifier la perte de mauvais karma (-1)',
                    value: 'bad_karma',
                    emoji: 'üòà'
                },
                {
                    label: 'Multiplicateur',
                    description: 'Modifier le multiplicateur (x1.5)',
                    value: 'multiplier',
                    emoji: '‚ú®'
                },
                {
                    label: 'Retour Actions',
                    description: 'Retourner au menu des actions',
                    value: 'back_actions',
                    emoji: 'üîô'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showActionCooldownConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6347')
            .setTitle('‚è∞ Configuration Cooldown Action')
            .setDescription('Configurez le temps d\'attente entre utilisations')
            .addFields(
                { name: 'Cooldown Actuel', value: '1 heure', inline: true },
                { name: 'Cooldown Minimum', value: '30 minutes', inline: true },
                { name: 'Cooldown Maximum', value: '24 heures', inline: true }
            );

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_cooldown_edit_config')
            .setPlaceholder('‚öôÔ∏è Modifier le temps d\'attente')
            .addOptions([
                {
                    label: '30 Minutes',
                    description: 'D√©finir cooldown √† 30 minutes',
                    value: '30min',
                    emoji: 'üïê'
                },
                {
                    label: '1 Heure',
                    description: 'D√©finir cooldown √† 1 heure (d√©faut)',
                    value: '1hour',
                    emoji: 'üïí'
                },
                {
                    label: '2 Heures',
                    description: 'D√©finir cooldown √† 2 heures',
                    value: '2hours',
                    emoji: 'üïî'
                },
                {
                    label: 'Personnalis√©',
                    description: 'D√©finir un cooldown personnalis√©',
                    value: 'custom',
                    emoji: '‚öôÔ∏è'
                },
                {
                    label: 'Retour Actions',
                    description: 'Retourner au menu des actions',
                    value: 'back_actions',
                    emoji: 'üîô'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async showActionToggleConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#32cd32')
            .setTitle('üîÑ Activer/D√©sactiver Action')
            .setDescription('Activez ou d√©sactivez cette action √©conomique')
            .addFields(
                { name: 'Statut Actuel', value: '‚úÖ Activ√©', inline: true },
                { name: 'Utilisations Aujourd\'hui', value: '47', inline: true },
                { name: 'Derni√®re Utilisation', value: 'Il y a 12 min', inline: true }
            );

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_toggle_edit_config')
            .setPlaceholder('‚öôÔ∏è Modifier le statut')
            .addOptions([
                {
                    label: 'D√©sactiver Action',
                    description: 'D√©sactiver temporairement cette action',
                    value: 'disable',
                    emoji: '‚ùå'
                },
                {
                    label: 'Activer Action',
                    description: 'R√©activer cette action',
                    value: 'enable',
                    emoji: '‚úÖ'
                },
                {
                    label: 'Statistiques',
                    description: 'Voir les statistiques d√©taill√©es',
                    value: 'stats',
                    emoji: 'üìä'
                },
                {
                    label: 'Retour Actions',
                    description: 'Retourner au menu des actions',
                    value: 'back_actions',
                    emoji: 'üîô'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Handlers pour l'√©dition des configurations sp√©cifiques
    async handleRewardsEditConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_actions') {
            return await this.showActionsConfig(interaction);
        }
        
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle(`üí∞ Configuration: ${option}`)
            .setDescription('S√©lectionnez une nouvelle valeur pour cette configuration');
        
        let selectMenu;
        
        switch(option) {
            case 'min_amount':
            case 'max_amount':
                embed.addFields(
                    { name: 'Plage Disponible', value: '0‚Ç¨ - 200‚Ç¨', inline: true },
                    { name: 'Valeur Actuelle', value: option === 'min_amount' ? '50‚Ç¨' : '150‚Ç¨', inline: true }
                );
                
                const moneyOptions = [];
                for (let i = 0; i <= 200; i += 25) {
                    moneyOptions.push({
                        label: `${i}‚Ç¨`,
                        value: `money_${i}`,
                        emoji: 'üí∞'
                    });
                }
                moneyOptions.push({
                    label: 'Retour Configuration',
                    value: 'back_rewards',
                    emoji: 'üîô'
                });
                
                selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('economy_money_value_config')
                    .setPlaceholder('üí∞ Choisir un montant (0‚Ç¨ - 200‚Ç¨)')
                    .addOptions(moneyOptions.slice(0, 25)); // Discord limite √† 25 options
                break;
                
            case 'karma_bonus':
                embed.addFields(
                    { name: 'Plage Disponible', value: '0% - 100%', inline: true },
                    { name: 'Valeur Actuelle', value: '10%', inline: true }
                );
                
                selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('economy_bonus_value_config')
                    .setPlaceholder('‚≠ê Choisir un bonus')
                    .addOptions([
                        { label: '0%', value: 'bonus_0', emoji: 'üí∞' },
                        { label: '5%', value: 'bonus_5', emoji: 'üí∞' },
                        { label: '10%', value: 'bonus_10', emoji: 'üí∞' },
                        { label: '15%', value: 'bonus_15', emoji: 'üí∞' },
                        { label: '20%', value: 'bonus_20', emoji: 'üí∞' },
                        { label: '25%', value: 'bonus_25', emoji: 'üí∞' },
                        { label: '30%', value: 'bonus_30', emoji: 'üí∞' },
                        { label: '50%', value: 'bonus_50', emoji: 'üí∞' },
                        { label: '75%', value: 'bonus_75', emoji: 'üí∞' },
                        { label: '100%', value: 'bonus_100', emoji: 'üí∞' },
                        { label: 'Retour Configuration', value: 'back_rewards', emoji: 'üîô' }
                    ]);
                break;
        }
        
        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async handleKarmaEditConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_actions') {
            return await this.showActionsConfig(interaction);
        }
        
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle(`‚öñÔ∏è Configuration: ${option}`)
            .setDescription('S√©lectionnez une nouvelle valeur pour cette configuration karma');
        
        let selectMenu;
        
        switch(option) {
            case 'good_karma':
                embed.addFields(
                    { name: 'Plage Disponible', value: '-5 √† +5 üòá', inline: true },
                    { name: 'Valeur Actuelle', value: '+2', inline: true }
                );
                
                selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('economy_good_karma_config')
                    .setPlaceholder('üòá Choisir karma positif (-5 √† +5)')
                    .addOptions([
                        { label: '-5 üòá', value: 'good_-5', emoji: 'üòá' },
                        { label: '-4 üòá', value: 'good_-4', emoji: 'üòá' },
                        { label: '-3 üòá', value: 'good_-3', emoji: 'üòá' },
                        { label: '-2 üòá', value: 'good_-2', emoji: 'üòá' },
                        { label: '-1 üòá', value: 'good_-1', emoji: 'üòá' },
                        { label: '0 üòá', value: 'good_0', emoji: 'üòá' },
                        { label: '+1 üòá', value: 'good_1', emoji: 'üòá' },
                        { label: '+2 üòá', value: 'good_2', emoji: 'üòá' },
                        { label: '+3 üòá', value: 'good_3', emoji: 'üòá' },
                        { label: '+4 üòá', value: 'good_4', emoji: 'üòá' },
                        { label: '+5 üòá', value: 'good_5', emoji: 'üòá' },
                        { label: 'Retour Configuration', value: 'back_karma', emoji: 'üîô' }
                    ]);
                break;
                
            case 'bad_karma':
                embed.addFields(
                    { name: 'Plage Disponible', value: '-5 √† +5 üòà', inline: true },
                    { name: 'Valeur Actuelle', value: '+1', inline: true }
                );
                
                selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('economy_bad_karma_config')
                    .setPlaceholder('üòà Choisir karma n√©gatif (-5 √† +5)')
                    .addOptions([
                        { label: '-5 üòà', value: 'bad_-5', emoji: 'üòà' },
                        { label: '-4 üòà', value: 'bad_-4', emoji: 'üòà' },
                        { label: '-3 üòà', value: 'bad_-3', emoji: 'üòà' },
                        { label: '-2 üòà', value: 'bad_-2', emoji: 'üòà' },
                        { label: '-1 üòà', value: 'bad_-1', emoji: 'üòà' },
                        { label: '0 üòà', value: 'bad_0', emoji: 'üòà' },
                        { label: '+1 üòà', value: 'bad_1', emoji: 'üòà' },
                        { label: '+2 üòà', value: 'bad_2', emoji: 'üòà' },
                        { label: '+3 üòà', value: 'bad_3', emoji: 'üòà' },
                        { label: '+4 üòà', value: 'bad_4', emoji: 'üòà' },
                        { label: '+5 üòà', value: 'bad_5', emoji: 'üòà' },
                        { label: 'Retour Configuration', value: 'back_karma', emoji: 'üîô' }
                    ]);
                break;
                
            case 'multiplier':
                embed.addFields(
                    { name: 'Plage Disponible', value: 'x0.5 √† x5.0', inline: true },
                    { name: 'Valeur Actuelle', value: 'x1.5', inline: true }
                );
                
                selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('economy_multiplier_config')
                    .setPlaceholder('‚ú® Choisir multiplicateur')
                    .addOptions([
                        { label: 'x0.5', value: 'mult_0.5', emoji: '‚ú®' },
                        { label: 'x0.8', value: 'mult_0.8', emoji: '‚ú®' },
                        { label: 'x1.0', value: 'mult_1.0', emoji: '‚ú®' },
                        { label: 'x1.2', value: 'mult_1.2', emoji: '‚ú®' },
                        { label: 'x1.5', value: 'mult_1.5', emoji: '‚ú®' },
                        { label: 'x2.0', value: 'mult_2.0', emoji: '‚ú®' },
                        { label: 'x2.5', value: 'mult_2.5', emoji: '‚ú®' },
                        { label: 'x3.0', value: 'mult_3.0', emoji: '‚ú®' },
                        { label: 'x4.0', value: 'mult_4.0', emoji: '‚ú®' },
                        { label: 'x5.0', value: 'mult_5.0', emoji: '‚ú®' },
                        { label: 'Retour Configuration', value: 'back_karma', emoji: 'üîô' }
                    ]);
                break;
        }
        
        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    async handleCooldownEditConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_actions') {
            return await this.showActionsConfig(interaction);
        }
        
        let modal;
        
        switch(option) {
            case 'set_cooldown':
                modal = new ModalBuilder()
                    .setCustomId('economy_cooldown_modal')
                    .setTitle('‚è∞ Temps d\'Attente')
                    .addComponents(
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('cooldown_minutes_input')
                                .setLabel('Temps d\'attente (en minutes)')
                                .setStyle(TextInputStyle.Short)
                                .setValue('60')
                                .setPlaceholder('Ex: 30, 60, 120, 1440...')
                                .setMinLength(1)
                                .setMaxLength(5)
                                .setRequired(true)
                        ),
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('action_type_input')
                                .setLabel('Action concern√©e')
                                .setStyle(TextInputStyle.Short)
                                .setValue('travailler')
                                .setRequired(true)
                        ),
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('cooldown_description')
                                .setLabel('Description du cooldown (optionnel)')
                                .setStyle(TextInputStyle.Paragraph)
                                .setValue('Temps d\'attente standard pour √©viter le spam')
                                .setPlaceholder('Description personnalis√©e...')
                                .setMaxLength(200)
                                .setRequired(false)
                        )
                    );
                break;
        }
        
        if (modal) {
            await interaction.showModal(modal);
        } else {
            await interaction.update({
                content: `‚è∞ **Modification cooldown: ${option}**\n\nUtilisez l'option "D√©finir Cooldown" pour configurer les temps d'attente.`,
                embeds: [],
                components: []
            });
        }
    }

    async handleToggleEditConfig(interaction) {
        const option = interaction.values[0];
        
        if (option === 'back_actions') {
            return await this.showActionsConfig(interaction);
        }
        
        const embed = new EmbedBuilder()
            .setColor('#32cd32')
            .setTitle(`üîÑ Action: ${option}`)
            .setDescription('Gestion de l\'√©tat de l\'action √©conomique');
        
        switch(option) {
            case 'disable':
                embed.setColor('#ff4444')
                    .addFields(
                        { name: '‚ö†Ô∏è D√©sactivation', value: 'L\'action sera temporairement indisponible', inline: false },
                        { name: 'Impact', value: 'Les utilisateurs ne pourront plus utiliser cette commande', inline: true },
                        { name: 'R√©versible', value: 'Peut √™tre r√©activ√©e √† tout moment', inline: true }
                    );
                break;
            case 'enable':
                embed.setColor('#44ff44')
                    .addFields(
                        { name: '‚úÖ Activation', value: 'L\'action sera disponible pour tous', inline: false },
                        { name: 'Impact', value: 'Les utilisateurs pourront utiliser cette commande', inline: true },
                        { name: 'Cooldowns', value: 'Les temps d\'attente s\'appliquent', inline: true }
                    );
                break;
            case 'stats':
                embed.setColor('#4444ff')
                    .addFields(
                        { name: 'üìä Statistiques', value: 'Donn√©es d\'utilisation de cette action', inline: false },
                        { name: 'Aujourd\'hui', value: '47 utilisations', inline: true },
                        { name: 'Cette semaine', value: '312 utilisations', inline: true },
                        { name: 'Utilisateur actif', value: '<@123456789>', inline: true }
                    );
                break;
        }
        
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_toggle_action_config')
            .setPlaceholder('‚öôÔ∏è Confirmer l\'action')
            .addOptions([
                { label: 'Confirmer', value: 'confirm_' + option, emoji: '‚úÖ' },
                { label: 'Annuler', value: 'cancel', emoji: '‚ùå' },
                { label: 'Retour Configuration', value: 'back_toggle', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }
    
    // Handlers pour les valeurs sp√©cifiques
    async handleRewardsValueConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_rewards') {
            return await this.showActionRewardsConfig(interaction);
        }
        
        await interaction.update({
            content: `üí∞ **Valeur modifi√©e: ${value}**\n\n‚úÖ Configuration sauvegard√©e avec succ√®s !`,
            embeds: [],
            components: []
        });
    }

    async handleKarmaValueConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_karma') {
            return await this.showActionKarmaConfig(interaction);
        }
        
        await interaction.update({
            content: `‚öñÔ∏è **Karma modifi√©: ${value}**\n\n‚úÖ Configuration sauvegard√©e avec succ√®s !`,
            embeds: [],
            components: []
        });
    }

    async handleToggleActionConfig(interaction) {
        const action = interaction.values[0];
        
        if (action === 'back_toggle') {
            return await this.showActionToggleConfig(interaction);
        }
        
        if (action === 'cancel') {
            return await this.showActionToggleConfig(interaction);
        }
        
        await interaction.update({
            content: `üîÑ **Action effectu√©e: ${action}**\n\n‚úÖ Configuration appliqu√©e avec succ√®s !`,
            embeds: [],
            components: []
        });
    }

    // Handlers pour les s√©lecteurs de valeurs sp√©cifiques
    async handleMoneyValueConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_rewards') {
            return await this.showActionRewardsConfig(interaction);
        }
        
        const amount = value.replace('money_', '');
        
        await interaction.update({
            content: `‚úÖ **Montant configur√© !**\n\nüí∞ **Nouveau montant**: ${amount}‚Ç¨\n\n*Configuration sauvegard√©e avec succ√®s.*`,
            embeds: [],
            components: []
        });
    }

    async handleBonusValueConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_rewards') {
            return await this.showActionRewardsConfig(interaction);
        }
        
        const bonus = value.replace('bonus_', '');
        
        await interaction.update({
            content: `‚úÖ **Bonus configur√© !**\n\n‚≠ê **Nouveau bonus**: ${bonus}%\n\n*Configuration sauvegard√©e avec succ√®s.*`,
            embeds: [],
            components: []
        });
    }

    async handleGoodKarmaConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_karma') {
            return await this.showActionKarmaConfig(interaction);
        }
        
        const karma = value.replace('good_', '');
        const sign = karma.startsWith('-') ? '' : '+';
        
        await interaction.update({
            content: `‚úÖ **Karma positif configur√© !**\n\nüòá **Nouveau karma**: ${sign}${karma} points\n\n*Configuration sauvegard√©e avec succ√®s.*`,
            embeds: [],
            components: []
        });
    }

    async handleBadKarmaConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_karma') {
            return await this.showActionKarmaConfig(interaction);
        }
        
        const karma = value.replace('bad_', '');
        const sign = karma.startsWith('-') ? '' : '+';
        
        await interaction.update({
            content: `‚úÖ **Karma n√©gatif configur√© !**\n\nüòà **Nouveau karma**: ${sign}${karma} points\n\n*Configuration sauvegard√©e avec succ√®s.*`,
            embeds: [],
            components: []
        });
    }

    async handleMultiplierConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'back_karma') {
            return await this.showActionKarmaConfig(interaction);
        }
        
        const multiplier = value.replace('mult_', '');
        
        await interaction.update({
            content: `‚úÖ **Multiplicateur configur√© !**\n\n‚ú® **Nouveau multiplicateur**: x${multiplier}\n\n*Configuration sauvegard√©e avec succ√®s.*`,
            embeds: [],
            components: []
        });
    }

    // ==================== NOUVEAUX HANDLERS POUR TOUS LES SOUS-MENUS ====================
    
    // ==================== NOUVEAUX HANDLERS BOUTIQUE AVANC√âE ====================
    
    // Handler pour le type de r√¥le (Permanent/Temporaire)
    async handleShopRoleTypeSelect(interaction) {
        const roleType = interaction.values[0];
        if (roleType === 'back_shop') return await this.showShopConfig(interaction);
        
        if (roleType === 'permanent') {
            await this.showShopPermanentRolePrice(interaction);
        } else if (roleType === 'temporary') {
            await this.showShopTemporaryRoleConfig(interaction);
        }
    }

    // Configuration prix pour r√¥le permanent
    async showShopPermanentRolePrice(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üîÑ R√¥le Permanent - Prix Personnalis√©')
            .setDescription('D√©finissez le prix pour ce r√¥le permanent')
            .addFields([
                { name: 'üí∞ Prix Personnalis√©', value: 'Vous pouvez entrer n\'importe quel montant', inline: true },
                { name: 'üîÑ Type', value: 'R√¥le Permanent (√† vie)', inline: true },
                { name: 'üìù Prochaine √âtape', value: 'Apr√®s le prix, vous s√©lectionnerez le r√¥le du serveur', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_permanent_price_select')
            .setPlaceholder('üí∞ Saisir le prix personnalis√©')
            .addOptions([
                { 
                    label: 'Saisir Prix Personnalis√©', 
                    value: 'custom_price_modal', 
                    emoji: '‚úèÔ∏è',
                    description: 'Entrer n\'importe quel montant via modal'
                },
                { label: 'Retour Type', value: 'back_type', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Configuration pour r√¥le temporaire (avec dur√©e)
    async showShopTemporaryRoleConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffa500')
            .setTitle('‚åõ R√¥le Temporaire - Configuration')
            .setDescription('Configurez la dur√©e d\'expiration pour ce r√¥le temporaire')
            .addFields([
                { name: '‚åõ Dur√©e d\'Expiration', value: 'Le r√¥le sera automatiquement retir√©', inline: true },
                { name: 'üí∞ Prix', value: 'G√©n√©ralement moins cher que permanent', inline: true },
                { name: 'üìù Processus', value: '1. Dur√©e d\'expiration\n2. Prix personnalis√©\n3. S√©lection r√¥le serveur', inline: false }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_shop_temporary_duration_select')
            .setPlaceholder('‚åõ D√©finir la dur√©e personnalis√©e')
            .addOptions([
                { 
                    label: 'Dur√©e Personnalis√©e', 
                    value: 'custom_duration_modal', 
                    emoji: '‚úèÔ∏è', 
                    description: 'Entrer nombre de jours via modal' 
                },
                { label: 'Retour Type', value: 'back_type', emoji: 'üîô' }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // HANDLERS BOUTIQUE (mis √† jour)
    async handleShopAddRolePrice(interaction) {
        const price = interaction.values[0];
        if (price === 'back_shop') return await this.showShopConfig(interaction);
        
        await interaction.update({
            content: `üõí **R√¥le ajout√© √† la boutique**\n\nPrix configur√©: **${price}‚Ç¨**\n\nUtilisez maintenant un s√©lecteur de r√¥le pour choisir le r√¥le √† vendre.`,
            embeds: [],
            components: []
        });
    }

    async handleShopRemoveRoleConfirm(interaction) {
        const action = interaction.values[0];
        if (action === 'back_shop') return await this.showShopConfig(interaction);
        
        await interaction.update({
            content: `üõí **${action === 'list_current' ? 'Liste des r√¥les' : 'Confirmation requise'}**\n\nFonctionnalit√© disponible dans une mise √† jour future.`,
            embeds: [],
            components: []
        });
    }

    async handleShopEditPriceValue(interaction) {
        const price = interaction.values[0];
        if (price === 'back_shop') return await this.showShopConfig(interaction);
        
        await interaction.update({
            content: `üõí **Prix modifi√©**\n\nNouveau prix: **${price}‚Ç¨**\n\nS√©lectionnez maintenant le r√¥le dont vous voulez changer le prix.`,
            embeds: [],
            components: []
        });
    }

    async handleShopItemsAction(interaction) {
        const action = interaction.values[0];
        if (action === 'back_shop') return await this.showShopConfig(interaction);
        
        const actions = {
            'refresh': 'Liste rafra√Æchie',
            'details': 'D√©tails du r√¥le',
            'sales_stats': 'Statistiques de ventes',
            'test_shop': 'Test de la boutique'
        };
        
        await interaction.update({
            content: `üõí **${actions[action]}**\n\nAction: **${action}** - Fonctionnalit√© disponible prochainement.`,
            embeds: [],
            components: []
        });
    }

    // HANDLERS KARMA
    async handleKarmaLevelsEdit(interaction) {
        const setting = interaction.values[0];
        if (setting === 'back_karma') return await this.showKarmaConfig(interaction);
        
        const settings = {
            'criminal_threshold': 'Seuil Criminel modifi√©',
            'neutral_range': 'Zone Neutre configur√©e',
            'saint_threshold': 'Seuil Saint ajust√©',
            'custom_names': 'Noms personnalis√©s',
            'reset_levels': 'Valeurs par d√©faut restaur√©es'
        };
        
        await interaction.update({
            content: `‚öñÔ∏è **${settings[setting]}**\n\nConfiguration karma: **${setting}** - Param√®tres sauvegard√©s.`,
            embeds: [],
            components: []
        });
    }

    async handleKarmaRewardsEdit(interaction) {
        const reward = interaction.values[0];
        if (reward === 'back_karma') return await this.showKarmaConfig(interaction);
        
        const rewards = {
            'saint_reward': 'R√©compense Saint: +500‚Ç¨',
            'good_reward': 'R√©compense Bon: +250‚Ç¨',
            'neutral_reward': 'R√©compense Neutre: +100‚Ç¨',
            'dark_penalty': 'Sanction Sombre: -100‚Ç¨',
            'criminal_penalty': 'Sanction Criminel: -200‚Ç¨',
            'evil_penalty': 'Sanction Evil: -300‚Ç¨',
            'distribution_day': 'Jour de distribution modifi√©'
        };
        
        await interaction.update({
            content: `‚öñÔ∏è **${rewards[reward]}**\n\nR√©compense karma configur√©e avec succ√®s.`,
            embeds: [],
            components: []
        });
    }

    async handleKarmaResetEdit(interaction) {
        const day = interaction.values[0];
        if (day === 'back_karma') return await this.showKarmaConfig(interaction);
        
        const days = {
            'monday': 'Lundi', 'tuesday': 'Mardi', 'wednesday': 'Mercredi',
            'thursday': 'Jeudi', 'friday': 'Vendredi', 'saturday': 'Samedi',
            'sunday': 'Dimanche', 'disable': 'Reset d√©sactiv√©'
        };
        
        await interaction.update({
            content: `‚öñÔ∏è **Reset Karma configur√©**\n\nNouveau jour: **${days[day] || day}**\n\nLe karma sera remis √† z√©ro automatiquement.`,
            embeds: [],
            components: []
        });
    }

    async handleActionKarmaValues(interaction) {
        const karmaType = interaction.values[0];
        if (karmaType === 'back_karma') return await this.showKarmaConfig(interaction);
        
        const karmaTypes = {
            'work_karma': 'Karma Travailler: +2üòá -1üòà',
            'fish_karma': 'Karma P√™cher: +1üòá -0üòà',
            'give_karma': 'Karma Donner: +3üòá -2üòà',
            'steal_karma': 'Karma Voler: +2üòà -1üòá',
            'crime_karma': 'Karma Crime: +3üòà -2üòá',
            'bet_karma': 'Karma Parier: +1üòà -1üòá',
            'reset_karma_values': 'Valeurs karma par d√©faut restaur√©es'
        };
        
        await interaction.update({
            content: `‚öñÔ∏è **${karmaTypes[karmaType]}**\n\nKarma par action configur√© avec succ√®s.`,
            embeds: [],
            components: []
        });
    }

    // HANDLERS DAILY
    async handleDailyAmountsEdit(interaction) {
        const amount = interaction.values[0];
        if (amount === 'back_daily') return await this.showDailyConfig(interaction);
        
        if (amount === 'custom') {
            await interaction.update({
                content: 'üéÅ **Montant Daily Personnalis√©**\n\nUtilisez les commandes de configuration avanc√©e pour d√©finir un montant personnalis√©.',
                embeds: [],
                components: []
            });
        } else {
            await interaction.update({
                content: `üéÅ **Montant Daily configur√©**\n\nNouvel montant: **${amount}‚Ç¨**\n\nR√©compense quotidienne mise √† jour.`,
                embeds: [],
                components: []
            });
        }
    }

    async handleDailyStreakEdit(interaction) {
        const streak = interaction.values[0];
        if (streak === 'back_daily') return await this.showDailyConfig(interaction);
        
        const streaks = {
            'streak_3': 'Streak 3 jours: +25‚Ç¨ bonus',
            'streak_7': 'Streak 7 jours: +50‚Ç¨ bonus',
            'streak_15': 'Streak 15 jours: +100‚Ç¨ bonus',
            'streak_30': 'Streak 30 jours: +200‚Ç¨ bonus',
            'custom_streaks': 'Bonus personnalis√©s configur√©s',
            'disable_streaks': 'Syst√®me de streaks d√©sactiv√©',
            'reset_all_streaks': 'Tous les streaks ont √©t√© remis √† z√©ro'
        };
        
        await interaction.update({
            content: `üî• **${streaks[streak]}**\n\nConfiguration des streaks mise √† jour.`,
            embeds: [],
            components: []
        });
    }

    async handleDailyResetEdit(interaction) {
        const setting = interaction.values[0];
        if (setting === 'back_daily') return await this.showDailyConfig(interaction);
        
        const settings = {
            '22': 'Reset √† 22:00',
            '23': 'Reset √† 23:00',
            '0': 'Reset √† minuit (00:00)',
            '1': 'Reset √† 01:00',
            '2': 'Reset √† 02:00',
            '6': 'Reset √† 06:00',
            'streak_delay': 'D√©lai streak configur√©',
            'timezone': 'Fuseau horaire modifi√©'
        };
        
        await interaction.update({
            content: `üîÑ **${settings[setting]}**\n\nConfiguration reset daily mise √† jour.`,
            embeds: [],
            components: []
        });
    }

    // HANDLERS MESSAGES
    async handleMessagesToggleEdit(interaction) {
        const action = interaction.values[0];
        if (action === 'back_messages') return await this.showMessagesConfig(interaction);
        
        const actions = {
            'enable': 'Syst√®me de r√©compenses messages activ√© ‚úÖ',
            'disable': 'Syst√®me de r√©compenses messages d√©sactiv√© ‚ùå',
            'test_mode': 'Mode test activ√© üß™',
            'excluded_channels': 'Canaux exclus configur√©s',
            'excluded_roles': 'R√¥les exclus configur√©s',
            'message_stats': 'Statistiques des messages',
            'reset_counters': 'Compteurs remis √† z√©ro'
        };
        
        await interaction.update({
            content: `üí¨ **${actions[action]}**\n\nConfiguration messages mise √† jour.`,
            embeds: [],
            components: []
        });
    }

    async handleMessagesAmountEdit(interaction) {
        const amount = interaction.values[0];
        if (amount === 'back_messages') return await this.showMessagesConfig(interaction);
        
        if (amount === 'custom') {
            await interaction.update({
                content: 'üí∞ **Montant Personnalis√©**\n\nUtilisez les param√®tres avanc√©s pour d√©finir un montant personnalis√©.',
                embeds: [],
                components: []
            });
        } else {
            await interaction.update({
                content: `üí∞ **Montant par Message configur√©**\n\nNouveau montant: **${amount}‚Ç¨**\n\nLes membres gagneront maintenant ${amount}‚Ç¨ par message.`,
                embeds: [],
                components: []
            });
        }
    }

    async handleMessagesCooldownEdit(interaction) {
        const cooldown = interaction.values[0];
        if (cooldown === 'back_messages') return await this.showMessagesConfig(interaction);
        
        const cooldowns = {
            '15': '15 secondes (‚ö° tr√®s rapide)',
            '30': '30 secondes (üî• rapide)',
            '45': '45 secondes (‚è∞ normal)',
            '60': '1 minute (üïê standard)',
            '90': '1.5 minutes (üïë lent)',
            '120': '2 minutes (üïí tr√®s lent)',
            '300': '5 minutes (üïî ultra lent)',
            '600': '10 minutes (üïô extr√™me)',
            '0': 'Pas de cooldown (üí® instantan√© - attention au spam!)'
        };
        
        await interaction.update({
            content: `‚è∞ **Cooldown Messages configur√©**\n\nNouveau d√©lai: **${cooldowns[cooldown]}**\n\nTemps d'attente entre r√©compenses mis √† jour.`,
            embeds: [],
            components: []
        });
    }

    // HANDLER STATISTIQUES
    async handleStatsAction(interaction) {
        const action = interaction.values[0];
        if (action === 'back_main') return await this.showMainEconomyConfig(interaction);
        
        const actions = {
            'general_economy': 'üí∞ √âconomie G√©n√©rale',
            'actions_stats': 'üìã Statistiques Actions',
            'detailed_rankings': 'üèÜ Classements D√©taill√©s',
            'karma_stats': '‚öñÔ∏è Statistiques Karma',
            'shop_revenue': 'üõí Revenus Boutique',
            'monthly_charts': 'üìà Graphiques Mensuels',
            'export_data': 'üìÅ Donn√©es Export√©es',
            'reset_stats': 'üîÑ Statistiques Remises √† Z√©ro'
        };
        
        await interaction.update({
            content: `üìä **${actions[action]}**\n\nConsultation des statistiques: **${action}**\n\nFonctionnalit√© avanc√©e disponible prochainement.`,
            embeds: [],
            components: []
        });
    }

    // ==================== NOUVEAUX HANDLERS BOUTIQUE AVANC√âE (SUITE) ====================
    
    // Handler pour prix permanent s√©lectionn√©
    async handleShopPermanentPriceSelect(interaction) {
        const action = interaction.values[0];
        if (action === 'back_type') return await this.showAddRoleConfig(interaction);
        
        if (action === 'custom_price_modal') {
            await this.showPermanentPriceModal(interaction);
        }
    }

    // Modal pour saisie prix permanent personnalis√©
    async showPermanentPriceModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId('shop_permanent_price_modal')
            .setTitle('üí∞ Prix R√¥le Permanent');

        const priceInput = new TextInputBuilder()
            .setCustomId('permanent_price_input')
            .setLabel('Prix en euros (nombre uniquement)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 500 (pour 500‚Ç¨)')
            .setRequired(true)
            .setMinLength(1)
            .setMaxLength(10);

        const firstRow = new ActionRowBuilder().addComponents(priceInput);
        modal.addComponents(firstRow);

        await interaction.showModal(modal);
    }

    // Handler pour dur√©e temporaire s√©lectionn√©e
    async handleShopTemporaryDurationSelect(interaction) {
        const action = interaction.values[0];
        if (action === 'back_type') return await this.showAddRoleConfig(interaction);
        
        if (action === 'custom_duration_modal') {
            await this.showTemporaryDurationModal(interaction);
        }
    }

    // Modal pour saisie dur√©e temporaire personnalis√©e
    async showTemporaryDurationModal(interaction) {
        const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = require('discord.js');
        
        const modal = new ModalBuilder()
            .setCustomId('shop_temporary_duration_modal')
            .setTitle('‚åõ Dur√©e R√¥le Temporaire');

        const durationInput = new TextInputBuilder()
            .setCustomId('temporary_duration_input')
            .setLabel('Dur√©e en jours (nombre uniquement)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 30 (pour 30 jours)')
            .setRequired(true)
            .setMinLength(1)
            .setMaxLength(5);

        const priceInput = new TextInputBuilder()
            .setCustomId('temporary_price_input')
            .setLabel('Prix en euros (nombre uniquement)')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('Ex: 250 (pour 250‚Ç¨)')
            .setRequired(true)
            .setMinLength(1)
            .setMaxLength(10);

        const firstRow = new ActionRowBuilder().addComponents(durationInput);
        const secondRow = new ActionRowBuilder().addComponents(priceInput);
        modal.addComponents(firstRow, secondRow);

        await interaction.showModal(modal);
    }

    // Handlers pour les modals soumis
    async handlePermanentPriceModal(interaction) {
        const price = interaction.fields.getTextInputValue('permanent_price_input');
        const priceNum = parseInt(price);
        
        if (isNaN(priceNum) || priceNum < 1 || priceNum > 999999) {
            await interaction.reply({
                content: '‚ùå **Erreur de Prix**\n\nVeuillez entrer un nombre valide entre 1 et 999,999.',
                flags: 64
            });
            return;
        }
        
        await interaction.reply({
            content: `‚úÖ **Prix Configur√©: ${priceNum}‚Ç¨**\n\nMaintenant, s√©lectionnez le r√¥le parmi ceux du serveur.`,
            flags: 64
        });
        
        // Afficher imm√©diatement le s√©lecteur de r√¥le
        setTimeout(() => {
            this.showShopPermanentRoleSelect(interaction, priceNum);
        }, 1000);
    }

    async handleTemporaryDurationModal(interaction) {
        const duration = interaction.fields.getTextInputValue('temporary_duration_input');
        const price = interaction.fields.getTextInputValue('temporary_price_input');
        
        const durationNum = parseInt(duration);
        const priceNum = parseInt(price);
        
        if (isNaN(durationNum) || durationNum < 1 || durationNum > 36500) {
            await interaction.reply({
                content: '‚ùå **Erreur de Dur√©e**\n\nVeuillez entrer un nombre de jours valide entre 1 et 36,500.',
                flags: 64
            });
            return;
        }
        
        if (isNaN(priceNum) || priceNum < 1 || priceNum > 999999) {
            await interaction.reply({
                content: '‚ùå **Erreur de Prix**\n\nVeuillez entrer un prix valide entre 1 et 999,999‚Ç¨.',
                flags: 64
            });
            return;
        }
        
        await interaction.reply({
            content: `‚úÖ **Configuration Temporaire**\n\n‚åõ **Dur√©e**: ${durationNum} jour${durationNum > 1 ? 's' : ''}\nüí∞ **Prix**: ${priceNum}‚Ç¨\n\nMaintenant, s√©lectionnez le r√¥le parmi ceux du serveur.`,
            flags: 64
        });
        
        // Afficher imm√©diatement le s√©lecteur de r√¥le
        setTimeout(() => {
            this.showShopTemporaryRoleSelect(interaction, priceNum, durationNum);
        }, 1000);
    }

    // Affichage s√©lection r√¥le permanent avec RoleSelectMenuBuilder
    async showShopPermanentRoleSelect(interaction, price) {
        const { RoleSelectMenuBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üîÑ S√©lection R√¥le Permanent')
            .setDescription('Choisissez le r√¥le √† vendre de fa√ßon permanente dans la boutique')
            .addFields([
                { name: 'üí∞ Prix Configur√©', value: `${price}‚Ç¨`, inline: true },
                { name: '‚è∞ Type', value: 'Permanent (√† vie)', inline: true },
                { name: 'üìù Instructions', value: 'S√©lectionnez un r√¥le dans le menu d√©roulant ci-dessous', inline: false }
            ]);

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('shop_permanent_role_select')
            .setPlaceholder('üëë S√©lectionner le r√¥le √† vendre')
            .setMinValues(1)
            .setMaxValues(1);

        const components = [new ActionRowBuilder().addComponents(roleSelect)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Affichage s√©lection r√¥le temporaire avec RoleSelectMenuBuilder
    async showShopTemporaryRoleSelect(interaction, price, duration = null) {
        const { RoleSelectMenuBuilder } = require('discord.js');
        
        const embed = new EmbedBuilder()
            .setColor('#ffa500')
            .setTitle('‚åõ S√©lection R√¥le Temporaire')
            .setDescription('Choisissez le r√¥le √† vendre temporairement dans la boutique')
            .addFields([
                { name: 'üí∞ Prix Configur√©', value: `${price}‚Ç¨`, inline: true },
                { name: '‚è∞ Type', value: `Temporaire (${duration ? duration + ' jour' + (duration > 1 ? 's' : '') : 'expire'})`, inline: true },
                { name: 'üìù Instructions', value: 'S√©lectionnez un r√¥le dans le menu d√©roulant ci-dessous', inline: false }
            ]);

        const roleSelect = new RoleSelectMenuBuilder()
            .setCustomId('shop_temporary_role_select')
            .setPlaceholder('‚åõ S√©lectionner le r√¥le temporaire')
            .setMinValues(1)
            .setMaxValues(1);

        const components = [new ActionRowBuilder().addComponents(roleSelect)];

        await interaction.update({
            embeds: [embed],
            components: components
        });
    }

    // Handler pour r√¥le permanent s√©lectionn√© (RoleSelectMenuBuilder)
    async handleShopPermanentRoleSelect(interaction) {
        const selectedRole = interaction.roles.first();
        
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚úÖ R√¥le Permanent Ajout√© √† la Boutique')
            .setDescription('Configuration termin√©e avec succ√®s!')
            .addFields([
                { name: 'üëë R√¥le', value: `${selectedRole.name} (<@&${selectedRole.id}>)`, inline: true },
                { name: 'üí∞ Prix', value: 'Prix configur√©', inline: true },
                { name: '‚è∞ Type', value: 'üîÑ Permanent', inline: true },
                { name: 'üõí Statut', value: '‚úÖ Disponible √† l\'achat', inline: false }
            ]);

        await interaction.update({
            embeds: [embed],
            components: []
        });
    }

    // Handler pour r√¥le temporaire s√©lectionn√© (RoleSelectMenuBuilder)
    async handleShopTemporaryRoleSelect(interaction) {
        const selectedRole = interaction.roles.first();
        
        const embed = new EmbedBuilder()
            .setColor('#ffa500')
            .setTitle('‚úÖ R√¥le Temporaire Ajout√© √† la Boutique')
            .setDescription('Configuration termin√©e avec succ√®s!')
            .addFields([
                { name: 'üëë R√¥le', value: `${selectedRole.name} (<@&${selectedRole.id}>)`, inline: true },
                { name: 'üí∞ Prix', value: 'Prix configur√©', inline: true },
                { name: '‚è∞ Type', value: '‚åõ Temporaire', inline: true },
                { name: 'üõí Statut', value: '‚úÖ Disponible √† l\'achat', inline: false }
            ]);

        await interaction.update({
            embeds: [embed],
            components: []
        });
    }
}

module.exports = EconomyHandler;