const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

class InteractionHandler {
    constructor(client, dataManager) {
        this.client = client;
        this.dataManager = dataManager;
        this.handlers = {
            selectMenu: new Map(),
            button: new Map(),
            modal: new Map()
        };
        
        this.setupHandlers();
        this.registerEventListeners();
    }

    setupHandlers() {
        // Configuration √âconomie
        this.handlers.selectMenu.set('economy_main_config', this.handleEconomyMainConfig.bind(this));
        this.handlers.selectMenu.set('economy_action_config', this.handleEconomyActionConfig.bind(this));
        this.handlers.selectMenu.set('karma_config_menu', this.handleKarmaConfigMenu.bind(this));
        
        // Configuration Confession
        this.handlers.selectMenu.set('confession_main_config', this.handleConfessionMainConfig.bind(this));
        this.handlers.selectMenu.set('config_main_menu', this.handleConfigMainMenu.bind(this));
        this.handlers.selectMenu.set('confession_channels', this.handleConfessionChannels.bind(this));
        this.handlers.selectMenu.set('confession_autothread', this.handleConfessionAutothread.bind(this));
        this.handlers.selectMenu.set('autothread_config', this.handleAutothreadGlobalConfig.bind(this));
        
        // S√©lecteurs Configuration Actions  
        const actions = ['work', 'fish', 'donate', 'steal', 'crime', 'bet'];
        actions.forEach(action => {
            this.handlers.selectMenu.set(`edit_reward_${action}`, this.handleEditRewardSelector.bind(this));
            this.handlers.selectMenu.set(`edit_karma_${action}`, this.handleEditKarmaSelector.bind(this));
            this.handlers.selectMenu.set(`edit_cooldown_${action}`, this.handleEditCooldownSelector.bind(this));
        });

        // Nouveaux handlers pour autothread global
        this.handlers.selectMenu.set('autothread_channels_config', this.handleAutothreadChannelsConfig.bind(this));
        this.handlers.selectMenu.set('autothread_name_config', this.handleAutothreadNameConfig.bind(this));
        this.handlers.selectMenu.set('autothread_archive_config', this.handleAutothreadArchiveConfig.bind(this));
        this.handlers.selectMenu.set('autothread_slowmode_config', this.handleAutothreadSlowmodeConfig.bind(this));
        this.handlers.selectMenu.set('autothread_toggle_status', this.handleAutothreadToggleStatus.bind(this));

        // Nouveaux handlers pour config-confession
        this.handlers.selectMenu.set('confession_channels_config', this.handleConfessionChannelsConfig.bind(this));
        this.handlers.selectMenu.set('confession_autothread_config', this.handleConfessionAutothreadConfig.bind(this));
        this.handlers.selectMenu.set('confession_logs_config', this.handleConfessionLogsConfig.bind(this));

        // Handlers pour s√©lecteurs canaux (ChannelSelectMenuBuilder)
        this.handlers.channelSelect = new Map();
        this.handlers.channelSelect.set('autothread_add_channel', this.handleAutothreadAddChannel.bind(this));
        this.handlers.channelSelect.set('autothread_remove_channel', this.handleAutothreadRemoveChannel.bind(this));
        this.handlers.channelSelect.set('confession_add_channel', this.handleConfessionAddChannel.bind(this));
        this.handlers.channelSelect.set('confession_remove_channel', this.handleConfessionRemoveChannel.bind(this));
        this.handlers.channelSelect.set('confession_main_channel', this.handleConfessionMainChannel.bind(this));
        
        // Boutons Navigation
        this.handlers.button.set('economy_back_main', this.handleBackToMain.bind(this));
        this.handlers.button.set('economy_back_actions', this.handleBackToActions.bind(this));
        this.handlers.button.set('config_back_main', this.handleBackToMain.bind(this));
        this.handlers.button.set('karma_force_reset', this.handleKarmaForceReset.bind(this));
        this.handlers.button.set('toggle_message_rewards', this.handleToggleMessageRewards.bind(this));

        // Boutons Actions √âconomiques (pour compatibilit√©)
        actions.forEach(action => {
            this.handlers.button.set(`edit_reward_${action}`, this.handleEditRewardButton.bind(this));
            this.handlers.button.set(`edit_karma_${action}`, this.handleEditKarmaButton.bind(this));
            this.handlers.button.set(`edit_cooldown_${action}`, this.handleEditCooldownButton.bind(this));
        });
    }

    registerEventListeners() {
        this.client.on('interactionCreate', async (interaction) => {
            try {
                if (interaction.isStringSelectMenu()) {
                    await this.handleSelectMenu(interaction);
                } else if (interaction.isChannelSelectMenu()) {
                    await this.handleChannelSelect(interaction);
                } else if (interaction.isButton()) {
                    await this.handleButton(interaction);
                } else if (interaction.isModalSubmit()) {
                    await this.handleModal(interaction);
                }
            } catch (error) {
                console.error('Erreur interaction:', error);
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: 'Une erreur est survenue lors du traitement de votre demande.',
                        flags: 64
                    }).catch(() => {});
                }
            }
        });
    }

    async handleSelectMenu(interaction) {
        const handler = this.handlers.selectMenu.get(interaction.customId);
        if (handler) {
            await handler(interaction);
        } else {
            await interaction.reply({
                content: `S√©lecteur ${interaction.customId} non g√©r√©.`,
                flags: 64
            });
        }
    }

    async handleChannelSelect(interaction) {
        console.log(`üîç Channel Select Interaction: ${interaction.customId}`);
        
        const handler = this.handlers.channelSelect?.get(interaction.customId);
        if (handler) {
            console.log(`‚úÖ Handler trouv√© pour ${interaction.customId}`);
            await handler(interaction);
        } else {
            console.log(`‚ùå Aucun handler pour ${interaction.customId}`);
            console.log('Handlers disponibles:', Array.from(this.handlers.channelSelect.keys()));
            await interaction.reply({
                content: `Handler canal non trouv√© pour ${interaction.customId}.`,
                flags: 64
            });
        }
    }

    async handleButton(interaction) {
        const handler = this.handlers.button.get(interaction.customId);
        if (handler) {
            await handler(interaction);
        } else {
            await interaction.reply({
                content: `Bouton ${interaction.customId} non g√©r√©.`,
                flags: 64
            });
        }
    }

    async handleModal(interaction) {
        const customId = interaction.customId;
        
        if (customId.startsWith('reward_modal_')) {
            await this.handleRewardModal(interaction);
        } else if (customId.startsWith('karma_modal_')) {
            await this.handleKarmaModal(interaction);
        } else if (customId.startsWith('cooldown_modal_')) {
            await this.handleCooldownModal(interaction);
        } else {
            await interaction.reply({
                content: `Modal ${customId} non g√©r√©.`,
                flags: 64
            });
        }
    }

    async handleRewardModal(interaction) {
        const action = interaction.customId.split('_')[2];
        const minReward = interaction.fields.getTextInputValue('min_reward');
        const maxReward = interaction.fields.getTextInputValue('max_reward');
        const karmaBonus = interaction.fields.getTextInputValue('karma_bonus') || '0';

        await interaction.reply({
            content: `‚úÖ Configuration r√©compenses mise √† jour pour ${action}:\n‚Ä¢ Min: ${minReward}‚Ç¨\n‚Ä¢ Max: ${maxReward}‚Ç¨\n‚Ä¢ Bonus karma: ${karmaBonus}%`,
            flags: 64
        });
    }

    async handleKarmaModal(interaction) {
        const action = interaction.customId.split('_')[2];
        const goodKarma = interaction.fields.getTextInputValue('good_karma');
        const badKarma = interaction.fields.getTextInputValue('bad_karma');
        const multiplier = interaction.fields.getTextInputValue('level_multiplier') || '0';

        await interaction.reply({
            content: `‚úÖ Configuration karma mise √† jour pour ${action}:\n‚Ä¢ Karma bon: ${goodKarma}üòá\n‚Ä¢ Karma mauvais: ${badKarma}üòà\n‚Ä¢ Multiplicateur: ${multiplier}%`,
            flags: 64
        });
    }

    async handleCooldownModal(interaction) {
        const action = interaction.customId.split('_')[2];
        const duration = interaction.fields.getTextInputValue('cooldown_duration');
        const reduction = interaction.fields.getTextInputValue('karma_reduction') || '0';
        const type = interaction.fields.getTextInputValue('cooldown_type') || 'user';

        await interaction.reply({
            content: `‚úÖ Configuration cooldown mise √† jour pour ${action}:\n‚Ä¢ Dur√©e: ${duration}min\n‚Ä¢ R√©duction karma: ${reduction}%\n‚Ä¢ Type: ${type}`,
            flags: 64
        });
    }

    // === HANDLERS CONFIGURATION √âCONOMIE ===

    async handleEconomyMainConfig(interaction) {
        const value = interaction.values[0];
        
        switch(value) {
            case 'actions':
                await this.showActionsConfig(interaction);
                break;
            case 'shop':
                await this.showShopConfig(interaction);
                break;
            case 'karma':
                await this.showKarmaConfig(interaction);
                break;
            case 'rewards':
                await this.showRewardsConfig(interaction);
                break;
            default:
                await interaction.reply({
                    content: `Configuration ${value} disponible.`,
                    flags: 64
                });
        }
    }

    async handleEconomyActionConfig(interaction) {
        const action = interaction.values[0];
        await this.showActionSettings(interaction, action);
    }

    async handleKarmaConfigMenu(interaction) {
        const value = interaction.values[0];
        
        switch(value) {
            case 'levels':
                await this.showKarmaLevelsConfig(interaction);
                break;
            case 'reset':
                await this.showKarmaResetConfig(interaction);
                break;
            case 'actions':
                await this.showKarmaActionsConfig(interaction);
                break;
            default:
                await interaction.reply({
                    content: `Configuration karma ${value} disponible.`,
                    flags: 64
                });
        }
    }

    // === HANDLERS CONFIGURATION CONFESSION ===

    async handleConfessionMainConfig(interaction) {
        const value = interaction.values[0];
        
        switch(value) {
            case 'channels':
                await this.showChannelsConfig(interaction);
                break;
            case 'autothread':
                await this.showAutothreadConfig(interaction);
                break;
            case 'logs':
                await this.showLogsConfig(interaction);
                break;
            default:
                await interaction.reply({
                    content: `Configuration confession ${value} disponible.`,
                    flags: 64
                });
        }
    }

    async handleConfessionChannels(interaction) {
        const guildId = interaction.guild.id;
        const config = await this.dataManager.getData('config');
        const confessionConfig = config.confessions?.[guildId] || {
            channels: [],
            logChannel: null,
            autoThread: false,
            threadName: 'Confession #{number}'
        };

        let channelsList = '‚Ä¢ Aucun canal configur√© pour le moment';
        if (confessionConfig.channels && confessionConfig.channels.length > 0) {
            channelsList = confessionConfig.channels.map(channelId => {
                const channel = interaction.guild.channels.cache.get(channelId);
                return channel ? `‚Ä¢ **#${channel.name}** (${channel.id})` : `‚Ä¢ Canal supprim√© (${channelId})`;
            }).join('\n');
        }

        const embed = new EmbedBuilder()
            .setColor('#7289da')
            .setTitle('üìã Canaux Confession Configur√©s')
            .setDescription('Liste des canaux configur√©s pour les confessions anonymes')
            .addFields([
                {
                    name: `üì± Canaux Actifs (${confessionConfig.channels.length})`,
                    value: channelsList,
                    inline: false
                },
                {
                    name: '‚öôÔ∏è Configuration',
                    value: `**Auto-Thread:** ${confessionConfig.autoThread ? 'üü¢ Activ√©' : 'üî¥ D√©sactiv√©'}\n**Format Thread:** \`${confessionConfig.threadName}\``,
                    inline: false
                }
            ]);

        await interaction.reply({
            embeds: [embed],
            flags: 64
        });
    }

    async handleConfigMainMenu(interaction) {
        const { StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const value = interaction.values[0];
        
        if (value === 'channels') {
            const embed = new EmbedBuilder()
                .setColor('#2196F3')
                .setTitle('üí≠ Configuration Canaux Confessions')
                .setDescription('G√©rez les canaux o√π les confessions sont envoy√©es');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('confession_channels_config')
                .setPlaceholder('üí≠ Configurer les canaux confessions')
                .addOptions([
                    {
                        label: 'Ajouter Canal',
                        description: 'Ajouter un nouveau canal de confessions',
                        value: 'add_channel',
                        emoji: '‚ûï'
                    },
                    {
                        label: 'Retirer Canal',
                        description: 'Retirer un canal de confessions',
                        value: 'remove_channel',
                        emoji: '‚ûñ'
                    },
                    {
                        label: 'Voir Canaux',
                        description: 'Afficher tous les canaux configur√©s',
                        value: 'list_channels',
                        emoji: 'üìã'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'autothread') {
            const embed = new EmbedBuilder()
                .setColor('#2196F3')
                .setTitle('üßµ Configuration Auto-Thread Confessions')
                .setDescription('Configurez la cr√©ation automatique de threads pour les confessions');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('confession_autothread_config')
                .setPlaceholder('üßµ Configurer auto-thread confessions')
                .addOptions([
                    {
                        label: 'Activer/D√©sactiver',
                        description: 'Activer ou d√©sactiver les threads automatiques',
                        value: 'toggle_autothread',
                        emoji: 'üîÑ'
                    },
                    {
                        label: 'Nom des Threads',
                        description: 'Format du nom des threads cr√©√©s',
                        value: 'thread_name',
                        emoji: 'üè∑Ô∏è'
                    },
                    {
                        label: 'Archive Automatique',
                        description: 'Dur√©e avant archivage automatique',
                        value: 'archive_time',
                        emoji: 'üì¶'
                    },
                    {
                        label: 'Mode Priv√©',
                        description: 'Threads priv√©s ou publics',
                        value: 'private_mode',
                        emoji: 'üîê'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'logs') {
            const embed = new EmbedBuilder()
                .setColor('#2196F3')
                .setTitle('üìã Configuration Logs Admin')
                .setDescription('Configurez les logs de mod√©ration et audit');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('confession_logs_config')
                .setPlaceholder('üìã Configurer logs admin')
                .addOptions([
                    {
                        label: 'Canal Logs',
                        description: 'D√©finir le canal pour les logs admin',
                        value: 'log_channel',
                        emoji: 'üìù'
                    },
                    {
                        label: 'Niveau D√©tail',
                        description: 'Niveau de d√©tail des logs',
                        value: 'log_level',
                        emoji: 'üîç'
                    },
                    {
                        label: 'Logs Confessions',
                        description: 'Activer les logs des confessions',
                        value: 'confession_logs',
                        emoji: 'üí≠'
                    },
                    {
                        label: 'Logs Mod√©ration',
                        description: 'Activer les logs de mod√©ration',
                        value: 'moderation_logs',
                        emoji: 'üõ°Ô∏è'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else {
            await interaction.reply({
                content: `Configuration ${value} disponible.`,
                flags: 64
            });
        }
    }

    async handleConfessionAutothread(interaction) {
        await interaction.reply({
            content: 'Configuration auto-thread pour confessions disponible.',
            flags: 64
        });
    }

    async handleAutothreadGlobalConfig(interaction) {
        const { StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const value = interaction.values[0];
        
        if (value === 'toggle') {
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('üîÑ Activer/D√©sactiver Auto-Thread')
                .setDescription('Choisissez l\'√©tat du syst√®me auto-thread global');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('autothread_toggle_status')
                .setPlaceholder('üîÑ Choisir l\'√©tat du syst√®me')
                .addOptions([
                    {
                        label: 'Activer',
                        description: 'Activer le syst√®me auto-thread sur tous les canaux configur√©s',
                        value: 'enable',
                        emoji: 'üü¢'
                    },
                    {
                        label: 'D√©sactiver',
                        description: 'D√©sactiver compl√®tement le syst√®me auto-thread',
                        value: 'disable',
                        emoji: 'üî¥'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'channels') {
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('üì± Configuration Canaux')
                .setDescription('S√©lectionnez une option pour g√©rer les canaux');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('autothread_channels_config')
                .setPlaceholder('üì± Configurer les canaux')
                .addOptions([
                    {
                        label: 'Ajouter Canal',
                        description: 'Ajouter un nouveau canal',
                        value: 'add_channel',
                        emoji: '‚ûï'
                    },
                    {
                        label: 'Retirer Canal',
                        description: 'Retirer un canal existant',
                        value: 'remove_channel',
                        emoji: '‚ûñ'
                    },
                    {
                        label: 'Voir Canaux',
                        description: 'Afficher tous les canaux configur√©s',
                        value: 'list_channels',
                        emoji: 'üìã'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'name') {
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('üè∑Ô∏è Configuration Nom des Threads')
                .setDescription('S√©lectionnez un format pour le nom des threads');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('autothread_name_config')
                .setPlaceholder('üè∑Ô∏è Choisir format du nom')
                .addOptions([
                    {
                        label: 'Discussion - {user}',
                        description: 'Format standard avec nom utilisateur',
                        value: 'Discussion - {user}',
                        emoji: 'üë§'
                    },
                    {
                        label: 'Thread {user}',
                        description: 'Format simple',
                        value: 'Thread {user}',
                        emoji: 'üßµ'
                    },
                    {
                        label: 'Chat avec {user}',
                        description: 'Format conversationnel',
                        value: 'Chat avec {user}',
                        emoji: 'üí¨'
                    },
                    {
                        label: 'Personnalis√©',
                        description: 'D√©finir un format personnalis√©',
                        value: 'custom',
                        emoji: '‚úèÔ∏è'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'archive') {
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('üì¶ Configuration Archive Automatique')
                .setDescription('S√©lectionnez la dur√©e avant archivage automatique');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('autothread_archive_config')
                .setPlaceholder('üì¶ Choisir dur√©e archivage')
                .addOptions([
                    {
                        label: '60 minutes',
                        description: 'Archive apr√®s 1 heure',
                        value: '60',
                        emoji: '‚è∞'
                    },
                    {
                        label: '1440 minutes (24h)',
                        description: 'Archive apr√®s 1 jour',
                        value: '1440',
                        emoji: 'üìÖ'
                    },
                    {
                        label: '4320 minutes (3 jours)',
                        description: 'Archive apr√®s 3 jours',
                        value: '4320',
                        emoji: 'üìÜ'
                    },
                    {
                        label: '10080 minutes (7 jours)',
                        description: 'Archive apr√®s 1 semaine',
                        value: '10080',
                        emoji: 'üóìÔ∏è'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'slowmode') {
            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('‚è±Ô∏è Configuration Mode Lent')
                .setDescription('S√©lectionnez le d√©lai entre les messages');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('autothread_slowmode_config')
                .setPlaceholder('‚è±Ô∏è Choisir d√©lai mode lent')
                .addOptions([
                    {
                        label: 'D√©sactiv√©',
                        description: 'Aucun d√©lai entre messages',
                        value: '0',
                        emoji: 'üö´'
                    },
                    {
                        label: '5 secondes',
                        description: 'D√©lai de 5 secondes',
                        value: '5',
                        emoji: '‚è±Ô∏è'
                    },
                    {
                        label: '10 secondes',
                        description: 'D√©lai de 10 secondes',
                        value: '10',
                        emoji: '‚è∞'
                    },
                    {
                        label: '30 secondes',
                        description: 'D√©lai de 30 secondes',
                        value: '30',
                        emoji: '‚è≥'
                    },
                    {
                        label: '60 secondes',
                        description: 'D√©lai de 1 minute',
                        value: '60',
                        emoji: '‚åõ'
                    }
                ]);

            const components = [new ActionRowBuilder().addComponents(selectMenu)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else {
            await interaction.reply({
                content: `‚úÖ Configuration ${value} mise √† jour.`,
                flags: 64
            });
        }
    }

    // === AFFICHAGE CONFIGURATIONS ===

    async showActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('üíº Configuration Actions √âconomiques')
            .setDescription('Configurez toutes les actions avec karma param√©trable et r√©compenses automatiques')
            .addFields([
                {
                    name: 'üòá Actions Positives',
                    value: '**Travailler** (+1üòá -1üòà)\n**P√™cher** (+1üòá -1üòà)\n**Donner** (+3üòá -2üòà)',
                    inline: true
                },
                {
                    name: 'üòà Actions N√©gatives', 
                    value: '**Voler** (-1üòá +1üòà)\n**Crime** (-3üòá +3üòà)\n**Parier** (-1üòá +1üòà)',
                    inline: true
                },
                {
                    name: '‚öñÔ∏è Syst√®me Automatique',
                    value: 'R√©compenses/sanctions selon karma\nReset hebdomadaire configurable\nMultiplicateurs bonus/malus',
                    inline: false
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('economy_action_config')
            .setPlaceholder('üíº S√©lectionner une action √† configurer')
            .addOptions([
                {
                    label: 'Travailler üíº',
                    description: 'Gains: 100-150‚Ç¨ | Karma: +1üòá | Cooldown: 1h',
                    value: 'work',
                    emoji: 'üíº'
                },
                {
                    label: 'P√™cher üé£',
                    description: 'Gains variables | Karma: +1üòá | Cooldown: 1h30',
                    value: 'fish',
                    emoji: 'üé£'
                },
                {
                    label: 'Donner üíù',
                    description: 'Transfert argent | Karma: +3üòá | Cooldown: 1h',
                    value: 'donate',
                    emoji: 'üíù'
                },
                {
                    label: 'Voler üí∏',
                    description: 'Vol avec risque | Karma: +1üòà | Cooldown: 2h',
                    value: 'steal',
                    emoji: 'üí∏'
                },
                {
                    label: 'Crime üî´',
                    description: 'Gros gains/risques | Karma: +3üòà | Cooldown: 4h',
                    value: 'crime',
                    emoji: 'üî´'
                },
                {
                    label: 'Parier üé∞',
                    description: 'Gambling 45% | Karma: +1üòà | Cooldown: 30min',
                    value: 'bet',
                    emoji: 'üé∞'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        if (interaction.deferred) {
            await interaction.editReply({
                embeds: [embed],
                components: components
            });
        } else {
            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        }
    }

    async showActionSettings(interaction, action) {
        const actionConfig = {
            work: {
                name: 'Travailler üíº',
                description: 'Action positive qui g√©n√®re de l\'argent et du karma bon',
                settings: { minReward: 100, maxReward: 150, karmaGood: 1, karmaBad: 0, cooldown: 3600000 }
            },
            fish: {
                name: 'P√™cher üé£',
                description: 'Action positive avec gains variables selon la chance',
                settings: { minReward: 50, maxReward: 200, karmaGood: 1, karmaBad: 0, cooldown: 5400000 }
            },
            donate: {
                name: 'Donner üíù',
                description: 'Action tr√®s positive qui transf√®re de l\'argent',
                settings: { minReward: 0, maxReward: 0, karmaGood: 3, karmaBad: 0, cooldown: 3600000 }
            },
            steal: {
                name: 'Voler üí∏',
                description: 'Action n√©gative avec risques et r√©compenses',
                settings: { minReward: 50, maxReward: 100, karmaGood: 0, karmaBad: 1, cooldown: 7200000 }
            },
            crime: {
                name: 'Crime üî´',
                description: 'Action tr√®s n√©gative avec gros gains mais gros risques',
                settings: { minReward: 200, maxReward: 500, karmaGood: 0, karmaBad: 3, cooldown: 14400000 }
            },
            bet: {
                name: 'Parier üé∞',
                description: 'Action n√©gative de gambling avec 45% de chance',
                settings: { minReward: 0, maxReward: 200, karmaGood: 0, karmaBad: 1, cooldown: 1800000 }
            }
        };

        const config = actionConfig[action];
        if (!config) {
            await interaction.reply({
                content: 'Action non trouv√©e.',
                flags: 64
            });
            return;
        }

        const cooldownHours = Math.floor(config.settings.cooldown / 3600000);
        const cooldownMins = Math.floor((config.settings.cooldown % 3600000) / 60000);
        const cooldownText = cooldownHours > 0 ? `${cooldownHours}h${cooldownMins > 0 ? cooldownMins + 'min' : ''}` : `${cooldownMins}min`;

        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle(`‚öôÔ∏è Configuration: ${config.name}`)
            .setDescription(config.description)
            .addFields([
                {
                    name: 'üí∞ R√©compenses',
                    value: config.settings.minReward === config.settings.maxReward 
                        ? `**${config.settings.minReward}‚Ç¨**`
                        : `**${config.settings.minReward}‚Ç¨** - **${config.settings.maxReward}‚Ç¨**`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è Karma',
                    value: `üòá +${config.settings.karmaGood} | üòà +${config.settings.karmaBad}`,
                    inline: true
                },
                {
                    name: '‚è∞ Cooldown',
                    value: `**${cooldownText}**`,
                    inline: true
                }
            ]);

        const buttons = [
            new ButtonBuilder()
                .setCustomId(`edit_reward_${action}`)
                .setLabel('Modifier R√©compenses')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üí∞'),
            new ButtonBuilder()
                .setCustomId(`edit_karma_${action}`)
                .setLabel('Modifier Karma')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚öñÔ∏è'),
            new ButtonBuilder()
                .setCustomId(`edit_cooldown_${action}`)
                .setLabel('Modifier Cooldown')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚è∞')
        ];

        const components = [new ActionRowBuilder().addComponents(buttons)];

        if (interaction.deferred) {
            await interaction.editReply({
                embeds: [embed],
                components: components
            });
        } else {
            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        }
    }

    async showKarmaConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('‚öñÔ∏è Configuration Syst√®me Karma Avanc√©')
            .setDescription('Syst√®me automatique avec r√©compenses/sanctions et reset hebdomadaire')
            .addFields([
                {
                    name: 'üèÜ Niveaux et R√©compenses',
                    value: '**üòá Saint** (+10+): +500‚Ç¨, x1.5 daily, -30% cooldown\n**üòá Bon** (+1/+9): +200‚Ç¨, x1.2 daily, -10% cooldown\n**üòê Neutre** (0): Aucun effet\n**üòà Mauvais** (-1/-9): -100‚Ç¨, x0.8 daily, +20% cooldown\n**üòà Diabolique** (-10-): -300‚Ç¨, x0.5 daily, +50% cooldown',
                    inline: false
                },
                {
                    name: 'üìÖ Reset Automatique',
                    value: 'Reset chaque semaine (configurable)\nR√©compenses distribu√©es avant reset\nTous les karma remis √† 0',
                    inline: true
                },
                {
                    name: '‚öôÔ∏è Actions Configurables',
                    value: 'Gains karma bon/mauvais par action\nEffets personnalisables\nActivation/d√©sactivation par action',
                    inline: true
                }
            ]);

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('karma_config_menu')
            .setPlaceholder('‚öñÔ∏è Configurer le syst√®me karma')
            .addOptions([
                {
                    label: 'Niveaux et R√©compenses',
                    description: 'Configurer les r√©compenses par niveau karma',
                    value: 'levels',
                    emoji: 'üèÜ'
                },
                {
                    label: 'Reset Hebdomadaire',
                    description: 'Jour et fr√©quence de r√©initialisation',
                    value: 'reset',
                    emoji: 'üìÖ'
                },
                {
                    label: 'Karma par Action',
                    description: 'Configurer karma gagn√©/perdu par action',
                    value: 'actions',
                    emoji: '‚öôÔ∏è'
                }
            ]);

        const resetButton = new ButtonBuilder()
            .setCustomId('karma_force_reset')
            .setLabel('Reset Imm√©diat')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('üîÑ');

        const components = [
            new ActionRowBuilder().addComponents(selectMenu),
            new ActionRowBuilder().addComponents(resetButton)
        ];

        if (interaction.deferred) {
            await interaction.editReply({
                embeds: [embed],
                components: components
            });
        } else {
            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        }
    }

    async showShopConfig(interaction) {
        await interaction.reply({
            content: 'Configuration boutique disponible.',
            flags: 64
        });
    }

    async showRewardsConfig(interaction) {
        await interaction.reply({
            content: 'Configuration r√©compenses disponible.',
            flags: 64
        });
    }

    async showChannelsConfig(interaction) {
        await interaction.reply({
            content: 'Configuration canaux disponible.',
            flags: 64
        });
    }

    async showAutothreadConfig(interaction) {
        await interaction.reply({
            content: 'Configuration auto-thread disponible.',
            flags: 64
        });
    }

    async showLogsConfig(interaction) {
        await interaction.reply({
            content: 'Configuration logs disponible.',
            flags: 64
        });
    }

    // === HANDLERS KARMA AVANC√âS ===

    async showKarmaLevelsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ffd700')
            .setTitle('üèÜ Configuration Niveaux Karma')
            .setDescription('R√©compenses automatiques selon le niveau de karma')
            .addFields([
                {
                    name: 'üòá Saint (+10 karma+)',
                    value: 'üí∞ +500‚Ç¨ | üéÅ x1.5 daily | ‚è∞ -30% cooldown',
                    inline: true
                },
                {
                    name: 'üòá Bon (+1 √† +9 karma)',
                    value: 'üí∞ +200‚Ç¨ | üéÅ x1.2 daily | ‚è∞ -10% cooldown',
                    inline: true
                },
                {
                    name: 'üòê Neutre (0 karma)',
                    value: 'üí∞ Aucun effet | üéÅ Normal | ‚è∞ Normal',
                    inline: true
                },
                {
                    name: 'üòà Mauvais (-1 √† -9 karma)',
                    value: 'üí∞ -100‚Ç¨ | üéÅ x0.8 daily | ‚è∞ +20% cooldown',
                    inline: true
                },
                {
                    name: 'üòà Diabolique (-10 karma-)',
                    value: 'üí∞ -300‚Ç¨ | üéÅ x0.5 daily | ‚è∞ +50% cooldown',
                    inline: true
                }
            ]);

        await interaction.reply({
            embeds: [embed],
            content: 'Configuration des r√©compenses par niveau disponible.',
            flags: 64
        });
    }

    async showKarmaResetConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('üìÖ Configuration Reset Hebdomadaire')
            .setDescription('Param√®tres de r√©initialisation automatique du karma')
            .addFields([
                {
                    name: 'Jour actuel',
                    value: 'Lundi (configurable)',
                    inline: true
                },
                {
                    name: 'Prochain reset',
                    value: 'Dans 5 jours',
                    inline: true
                },
                {
                    name: 'Actions du reset',
                    value: '1. Distribution r√©compenses\n2. Reset karma √† 0\n3. Log des statistiques',
                    inline: false
                }
            ]);

        await interaction.reply({
            embeds: [embed],
            content: 'Configuration du jour de reset disponible.',
            flags: 64
        });
    }

    async showKarmaActionsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('‚öôÔ∏è Configuration Karma par Action')
            .setDescription('Param√®tres karma gagn√©s/perdus pour chaque action √©conomique')
            .addFields([
                {
                    name: 'üíº Travailler',
                    value: 'üòá +1 karma bon | üòà -1 karma mauvais',
                    inline: true
                },
                {
                    name: 'üé£ P√™cher', 
                    value: 'üòá +1 karma bon | üòà -1 karma mauvais',
                    inline: true
                },
                {
                    name: 'üíù Donner',
                    value: 'üòá +3 karma bon | üòà -2 karma mauvais',
                    inline: true
                },
                {
                    name: 'üí∏ Voler',
                    value: 'üòá -1 karma bon | üòà +1 karma mauvais',
                    inline: true
                },
                {
                    name: 'üî´ Crime',
                    value: 'üòá -3 karma bon | üòà +3 karma mauvais',
                    inline: true
                },
                {
                    name: 'üé∞ Parier',
                    value: 'üòá -1 karma bon | üòà +1 karma mauvais',
                    inline: true
                }
            ]);

        await interaction.reply({
            embeds: [embed],
            content: 'Configuration karma par action disponible.',
            flags: 64
        });
    }

    // === HANDLERS BOUTONS ===

    async handleEditRewardSelector(interaction) {
        const { StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const action = interaction.customId.split('_')[2];
        
        const actionNames = {
            work: 'Travailler',
            fish: 'P√™cher', 
            donate: 'Donner',
            steal: 'Voler',
            crime: 'Crime',
            bet: 'Parier'
        };

        const embed = new EmbedBuilder()
            .setColor('#FFD700')
            .setTitle(`üí∞ Configuration R√©compenses: ${actionNames[action]}`)
            .setDescription('S√©lectionnez la valeur √† modifier');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`reward_value_${action}`)
            .setPlaceholder('üí∞ Choisir valeur √† modifier')
            .addOptions([
                {
                    label: 'Montant Minimum',
                    description: 'Modifier le montant minimum (actuellement: 100‚Ç¨)',
                    value: 'min_reward',
                    emoji: 'üìâ'
                },
                {
                    label: 'Montant Maximum',
                    description: 'Modifier le montant maximum (actuellement: 150‚Ç¨)',
                    value: 'max_reward',
                    emoji: 'üìà'
                },
                {
                    label: 'Bonus Karma',
                    description: 'Modifier le bonus selon karma (actuellement: 10%)',
                    value: 'karma_bonus',
                    emoji: '‚öñÔ∏è'
                },
                {
                    label: 'Valeurs Pr√©d√©finies',
                    description: 'Choisir parmi des configurations pr√™tes',
                    value: 'presets',
                    emoji: '‚ö°'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.reply({
            embeds: [embed],
            components: components,
            flags: 64
        });
    }

    async handleEditKarmaSelector(interaction) {
        const { StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const action = interaction.customId.split('_')[2];
        
        const actionNames = {
            work: 'Travailler',
            fish: 'P√™cher', 
            donate: 'Donner',
            steal: 'Voler',
            crime: 'Crime',
            bet: 'Parier'
        };

        const embed = new EmbedBuilder()
            .setColor('#9B59B6')
            .setTitle(`‚öñÔ∏è Configuration Karma: ${actionNames[action]}`)
            .setDescription('S√©lectionnez la valeur karma √† modifier');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`karma_value_${action}`)
            .setPlaceholder('‚öñÔ∏è Choisir valeur karma √† modifier')
            .addOptions([
                {
                    label: 'Karma Bon (üòá)',
                    description: 'Modifier karma bon gagn√©/perdu (actuellement: +1)',
                    value: 'good_karma',
                    emoji: 'üòá'
                },
                {
                    label: 'Karma Mauvais (üòà)',
                    description: 'Modifier karma mauvais gagn√©/perdu (actuellement: -1)',
                    value: 'bad_karma',
                    emoji: 'üòà'
                },
                {
                    label: 'Multiplicateur Niveau',
                    description: 'Modifier bonus/malus selon niveau (actuellement: 50%)',
                    value: 'level_multiplier',
                    emoji: 'üìä'
                },
                {
                    label: 'Configurations Pr√™tes',
                    description: 'Actions bonnes, neutres ou mauvaises pr√©d√©finies',
                    value: 'karma_presets',
                    emoji: '‚ö°'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.reply({
            embeds: [embed],
            components: components,
            flags: 64
        });
    }

    async handleEditCooldownSelector(interaction) {
        const { StringSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const action = interaction.customId.split('_')[2];
        
        const actionNames = {
            work: 'Travailler',
            fish: 'P√™cher', 
            donate: 'Donner',
            steal: 'Voler',
            crime: 'Crime',
            bet: 'Parier'
        };

        const embed = new EmbedBuilder()
            .setColor('#E74C3C')
            .setTitle(`‚è∞ Configuration Cooldown: ${actionNames[action]}`)
            .setDescription('S√©lectionnez la valeur cooldown √† modifier');

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId(`cooldown_value_${action}`)
            .setPlaceholder('‚è∞ Choisir valeur cooldown √† modifier')
            .addOptions([
                {
                    label: 'Dur√©e Cooldown',
                    description: 'Modifier dur√©e en minutes (actuellement: 60min)',
                    value: 'cooldown_duration',
                    emoji: '‚è±Ô∏è'
                },
                {
                    label: 'R√©duction Karma',
                    description: 'R√©duction selon niveau karma (actuellement: 10%)',
                    value: 'karma_reduction',
                    emoji: '‚öñÔ∏è'
                },
                {
                    label: 'Type Cooldown',
                    description: 'Global ou par utilisateur (actuellement: user)',
                    value: 'cooldown_type',
                    emoji: 'üë•'
                },
                {
                    label: 'Dur√©es Pr√©d√©finies',
                    description: 'Choisir parmi des dur√©es standard',
                    value: 'duration_presets',
                    emoji: '‚ö°'
                }
            ]);

        const components = [new ActionRowBuilder().addComponents(selectMenu)];

        await interaction.reply({
            embeds: [embed],
            components: components,
            flags: 64
        });
    }

    // Nouveaux handlers pour autothread global
    async handleAutothreadChannelsConfig(interaction) {
        const { ChannelSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const value = interaction.values[0];
        
        if (value === 'add_channel') {
            const embed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('‚ûï Ajouter Canal Auto-Thread')
                .setDescription('S√©lectionnez un canal √† ajouter pour l\'auto-thread global');

            const channelSelect = new ChannelSelectMenuBuilder()
                .setCustomId('autothread_add_channel')
                .setPlaceholder('üì± S√©lectionnez un canal √† ajouter')
                .setChannelTypes([0]); // Text channels

            const components = [new ActionRowBuilder().addComponents(channelSelect)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'remove_channel') {
            const embed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ûñ Retirer Canal Auto-Thread')
                .setDescription('S√©lectionnez un canal √† retirer de l\'auto-thread global');

            const channelSelect = new ChannelSelectMenuBuilder()
                .setCustomId('autothread_remove_channel')
                .setPlaceholder('üì± S√©lectionnez un canal √† retirer')
                .setChannelTypes([0]); // Text channels

            const components = [new ActionRowBuilder().addComponents(channelSelect)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'list_channels') {
            const guildId = interaction.guild.id;
            const config = await this.dataManager.getData('config');
            const autoThreadConfig = config.autoThread?.[guildId] || {
                enabled: false,
                channels: [],
                threadName: 'Discussion - {user}',
                archiveTime: 60,
                slowMode: 0
            };

            let channelsList = '‚Ä¢ Aucun canal configur√© pour le moment';
            if (autoThreadConfig.channels && autoThreadConfig.channels.length > 0) {
                channelsList = autoThreadConfig.channels.map(channelId => {
                    const channel = interaction.guild.channels.cache.get(channelId);
                    return channel ? `‚Ä¢ **#${channel.name}** (${channel.id})` : `‚Ä¢ Canal supprim√© (${channelId})`;
                }).join('\n');
            }

            const embed = new EmbedBuilder()
                .setColor('#7289da')
                .setTitle('üìã Canaux Auto-Thread Configur√©s')
                .setDescription('Liste des canaux configur√©s pour l\'auto-thread global')
                .addFields([
                    {
                        name: `üì± Canaux Actifs (${autoThreadConfig.channels.length})`,
                        value: channelsList,
                        inline: false
                    },
                    {
                        name: '‚öôÔ∏è Configuration',
                        value: `**Statut:** ${autoThreadConfig.enabled ? 'üü¢ Activ√©' : 'üî¥ D√©sactiv√©'}\n**Format:** \`${autoThreadConfig.threadName}\`\n**Archive:** ${autoThreadConfig.archiveTime} minutes`,
                        inline: false
                    },
                    {
                        name: 'üí° Information',
                        value: 'Utilisez "Ajouter Canal" pour configurer l\'auto-thread sur vos canaux',
                        inline: false
                    }
                ]);

            await interaction.reply({
                embeds: [embed],
                flags: 64
            });
        }
    }

    async handleAutothreadNameConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'custom') {
            await interaction.reply({
                content: '‚úèÔ∏è Format personnalis√© configur√©. Variables disponibles: {user}, {channel}, {date}',
                flags: 64
            });
        } else {
            await interaction.reply({
                content: `‚úÖ Format de nom mis √† jour: "${value}"`,
                flags: 64
            });
        }
    }

    async handleAutothreadArchiveConfig(interaction) {
        const value = interaction.values[0];
        const timeLabels = {
            '60': '1 heure',
            '1440': '24 heures',
            '4320': '3 jours',
            '10080': '7 jours'
        };
        
        await interaction.reply({
            content: `‚úÖ Archive automatique configur√©e: ${timeLabels[value] || value + ' minutes'}`,
            flags: 64
        });
    }

    async handleAutothreadSlowmodeConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === '0') {
            await interaction.reply({
                content: '‚úÖ Mode lent d√©sactiv√©.',
                flags: 64
            });
        } else {
            await interaction.reply({
                content: `‚úÖ Mode lent configur√©: ${value} secondes entre les messages.`,
                flags: 64
            });
        }
    }

    // Nouveaux handlers pour boutons actions (compatibilit√©)
    async handleEditRewardButton(interaction) {
        const action = interaction.customId.split('_')[2];
        // Defer l'interaction d'abord pour √©viter l'erreur timeout
        await interaction.deferReply({ flags: 64 });
        
        // Cr√©er une interaction simul√©e pour les handlers de s√©lecteurs
        const mockInteraction = {
            ...interaction,
            customId: `edit_reward_${action}`,
            values: ['menu'],
            reply: async (options) => {
                return await interaction.editReply(options);
            }
        };
        
        await this.handleEditRewardSelector(mockInteraction);
    }

    async handleEditKarmaButton(interaction) {
        const action = interaction.customId.split('_')[2];
        await interaction.deferReply({ flags: 64 });
        
        const mockInteraction = {
            ...interaction,
            customId: `edit_karma_${action}`,
            values: ['menu'],
            reply: async (options) => {
                return await interaction.editReply(options);
            }
        };
        
        await this.handleEditKarmaSelector(mockInteraction);
    }

    async handleEditCooldownButton(interaction) {
        const action = interaction.customId.split('_')[2];
        await interaction.deferReply({ flags: 64 });
        
        const mockInteraction = {
            ...interaction,
            customId: `edit_cooldown_${action}`,
            values: ['menu'],
            reply: async (options) => {
                return await interaction.editReply(options);
            }
        };
        
        await this.handleEditCooldownSelector(mockInteraction);
    }

    // Nouveaux handlers pour config-confession
    async handleConfessionChannelsConfig(interaction) {
        const { ChannelSelectMenuBuilder, ActionRowBuilder, EmbedBuilder } = require('discord.js');
        const value = interaction.values[0];
        
        if (value === 'add_channel') {
            const embed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('‚ûï Ajouter Canal Confessions')
                .setDescription('S√©lectionnez un canal pour recevoir les confessions anonymes');

            const channelSelect = new ChannelSelectMenuBuilder()
                .setCustomId('confession_add_channel')
                .setPlaceholder('üí≠ S√©lectionnez un canal confessions')
                .setChannelTypes([0]); // Text channels

            const components = [new ActionRowBuilder().addComponents(channelSelect)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'remove_channel') {
            const embed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ûñ Retirer Canal Confessions')
                .setDescription('S√©lectionnez un canal √† retirer des confessions');

            const channelSelect = new ChannelSelectMenuBuilder()
                .setCustomId('confession_remove_channel')
                .setPlaceholder('üí≠ Canal √† retirer')
                .setChannelTypes([0]); // Text channels

            const components = [new ActionRowBuilder().addComponents(channelSelect)];

            await interaction.reply({
                embeds: [embed],
                components: components,
                flags: 64
            });
        } else if (value === 'list_channels') {
            await this.handleConfessionChannels(interaction);
        }
    }

    async handleConfessionAutothreadConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'toggle_autothread') {
            await interaction.reply({
                content: 'üîÑ Auto-thread confessions activ√©/d√©sactiv√©.',
                flags: 64
            });
        } else if (value === 'thread_name') {
            await interaction.reply({
                content: 'üè∑Ô∏è Format du nom des threads configur√©.',
                flags: 64
            });
        } else if (value === 'archive_time') {
            await interaction.reply({
                content: 'üì¶ Dur√©e d\'archivage automatique configur√©e.',
                flags: 64
            });
        } else if (value === 'private_mode') {
            await interaction.reply({
                content: 'üîê Mode priv√© des threads configur√©.',
                flags: 64
            });
        }
    }

    async handleConfessionLogsConfig(interaction) {
        const value = interaction.values[0];
        
        if (value === 'log_channel') {
            await interaction.reply({
                content: 'üìù Canal de logs configur√©.',
                flags: 64
            });
        } else if (value === 'log_level') {
            await interaction.reply({
                content: 'üîç Niveau de d√©tail des logs configur√©.',
                flags: 64
            });
        } else if (value === 'confession_logs') {
            await interaction.reply({
                content: 'üí≠ Logs des confessions activ√©s/d√©sactiv√©s.',
                flags: 64
            });
        } else if (value === 'moderation_logs') {
            await interaction.reply({
                content: 'üõ°Ô∏è Logs de mod√©ration activ√©s/d√©sactiv√©s.',
                flags: 64
            });
        }
    }

    // Handlers pour channel selects
    async handleAutothreadAddChannel(interaction) {
        const channelId = interaction.values[0];
        const channel = interaction.guild.channels.cache.get(channelId);
        const guildId = interaction.guild.id;
        
        // Charger configuration actuelle
        const config = await this.dataManager.getData('config');
        if (!config.autoThread) config.autoThread = {};
        if (!config.autoThread[guildId]) {
            config.autoThread[guildId] = {
                enabled: false,
                channels: [],
                threadName: 'Discussion - {user}',
                archiveTime: 60,
                slowMode: 0
            };
        }
        
        // Ajouter canal s'il n'existe pas d√©j√†
        if (!config.autoThread[guildId].channels.includes(channelId)) {
            config.autoThread[guildId].channels.push(channelId);
            await this.dataManager.saveData('config', config);
        }
        
        await interaction.reply({
            content: `‚úÖ Canal **${channel.name}** ajout√© √† l'auto-thread global !\n\nüìä **${config.autoThread[guildId].channels.length}** canaux configur√©s au total.`,
            flags: 64
        });
    }

    async handleAutothreadRemoveChannel(interaction) {
        const channelId = interaction.values[0];
        const channel = interaction.guild.channels.cache.get(channelId);
        const guildId = interaction.guild.id;
        
        // Charger configuration actuelle
        const config = await this.dataManager.getData('config');
        if (!config.autoThread) config.autoThread = {};
        if (!config.autoThread[guildId]) {
            config.autoThread[guildId] = {
                enabled: false,
                channels: [],
                threadName: 'Discussion - {user}',
                archiveTime: 60,
                slowMode: 0
            };
        }
        
        // Retirer canal s'il existe
        const index = config.autoThread[guildId].channels.indexOf(channelId);
        if (index > -1) {
            config.autoThread[guildId].channels.splice(index, 1);
            await this.dataManager.saveData('config', config);
        }
        
        await interaction.reply({
            content: `‚ùå Canal **${channel.name}** retir√© de l'auto-thread global !\n\nüìä **${config.autoThread[guildId].channels.length}** canaux configur√©s restants.`,
            flags: 64
        });
    }

    async handleConfessionAddChannel(interaction) {
        const channelId = interaction.values[0];
        const channel = interaction.guild.channels.cache.get(channelId);
        const guildId = interaction.guild.id;
        
        // Charger configuration actuelle
        const config = await this.dataManager.getData('config');
        if (!config.confessions) config.confessions = {};
        if (!config.confessions[guildId]) {
            config.confessions[guildId] = {
                channels: [],
                logChannel: null,
                autoThread: false,
                threadName: 'Confession #{number}'
            };
        }
        
        // Ajouter canal s'il n'existe pas d√©j√†
        if (!config.confessions[guildId].channels.includes(channelId)) {
            config.confessions[guildId].channels.push(channelId);
            await this.dataManager.saveData('config', config);
        }
        
        await interaction.reply({
            content: `‚úÖ Canal **${channel.name}** ajout√© aux canaux confessions !\n\nüìä **${config.confessions[guildId].channels.length}** canaux configur√©s au total.`,
            flags: 64
        });
    }

    async handleConfessionRemoveChannel(interaction) {
        const channelId = interaction.values[0];
        const channel = interaction.guild.channels.cache.get(channelId);
        const guildId = interaction.guild.id;
        
        // Charger configuration actuelle
        const config = await this.dataManager.getData('config');
        if (!config.confessions) config.confessions = {};
        if (!config.confessions[guildId]) {
            config.confessions[guildId] = {
                channels: [],
                logChannel: null,
                autoThread: false,
                threadName: 'Confession #{number}'
            };
        }
        
        // Retirer canal s'il existe
        const index = config.confessions[guildId].channels.indexOf(channelId);
        if (index > -1) {
            config.confessions[guildId].channels.splice(index, 1);
            await this.dataManager.saveData('config', config);
        }
        
        await interaction.reply({
            content: `‚ùå Canal **${channel.name}** retir√© des canaux confessions !\n\nüìä **${config.confessions[guildId].channels.length}** canaux configur√©s restants.`,
            flags: 64
        });
    }

    async handleConfessionMainChannel(interaction) {
        const channelId = interaction.values[0];
        const channel = interaction.guild.channels.cache.get(channelId);
        
        await interaction.reply({
            content: `üéØ Canal **${channel.name}** d√©fini comme canal principal pour les confessions !`,
            flags: 64
        });
    }

    async handleAutothreadToggleStatus(interaction) {
        const value = interaction.values[0];
        const guildId = interaction.guild.id;
        
        // Charger configuration actuelle
        const config = await this.dataManager.getData('config');
        if (!config.autoThread) config.autoThread = {};
        if (!config.autoThread[guildId]) {
            config.autoThread[guildId] = {
                enabled: false,
                channels: [],
                threadName: 'Discussion - {user}',
                archiveTime: 60,
                slowMode: 0
            };
        }
        
        // Mettre √† jour le statut
        const newStatus = value === 'enable';
        config.autoThread[guildId].enabled = newStatus;
        await this.dataManager.saveData('config', config);
        
        const channelCount = config.autoThread[guildId].channels.length;
        
        if (value === 'enable') {
            await interaction.reply({
                content: `‚úÖ **Syst√®me auto-thread activ√© !**\n\nTous les messages dans les **${channelCount}** canaux configur√©s cr√©eront automatiquement des threads.`,
                flags: 64
            });
        } else if (value === 'disable') {
            await interaction.reply({
                content: `‚ùå **Syst√®me auto-thread d√©sactiv√© !**\n\nAucun thread ne sera cr√©√© automatiquement sur les **${channelCount}** canaux configur√©s.`,
                flags: 64
            });
        }
    }

    async handleBackToMain(interaction) {
        await interaction.reply({
            content: 'Retour au menu principal.',
            flags: 64
        });
    }

    async handleBackToActions(interaction) {
        await this.showActionsConfig(interaction);
    }

    async handleKarmaForceReset(interaction) {
        await interaction.reply({
            content: 'üîÑ Reset karma forc√© disponible.\n\nCette action va :\n‚Ä¢ Distribuer les r√©compenses actuelles\n‚Ä¢ Remettre tous les karma √† 0\n‚Ä¢ Logger l\'action dans les statistiques',
            flags: 64
        });
    }

    async handleToggleMessageRewards(interaction) {
        await interaction.reply({
            content: 'Toggle r√©compenses messages disponible.',
            flags: 64
        });
    }
}

module.exports = InteractionHandler;