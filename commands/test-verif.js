const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('test-verif')
    .setDescription('Tester le syst√®me de v√©rification et notifications')
    .addSubcommand(subcommand =>
      subcommand
        .setName('config')
        .setDescription('V√©rifier la configuration du syst√®me'))
    .addSubcommand(subcommand =>
      subcommand
        .setName('canal')
        .setDescription('Tester la d√©tection du canal d\'alertes'))
    .addSubcommand(subcommand =>
      subcommand
        .setName('alerte')
        .setDescription('Envoyer une alerte de test')
        .addUserOption(o => o.setName('membre').setDescription('Membre √† utiliser pour le test')))
    .addSubcommand(subcommand =>
      subcommand
        .setName('quarantaine')
        .setDescription('Tester le syst√®me de quarantaine complet')
        .addUserOption(o => o.setName('membre').setDescription('Membre √† utiliser pour le test (optionnel)')))
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator.toString()),

  cooldown: 10,

  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({ content: '‚ùå R√©serv√© aux administrateurs.', ephemeral: true });
    }

    const mod = interaction.client.moderationManager;
    if (!mod) {
      return interaction.reply({ content: '‚ùå Syst√®me de mod√©ration non disponible.', ephemeral: true });
    }

    const subcommand = interaction.options.getSubcommand();

    try {
      switch (subcommand) {
        case 'config':
          await this.testConfig(interaction, mod);
          break;
        case 'canal':
          await this.testChannel(interaction);
          break;
        case 'alerte':
          await this.testAlert(interaction);
          break;
        case 'quarantaine':
          await this.testQuarantine(interaction);
          break;
      }
    } catch (error) {
      console.error('Erreur test v√©rification:', error);
      return interaction.reply({ content: '‚ùå Erreur lors du test.', ephemeral: true });
    }
  },

  async testConfig(interaction, mod) {
    const config = await mod.getSecurityConfig(interaction.guild.id);
    
    const embed = new EmbedBuilder()
      .setTitle('üîß Test Configuration S√©curit√©')
      .setColor(config.enabled ? 0x51cf66 : 0xff6b6b)
      .setTimestamp();

    // √âtat g√©n√©ral
    embed.addFields({
      name: '‚öôÔ∏è √âtat du syst√®me',
      value: `**Syst√®me activ√© :** ${config.enabled ? '‚úÖ Oui' : '‚ùå Non'}\n` +
             `**Auto-alertes :** ${config.autoAlerts?.enabled ? '‚úÖ Activ√©es' : '‚ùå D√©sactiv√©es'}\n` +
             `**Contr√¥le d'acc√®s :** ${config.accessControl?.enabled ? '‚úÖ Activ√©' : '‚ùå D√©sactiv√©'}`,
      inline: false
    });

    // Canal d'alertes
    let channelStatus = '‚ùå Non configur√©';
    if (config.autoAlerts?.alertChannelId) {
      const channel = interaction.guild.channels.cache.get(config.autoAlerts.alertChannelId);
      channelStatus = channel ? `‚úÖ <#${channel.id}>` : '‚ö†Ô∏è Canal introuvable';
    }

    embed.addFields({
      name: 'üì¢ Canal d\'alertes',
      value: channelStatus,
      inline: true
    });

    // R√¥le mod√©rateur
    let roleStatus = '‚ùå Non configur√©';
    if (config.autoAlerts?.moderatorRoleId) {
      const role = interaction.guild.roles.cache.get(config.autoAlerts.moderatorRoleId);
      roleStatus = role ? `‚úÖ @${role.name}` : '‚ö†Ô∏è R√¥le introuvable';
    }

    embed.addFields({
      name: 'üëÆ R√¥le mod√©rateur',
      value: roleStatus,
      inline: true
    });

    // Seuils
    embed.addFields({
      name: 'üìä Seuils de risque',
      value: `**Alerte :** ${config.thresholds?.alertThreshold || 50}/100\n` +
             `**Multi-comptes :** ${config.thresholds?.multiAccountAlert || 60}/100\n` +
             `**Critique :** ${config.thresholds?.criticalRisk || 85}/100`,
      inline: false
    });

    // Recommandations
    const recommendations = [];
    if (!config.enabled) recommendations.push('‚Ä¢ Activer le syst√®me avec `/config-verif activer etat:true`');
    if (!config.autoAlerts?.alertChannelId) recommendations.push('‚Ä¢ Configurer le canal d\'alertes avec `/config-verif admins canal-alertes:#votre-canal`');
    if (!config.autoAlerts?.moderatorRoleId) recommendations.push('‚Ä¢ Configurer le r√¥le mod√©rateur avec `/config-verif admins role-admin:@votre-role`');

    if (recommendations.length > 0) {
      embed.addFields({
        name: 'üí° Recommandations',
        value: recommendations.join('\n'),
        inline: false
      });
    } else {
      embed.addFields({
        name: '‚úÖ Configuration',
        value: 'Le syst√®me semble correctement configur√© !',
        inline: false
      });
    }

    return interaction.reply({ embeds: [embed], ephemeral: true });
  },

  async testChannel(interaction) {
    await interaction.deferReply({ ephemeral: true });

    // Utiliser la m√©thode du bot principal pour trouver le canal
    const bot = interaction.client;
    const channel = await bot.findSecurityLogChannel(interaction.guild);

    const embed = new EmbedBuilder()
      .setTitle('üì° Test D√©tection Canal')
      .setTimestamp();

    if (channel) {
      embed.setColor(0x51cf66);
      embed.addFields({
        name: '‚úÖ Canal trouv√©',
        value: `**Canal :** <#${channel.id}>\n**Nom :** #${channel.name}\n**Type :** ${channel.type}`,
        inline: false
      });

      // Tester l'envoi d'un message de test
      try {
        await channel.send({
          content: 'üß™ **Message de test du syst√®me de v√©rification**\n' +
                   `Envoy√© par ${interaction.user.tag} depuis ${interaction.channel.name}\n` +
                   '*Ce message confirme que le canal d\'alertes fonctionne correctement.*'
        });
        
        embed.addFields({
          name: 'üì§ Test d\'envoi',
          value: '‚úÖ Message de test envoy√© avec succ√®s',
          inline: false
        });
      } catch (error) {
        embed.addFields({
          name: 'üì§ Test d\'envoi',
          value: `‚ùå Erreur: ${error.message}`,
          inline: false
        });
      }
    } else {
      embed.setColor(0xff6b6b);
      embed.addFields({
        name: '‚ùå Aucun canal trouv√©',
        value: 'Le syst√®me n\'a pas pu trouver de canal d\'alertes.\n\n' +
               '**Solutions possibles :**\n' +
               '‚Ä¢ Configurer avec `/config-verif admins canal-alertes:#votre-canal`\n' +
               '‚Ä¢ Cr√©er un canal nomm√© "s√©curit√©", "alertes" ou "logs"\n' +
               '‚Ä¢ Configurer les logs g√©n√©raux avec `/config-logs`',
        inline: false
      });
    }

    return interaction.editReply({ embeds: [embed] });
  },

  async testAlert(interaction) {
    const member = interaction.options.getMember('membre') || interaction.member;
    
    await interaction.deferReply({ ephemeral: true });

    // Cr√©er des donn√©es de test
    const testSecurityAnalysis = {
      riskScore: 45,
      flags: ['üÜï Compte r√©cent', '‚ö†Ô∏è Aucun avatar personnalis√©'],
      recommendations: ['üëÄ Surveiller l\'activit√©', 'üîç V√©rifier l\'authenticit√©']
    };

    const testDetails = {
      totalScore: 45,
      raidCheck: { isRaidSuspect: false, reasons: [] },
      multiAccountCheck: { totalSuspects: 0, confidence: 15 }
    };

    // Utiliser la m√©thode du bot principal
    const bot = interaction.client;
    
    try {
      await bot.sendSecurityAlert(member, testSecurityAnalysis, testDetails);
      
      return interaction.editReply({
        content: `‚úÖ **Alerte de test envoy√©e !**\n\n` +
                 `**Membre test√© :** ${member.user.tag}\n` +
                 `**Score simul√© :** ${testDetails.totalScore}/100\n\n` +
                 `V√©rifiez le canal d'alertes pour voir le message.`,
        ephemeral: true
      });
    } catch (error) {
      return interaction.editReply({
        content: `‚ùå **Erreur lors de l'envoi de l'alerte de test**\n\n` +
                 `**Erreur :** ${error.message}\n\n` +
                 `V√©rifiez la configuration avec \`/test-verif config\``,
        ephemeral: true
      });
    }
  },

  async testQuarantine(interaction) {
    const member = interaction.options.getMember('membre') || interaction.member;
    
    if (member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({
        content: '‚ùå Impossible de tester la quarantaine sur un administrateur. Utilisez un membre normal.',
        ephemeral: true
      });
    }

    await interaction.deferReply({ ephemeral: true });

    try {
      // Cr√©er des donn√©es de test pour la quarantaine
      const testDetails = {
        reason: 'Test du syst√®me de quarantaine',
        score: 75,
        manual: true,
        tester: interaction.user.id
      };

      // Utiliser le syst√®me de quarantaine du bot principal
      const bot = interaction.client;
      
      // Informer l'utilisateur du d√©but du test
      await interaction.editReply({
        content: `üß™ **Test de quarantaine en cours...**\n\n` +
                 `**Membre test√© :** ${member.user.tag}\n` +
                 `**√âtape 1/3 :** Cr√©ation des canaux de quarantaine...\n\n` +
                 `‚ö†Ô∏è **Attention :** Ce test va temporairement isoler le membre. ` +
                 `Il sera automatiquement lib√©r√© dans 30 secondes.`
      });

      // V√©rifier que la m√©thode est disponible avant de l'appeler
      console.log('üîç V√©rification de bot.quarantineMember:', typeof bot.quarantineMember);
      
      if (typeof bot.quarantineMember !== 'function') {
        throw new Error(`La m√©thode quarantineMember n'est pas disponible (type: ${typeof bot.quarantineMember})`);
      }
      
      // Appliquer la quarantaine de test
      await bot.quarantineMember(member, 'TEST', testDetails);

      // Attendre un moment pour que tout se mette en place
      await new Promise(resolve => setTimeout(resolve, 2000));

      // V√©rifier que les canaux ont √©t√© cr√©√©s
      const quarantineInfo = await bot.getQuarantineInfo(member);
      
      let testResult = `‚úÖ **Test de quarantaine r√©ussi !**\n\n`;
      testResult += `**Membre test√© :** ${member.user.tag}\n`;
      testResult += `**√âtapes accomplies :**\n`;
      testResult += `‚Ä¢ ‚úÖ R√¥le de quarantaine appliqu√©\n`;
      
      if (quarantineInfo && quarantineInfo.textChannelId) {
        testResult += `‚Ä¢ ‚úÖ Canal texte cr√©√© : <#${quarantineInfo.textChannelId}>\n`;
      }
      
      if (quarantineInfo && quarantineInfo.voiceChannelId) {
        testResult += `‚Ä¢ ‚úÖ Canal vocal cr√©√© : <#${quarantineInfo.voiceChannelId}>\n`;
      }
      
      testResult += `‚Ä¢ ‚úÖ Permissions configur√©es\n`;
      testResult += `‚Ä¢ ‚úÖ Message de bienvenue envoy√©\n`;
      testResult += `‚Ä¢ ‚úÖ Notification admin envoy√©e\n\n`;
      testResult += `üîÑ **Lib√©ration automatique dans 30 secondes...**`;

      await interaction.editReply({ content: testResult });

      // Attendre 30 secondes puis lib√©rer automatiquement
      setTimeout(async () => {
        try {
          await bot.grantAccess(member, 'Fin du test automatique');
          
          // Notifier que le test est termin√©
          try {
            await interaction.followUp({
              content: `üéâ **Test termin√© !**\n\n` +
                       `${member.user.tag} a √©t√© automatiquement lib√©r√© de la quarantaine de test.\n` +
                       `Tous les canaux ont √©t√© nettoy√©s et l'acc√®s a √©t√© restaur√©.`,
              ephemeral: true
            });
          } catch {}
        } catch (error) {
          console.error('Erreur lib√©ration automatique test:', error);
          try {
            await interaction.followUp({
              content: `‚ö†Ô∏è **Erreur lors de la lib√©ration automatique**\n\n` +
                       `Veuillez lib√©rer manuellement ${member.user.tag} avec :\n` +
                       `\`/quarantaine liberer membre:${member.user.tag} raison:Fin du test\``,
              ephemeral: true
            });
          } catch {}
        }
      }, 30000);

    } catch (error) {
      console.error('Erreur test quarantaine:', error);
      return interaction.editReply({
        content: `‚ùå **Erreur lors du test de quarantaine**\n\n` +
                 `**Erreur :** ${error.message}\n\n` +
                 `V√©rifiez que le bot a les permissions n√©cessaires :\n` +
                 `‚Ä¢ G√©rer les r√¥les\n` +
                 `‚Ä¢ G√©rer les canaux\n` +
                 `‚Ä¢ G√©rer les permissions`
      });
    }
  }
};