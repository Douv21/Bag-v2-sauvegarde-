const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('arc-en-ciel')
        .setDescription('Cr√©er ou supprimer un r√¥le arc-en-ciel (Admin uniquement)')
        .addSubcommand(subcommand =>
            subcommand
                .setName('creer')
                .setDescription('Cr√©er un r√¥le arc-en-ciel')
                .addStringOption(option =>
                    option.setName('nom')
                        .setDescription('Nom du r√¥le arc-en-ciel')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('supprimer')
                .setDescription('Supprimer un r√¥le arc-en-ciel')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('R√¥le arc-en-ciel √† supprimer')
                        .setRequired(true)
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .setDMPermission(false),

    async execute(interaction) {
        try {
            // V√©rification permissions admin
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return interaction.reply({
                    content: '‚ùå Vous devez √™tre administrateur pour utiliser cette commande.',
                    flags: 64
                });
            }

            const subcommand = interaction.options.getSubcommand();

            if (subcommand === 'creer') {
                const roleName = interaction.options.getString('nom');
                
                await interaction.deferReply({ flags: 64 });

                try {
                    // Cr√©er le r√¥le avec une couleur de base
                    const role = await interaction.guild.roles.create({
                        name: roleName,
                        color: '#FF0000', // Rouge initial
                        permissions: [],
                        reason: `R√¥le arc-en-ciel cr√©√© par ${interaction.user.tag}`
                    });

                    console.log(`üåà R√¥le arc-en-ciel cr√©√©: ${roleName} (${role.id})`);

                    // D√©marrer l'animation arc-en-ciel
                    this.startRainbowAnimation(role);

                    await interaction.editReply({
                        content: `‚úÖ R√¥le arc-en-ciel **${roleName}** cr√©√© avec succ√®s !\nüåà Animation d√©marr√©e...`
                    });

                } catch (error) {
                    console.error('‚ùå Erreur cr√©ation r√¥le:', error);
                    await interaction.editReply({
                        content: `‚ùå Erreur lors de la cr√©ation du r√¥le: ${error.message}`
                    });
                }

            } else if (subcommand === 'supprimer') {
                const role = interaction.options.getRole('role');
                
                await interaction.deferReply({ flags: 64 });

                try {
                    // Arr√™ter l'animation si elle existe
                    this.stopRainbowAnimation(role.id);

                    // Supprimer le r√¥le
                    await role.delete(`Suppression demand√©e par ${interaction.user.tag}`);

                    console.log(`üóëÔ∏è R√¥le arc-en-ciel supprim√©: ${role.name} (${role.id})`);

                    await interaction.editReply({
                        content: `‚úÖ R√¥le arc-en-ciel **${role.name}** supprim√© avec succ√®s !`
                    });

                } catch (error) {
                    console.error('‚ùå Erreur suppression r√¥le:', error);
                    await interaction.editReply({
                        content: `‚ùå Erreur lors de la suppression du r√¥le: ${error.message}`
                    });
                }
            }

        } catch (error) {
            console.error('‚ùå Erreur arc-en-ciel:', error);
            
            if (interaction.deferred) {
                await interaction.editReply({
                    content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.'
                });
            } else {
                await interaction.reply({
                    content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.',
                    flags: 64
                });
            }
        }
    },

    // Animations arc-en-ciel actives
    rainbowAnimations: new Map(),

    startRainbowAnimation(role) {
        // Arr√™ter animation existante si elle existe
        this.stopRainbowAnimation(role.id);

        // Couleurs arc-en-ciel
        const rainbowColors = [
            '#FF0000', // Rouge
            '#FF7F00', // Orange
            '#FFFF00', // Jaune
            '#00FF00', // Vert
            '#0000FF', // Bleu
            '#4B0082', // Indigo
            '#9400D3'  // Violet
        ];

        let colorIndex = 0;

        const animation = setInterval(async () => {
            try {
                if (!role.guild) {
                    // Le r√¥le a √©t√© supprim√©
                    this.stopRainbowAnimation(role.id);
                    return;
                }

                await role.setColor(rainbowColors[colorIndex], 'Animation arc-en-ciel');
                colorIndex = (colorIndex + 1) % rainbowColors.length;
                
            } catch (error) {
                console.error(`‚ùå Erreur animation arc-en-ciel pour ${role.name}:`, error);
                // Arr√™ter l'animation en cas d'erreur
                this.stopRainbowAnimation(role.id);
            }
        }, 3000); // Changement toutes les 3 secondes

        // Sauvegarder la r√©f√©rence de l'animation
        this.rainbowAnimations.set(role.id, animation);

        console.log(`üåà Animation arc-en-ciel d√©marr√©e pour ${role.name} (${role.id})`);
    },

    stopRainbowAnimation(roleId) {
        const animation = this.rainbowAnimations.get(roleId);
        if (animation) {
            clearInterval(animation);
            this.rainbowAnimations.delete(roleId);
            console.log(`üõë Animation arc-en-ciel arr√™t√©e pour r√¥le ${roleId}`);
        }
    },

    // Arr√™ter toutes les animations au d√©marrage (nettoyage)
    stopAllAnimations() {
        for (const [roleId, animation] of this.rainbowAnimations) {
            clearInterval(animation);
        }
        this.rainbowAnimations.clear();
        console.log('üßπ Toutes les animations arc-en-ciel arr√™t√©es');
    }
};