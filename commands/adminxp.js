const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const levelManager = require('../utils/levelManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('adminxp')
        .setDescription('G√©rer l\'XP et les niveaux des membres (Admin uniquement)')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .addUserOption(option =>
            option.setName('membre')
                .setDescription('Le membre √† modifier')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('action')
                .setDescription('Action √† effectuer')
                .setRequired(true)
                .addChoices(
                    { name: '‚ûï Ajouter XP', value: 'add_xp' },
                    { name: '‚ûñ Retirer XP', value: 'remove_xp' },
                    { name: 'üìà Ajouter Niveaux', value: 'add_levels' },
                    { name: 'üìâ Retirer Niveaux', value: 'remove_levels' },
                    { name: 'üéØ D√©finir XP', value: 'set_xp' },
                    { name: 'üéØ D√©finir Niveau', value: 'set_level' }
                ))
        .addIntegerOption(option =>
            option.setName('montant')
                .setDescription('Montant d\'XP ou nombre de niveaux (optionnel)')
                .setRequired(false)
                .setMinValue(1)
                .setMaxValue(999999)),

    async execute(interaction) {
        try {
            await interaction.deferReply({ flags: 64 });

            const targetUser = interaction.options.getUser('membre');
            const action = interaction.options.getString('action');
            let amount = interaction.options.getInteger('montant');

            // Valeurs par d√©faut si pas de montant sp√©cifi√©
            if (!amount) {
                switch (action) {
                    case 'add_xp':
                    case 'remove_xp':
                    case 'set_xp':
                        amount = 100; // XP par d√©faut
                        break;
                    case 'add_levels':
                    case 'remove_levels':
                    case 'set_level':
                        amount = 1; // Niveau par d√©faut
                        break;
                }
            }

            const guildId = interaction.guild.id;
            const currentLevel = levelManager.getUserLevel(targetUser.id, guildId);
            let newXP = currentLevel.xp || currentLevel.totalXP || 0;
            let newLevel = currentLevel.level;
            let actionText = '';

            switch (action) {
                case 'add_xp':
                    newXP += amount;
                    actionText = `‚ûï Ajout√© ${amount.toLocaleString()} XP`;
                    break;
                case 'remove_xp':
                    newXP = Math.max(0, newXP - amount);
                    actionText = `‚ûñ Retir√© ${amount.toLocaleString()} XP`;
                    break;
                case 'set_xp':
                    newXP = amount;
                    actionText = `üéØ XP d√©fini √† ${amount.toLocaleString()}`;
                    break;
                case 'add_levels':
                    // Calculer l'XP n√©cessaire pour ajouter des niveaux
                    for (let i = 0; i < amount; i++) {
                        const nextLevelXP = levelManager.getXPForLevel(newLevel + 1);
                        newXP = nextLevelXP;
                        newLevel++;
                    }
                    actionText = `üìà Ajout√© ${amount} niveau(x)`;
                    break;
                case 'remove_levels':
                    // Retirer des niveaux
                    newLevel = Math.max(1, newLevel - amount);
                    newXP = levelManager.getXPForLevel(newLevel);
                    actionText = `üìâ Retir√© ${amount} niveau(x)`;
                    break;
                case 'set_level':
                    newLevel = amount;
                    newXP = levelManager.getXPForLevel(newLevel);
                    actionText = `üéØ Niveau d√©fini √† ${amount}`;
                    break;
            }

            // Mettre √† jour l'XP dans le syst√®me
            levelManager.setUserXP(targetUser.id, guildId, newXP);
            
            // Recalculer le niveau apr√®s modification
            const updatedLevel = levelManager.getUserLevel(targetUser.id, guildId);

            const embed = {
                title: '‚öôÔ∏è Administration XP',
                color: 0x00ff00,
                fields: [
                    {
                        name: 'üë§ Membre',
                        value: `${targetUser.displayName} (${targetUser.tag})`,
                        inline: true
                    },
                    {
                        name: 'üîß Action',
                        value: actionText,
                        inline: true
                    },
                    {
                        name: 'üìä Avant',
                        value: `Niveau ${currentLevel.level}\n${(currentLevel.xp || currentLevel.totalXP || 0).toLocaleString()} XP`,
                        inline: true
                    },
                    {
                        name: 'üìà Apr√®s',
                        value: `Niveau ${updatedLevel.level}\n${(updatedLevel.xp || updatedLevel.totalXP || 0).toLocaleString()} XP`,
                        inline: true
                    },
                    {
                        name: 'üéØ Progression',
                        value: `${(updatedLevel.currentXP || 0).toLocaleString()} / ${(updatedLevel.neededXP || 1000).toLocaleString()} XP`,
                        inline: true
                    }
                ],
                footer: {
                    text: `Admin: ${interaction.user.displayName}`,
                    icon_url: interaction.user.displayAvatarURL()
                },
                timestamp: new Date().toISOString()
            };

            await interaction.editReply({ embeds: [embed] });

            console.log(`‚öôÔ∏è Admin XP: ${interaction.user.displayName} a ${actionText.toLowerCase()} √† ${targetUser.displayName}`);

        } catch (error) {
            console.error('Erreur adminxp:', error);
            await interaction.editReply({
                content: '‚ùå **Erreur lors de la modification de l\'XP**\n\nVeuillez r√©essayer plus tard.'
            });
        }
    }
};