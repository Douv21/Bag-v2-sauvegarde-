const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('config-moderation')
    .setDescription('Configurer s√©par√©ment: autokick sans r√¥le OU autokick inactivit√©')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator.toString()),

  cooldown: 2,

  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({ content: '‚ùå R√©serv√© aux administrateurs.', ephemeral: true });
    }

    const guild = interaction.guild;
    const mod = interaction.client.moderationManager;
    const cfg = await mod.getGuildConfig(guild.id);

    const embed = new EmbedBuilder()
      .setTitle('üõ°Ô∏è Configuration Mod√©ration')
      .setColor('#e91e63')
      .setDescription('Choisissez une fonctionnalit√© √† configurer: Autokick sans r√¥le OU Autokick inactivit√©');

    const featureSelect = new StringSelectMenuBuilder()
      .setCustomId('moderation_feature_select')
      .setPlaceholder('Choisir la fonctionnalit√© √† configurer')
      .addOptions([
        { label: 'Autokick sans r√¥le', value: 'feature_role', description: 'Kick si le r√¥le requis n\'est pas obtenu apr√®s un d√©lai' },
        { label: 'Autokick inactivit√©', value: 'feature_inactivity', description: 'Kick apr√®s une p√©riode d\'inactivit√©' }
      ]);

    const row = new ActionRowBuilder().addComponents(featureSelect);

    return interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
  }
};