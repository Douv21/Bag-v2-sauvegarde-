const { 
    SlashCommandBuilder, 
    EmbedBuilder, 
    ActionRowBuilder, 
    StringSelectMenuBuilder, 
    ButtonBuilder, 
    ButtonStyle,
    PermissionFlagsBits,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle
} = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('role')
        .setDescription('üé≠ Syst√®me complet de gestion des r√¥les personnalis√©s')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('üìã Afficher tous les r√¥les disponibles')
                .addStringOption(option =>
                    option.setName('categorie')
                        .setDescription('Filtrer par cat√©gorie')
                        .setRequired(false)
                        .addChoices(
                            { name: 'üé® Couleurs', value: 'couleurs' },
                            { name: 'üéÆ Hobbies', value: 'hobbies' },
                            { name: 'üîî Notifications', value: 'notifications' },
                            { name: 'üåç R√©gion', value: 'region' }
                        )
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('get')
                .setDescription('‚úÖ Obtenir un r√¥le')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Le r√¥le √† obtenir')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('‚ùå Retirer un r√¥le')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Le r√¥le √† retirer')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('mes-roles')
                .setDescription('üë§ Voir vos r√¥les personnalis√©s')
                .addUserOption(option =>
                    option.setName('utilisateur')
                        .setDescription('Utilisateur √† v√©rifier (optionnel)')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('create')
                .setDescription('üÜï Cr√©er un nouveau r√¥le (Admin)')
                .addStringOption(option =>
                    option.setName('nom')
                        .setDescription('Nom du r√¥le')
                        .setRequired(true)
                        .setMaxLength(32)
                )
                .addStringOption(option =>
                    option.setName('categorie')
                        .setDescription('Cat√©gorie du r√¥le')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üé® Couleurs', value: 'couleurs' },
                            { name: 'üéÆ Hobbies', value: 'hobbies' },
                            { name: 'üîî Notifications', value: 'notifications' },
                            { name: 'üåç R√©gion', value: 'region' }
                        )
                )
                .addStringOption(option =>
                    option.setName('couleur')
                        .setDescription('Couleur du r√¥le (hex, ex: #FF5733)')
                        .setRequired(false)
                )
                .addStringOption(option =>
                    option.setName('emoji')
                        .setDescription('Emoji pour le r√¥le')
                        .setRequired(false)
                )
                .addStringOption(option =>
                    option.setName('description')
                        .setDescription('Description du r√¥le')
                        .setRequired(false)
                        .setMaxLength(100)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('delete')
                .setDescription('üóëÔ∏è Supprimer un r√¥le (Admin)')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Le r√¥le √† supprimer')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('panel')
                .setDescription('üéõÔ∏è Panneau interactif de s√©lection des r√¥les')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('config')
                .setDescription('‚öôÔ∏è Configuration du syst√®me de r√¥les (Admin)')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('category')
                .setDescription('üìÅ G√©rer les cat√©gories de r√¥les (Admin)')
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('Action √† effectuer')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Cr√©er', value: 'create' },
                            { name: 'Modifier', value: 'edit' },
                            { name: 'Supprimer', value: 'delete' }
                        )
                )
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID de la cat√©gorie')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('üöÄ Initialiser le syst√®me avec des r√¥les pr√©d√©finis (Admin)')
                .addBooleanOption(option =>
                    option.setName('force')
                        .setDescription('Forcer la cr√©ation m√™me si des r√¥les existent d√©j√†')
                        .setRequired(false)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('gradient')
                .setDescription('üåà Installer des r√¥les uniques avec d√©grad√©s (Admin)')
                .addBooleanOption(option =>
                    option.setName('force')
                        .setDescription('Forcer la cr√©ation m√™me si des r√¥les existent d√©j√†')
                        .setRequired(false)
                )
        ),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();
        const roleManager = interaction.client.roleManager;
        
        if (!roleManager) {
            return await interaction.reply({
                content: '‚ùå Le syst√®me de r√¥les n\'est pas disponible.',
                ephemeral: true
            });
        }

        try {
            switch (subcommand) {
                case 'list':
                    await this.handleList(interaction, roleManager);
                    break;
                case 'get':
                    await this.handleGet(interaction, roleManager);
                    break;
                case 'remove':
                    await this.handleRemove(interaction, roleManager);
                    break;
                case 'mes-roles':
                    await this.handleMyRoles(interaction, roleManager);
                    break;
                case 'create':
                    await this.handleCreate(interaction, roleManager);
                    break;
                case 'delete':
                    await this.handleDelete(interaction, roleManager);
                    break;
                case 'panel':
                    await this.handlePanel(interaction, roleManager);
                    break;
                case 'config':
                    await this.handleConfig(interaction, roleManager);
                    break;
                case 'category':
                    await this.handleCategory(interaction, roleManager);
                    break;
                case 'setup':
                    await this.handleSetup(interaction, roleManager);
                    break;
                case 'gradient':
                    await this.handleGradient(interaction, roleManager);
                    break;
                default:
                    await interaction.reply({
                        content: '‚ùå Sous-commande non reconnue.',
                        ephemeral: true
                    });
            }
        } catch (error) {
            console.error('Erreur commande role:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Erreur')
                .setDescription('Une erreur s\'est produite lors de l\'ex√©cution de la commande.')
                .setTimestamp();

            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },

    async handleList(interaction, roleManager) {
        const category = interaction.options.getString('categorie');
        const embed = roleManager.generateRoleListEmbed(interaction.guild, category);
        
        if (!embed) {
            return await interaction.reply({
                content: '‚ùå Cat√©gorie introuvable.',
                ephemeral: true
            });
        }

        await interaction.reply({ embeds: [embed] });
    },

    async handleGet(interaction, roleManager) {
        const role = interaction.options.getRole('role');
        const member = interaction.member;

        // V√©rifier si c'est un r√¥le g√©r√© par le syst√®me
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        if (!roles.roles[role.id]) {
            return await interaction.reply({
                content: '‚ùå Ce r√¥le n\'est pas g√©r√© par le syst√®me de r√¥les personnalis√©s.',
                ephemeral: true
            });
        }

        // V√©rifier si l'utilisateur a d√©j√† ce r√¥le
        if (member.roles.cache.has(role.id)) {
            return await interaction.reply({
                content: `‚ùå Vous avez d√©j√† le r√¥le **${role.name}**.`,
                ephemeral: true
            });
        }

        const result = await roleManager.assignRole(member, role.id);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('‚úÖ R√¥le Attribu√©')
                .setDescription(`Vous avez re√ßu le r√¥le **${result.role.name}** !`)
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed], ephemeral: true });
        } else {
            await interaction.reply({
                content: `‚ùå Erreur: ${result.error}`,
                ephemeral: true
            });
        }
    },

    async handleRemove(interaction, roleManager) {
        const role = interaction.options.getRole('role');
        const member = interaction.member;

        // V√©rifier si c'est un r√¥le g√©r√© par le syst√®me
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        if (!roles.roles[role.id]) {
            return await interaction.reply({
                content: '‚ùå Ce r√¥le n\'est pas g√©r√© par le syst√®me de r√¥les personnalis√©s.',
                ephemeral: true
            });
        }

        const result = await roleManager.removeRole(member, role.id);
        
        if (result.success) {
            const embed = new EmbedBuilder()
                .setColor('#FF6600')
                .setTitle('‚úÖ R√¥le Retir√©')
                .setDescription(`Le r√¥le **${result.role.name}** vous a √©t√© retir√©.`)
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed], ephemeral: true });
        } else {
            await interaction.reply({
                content: `‚ùå Erreur: ${result.error}`,
                ephemeral: true
            });
        }
    },

    async handleMyRoles(interaction, roleManager) {
        const targetUser = interaction.options.getUser('utilisateur') || interaction.user;
        const targetMember = await interaction.guild.members.fetch(targetUser.id);
        
        const embed = roleManager.generateUserRolesEmbed(targetMember);
        await interaction.reply({ embeds: [embed] });
    },

    async handleCreate(interaction, roleManager) {
        // V√©rifier les permissions
        if (!roleManager.canCreateRoles(interaction.member, interaction.guild.id)) {
            return await interaction.reply({
                content: '‚ùå Vous n\'avez pas la permission de cr√©er des r√¥les.',
                ephemeral: true
            });
        }

        const name = interaction.options.getString('nom');
        const category = interaction.options.getString('categorie');
        const color = interaction.options.getString('couleur');
        const emoji = interaction.options.getString('emoji');
        const description = interaction.options.getString('description');

        // Valider la couleur si fournie
        if (color && !/^#[0-9A-Fa-f]{6}$/.test(color)) {
            return await interaction.reply({
                content: '‚ùå Format de couleur invalide. Utilisez le format hex: #FF5733',
                ephemeral: true
            });
        }

        await interaction.deferReply();

        const result = await roleManager.createCustomRole(interaction.guild, {
            name,
            category,
            color,
            emoji,
            description,
            mentionable: false
        });

        if (result.success) {
            const embed = new EmbedBuilder()
                .setColor(color || '#5865F2')
                .setTitle('‚úÖ R√¥le Cr√©√©')
                .setDescription(`Le r√¥le **${result.role.name}** a √©t√© cr√©√© avec succ√®s !`)
                .addFields(
                    { name: 'Cat√©gorie', value: category, inline: true },
                    { name: 'ID', value: result.role.id, inline: true }
                )
                .setTimestamp();
            
            await interaction.editReply({ embeds: [embed] });
        } else {
            await interaction.editReply({
                content: `‚ùå Erreur lors de la cr√©ation: ${result.error}`
            });
        }
    },

    async handleDelete(interaction, roleManager) {
        // V√©rifier les permissions
        if (!roleManager.canCreateRoles(interaction.member, interaction.guild.id)) {
            return await interaction.reply({
                content: '‚ùå Vous n\'avez pas la permission de supprimer des r√¥les.',
                ephemeral: true
            });
        }

        const role = interaction.options.getRole('role');
        
        // V√©rifier si c'est un r√¥le g√©r√© par le syst√®me
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        if (!roles.roles[role.id]) {
            return await interaction.reply({
                content: '‚ùå Ce r√¥le n\'est pas g√©r√© par le syst√®me de r√¥les personnalis√©s.',
                ephemeral: true
            });
        }

        // Confirmation
        const confirmEmbed = new EmbedBuilder()
            .setColor('#FF6600')
            .setTitle('‚ö†Ô∏è Confirmation de Suppression')
            .setDescription(`√ätes-vous s√ªr de vouloir supprimer le r√¥le **${role.name}** ?\n\nCette action est irr√©versible et retirera le r√¥le √† tous les membres qui l'ont.`);

        const confirmRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`confirm_delete_role_${role.id}`)
                    .setLabel('Confirmer')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('cancel_delete_role')
                    .setLabel('Annuler')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [confirmEmbed],
            components: [confirmRow],
            ephemeral: true
        });
    },

    async handlePanel(interaction, roleManager) {
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('üé≠ Panneau de R√¥les Interactif')
            .setDescription('S√©lectionnez une cat√©gorie pour voir les r√¥les disponibles !')
            .setTimestamp();

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('role_category_select')
            .setPlaceholder('Choisissez une cat√©gorie...')
            .addOptions(
                Object.entries(roles.categories).map(([id, category]) => ({
                    label: category.name.replace(/^\p{Emoji}\s*/u, ''),
                    value: id,
                    description: category.description.substring(0, 100),
                    emoji: category.name.match(/^\p{Emoji}/u)?.[0]
                }))
            );

        const row = new ActionRowBuilder().addComponents(selectMenu);
        
        await interaction.reply({
            embeds: [embed],
            components: [row]
        });
    },

    async handleConfig(interaction, roleManager) {
        // V√©rifier les permissions admin
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return await interaction.reply({
                content: '‚ùå Vous devez avoir la permission "G√©rer les r√¥les" pour acc√©der √† la configuration.',
                ephemeral: true
            });
        }

        const { permissions } = roleManager.getRoleData(interaction.guild.id);
        
        const embed = new EmbedBuilder()
            .setColor('#5865F2')
            .setTitle('‚öôÔ∏è Configuration du Syst√®me de R√¥les')
            .addFields(
                { 
                    name: 'Limite de r√¥les par utilisateur', 
                    value: permissions.maxRolesPerUser.toString(), 
                    inline: true 
                },
                { 
                    name: 'Couleurs autoris√©es', 
                    value: permissions.allowedColors.length.toString(), 
                    inline: true 
                }
            )
            .setTimestamp();

        const configRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_max_roles')
                    .setLabel('Limite R√¥les')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_colors')
                    .setLabel('Couleurs')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_permissions')
                    .setLabel('Permissions')
                    .setStyle(ButtonStyle.Success)
            );

        await interaction.reply({
            embeds: [embed],
            components: [configRow],
            ephemeral: true
        });
    },

    async handleCategory(interaction, roleManager) {
        // V√©rifier les permissions admin
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return await interaction.reply({
                content: '‚ùå Vous devez avoir la permission "G√©rer les r√¥les" pour g√©rer les cat√©gories.',
                ephemeral: true
            });
        }

        const action = interaction.options.getString('action');
        const categoryId = interaction.options.getString('id');

        switch (action) {
            case 'create':
                // Ouvrir un modal pour cr√©er une cat√©gorie
                const createModal = new ModalBuilder()
                    .setCustomId(`create_category_${categoryId}`)
                    .setTitle('Cr√©er une Cat√©gorie');

                const nameInput = new TextInputBuilder()
                    .setCustomId('category_name')
                    .setLabel('Nom de la cat√©gorie')
                    .setStyle(TextInputStyle.Short)
                    .setMaxLength(50)
                    .setRequired(true);

                const descInput = new TextInputBuilder()
                    .setCustomId('category_description')
                    .setLabel('Description')
                    .setStyle(TextInputStyle.Paragraph)
                    .setMaxLength(200)
                    .setRequired(true);

                const exclusiveInput = new TextInputBuilder()
                    .setCustomId('category_exclusive')
                    .setLabel('Exclusif ? (oui/non)')
                    .setStyle(TextInputStyle.Short)
                    .setMaxLength(3)
                    .setValue('non')
                    .setRequired(true);

                createModal.addComponents(
                    new ActionRowBuilder().addComponents(nameInput),
                    new ActionRowBuilder().addComponents(descInput),
                    new ActionRowBuilder().addComponents(exclusiveInput)
                );

                await interaction.showModal(createModal);
                break;

            default:
                await interaction.reply({
                    content: '‚ùå Action non impl√©ment√©e.',
                    ephemeral: true
                });
        }
    },

    async handleSetup(interaction, roleManager) {
        // V√©rifier les permissions admin
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return await interaction.reply({
                content: '‚ùå Vous devez avoir la permission "G√©rer les r√¥les" pour initialiser le syst√®me.',
                ephemeral: true
            });
        }

        const force = interaction.options.getBoolean('force') || false;
        
        // V√©rifier si des r√¥les existent d√©j√†
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        const existingRoles = Object.keys(roles.roles).length;
        
        if (existingRoles > 0 && !force) {
            const embed = new EmbedBuilder()
                .setColor('#FF6600')
                .setTitle('‚ö†Ô∏è R√¥les Existants D√©tect√©s')
                .setDescription(`Ce serveur a d√©j√† **${existingRoles}** r√¥le(s) personnalis√©(s).\n\nUtilisez \`force: true\` pour cr√©er les r√¥les pr√©d√©finis en plus des existants.`)
                .addFields({
                    name: 'R√¥les pr√©d√©finis disponibles',
                    value: '‚Ä¢ üé® **Couleurs** (8 r√¥les)\n‚Ä¢ üéÆ **Hobbies** (10 r√¥les)\n‚Ä¢ üîî **Notifications** (5 r√¥les)\n‚Ä¢ üåç **R√©gion** (8 r√¥les)\n‚Ä¢ ‚≠ê **Niveau** (4 r√¥les)\n‚Ä¢ ‚ú® **Sp√©ciaux** (5 r√¥les)',
                    inline: false
                })
                .setTimestamp();

            return await interaction.reply({ embeds: [embed], ephemeral: true });
        }

        await interaction.deferReply();

        // Importer et cr√©er les r√¥les par d√©faut
        const { createDefaultRoles } = require('../utils/defaultRoles');
        
        try {
            const results = await createDefaultRoles(interaction.guild, roleManager);
            
            const embed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('üöÄ Initialisation Termin√©e !')
                .setDescription(`Le syst√®me de r√¥les a √©t√© initialis√© avec succ√®s !`)
                .addFields(
                    { name: '‚úÖ R√¥les cr√©√©s', value: results.success.toString(), inline: true },
                    { name: '‚ùå Erreurs', value: results.errors.toString(), inline: true },
                    { name: 'üìä Total', value: (results.success + results.errors).toString(), inline: true }
                )
                .setTimestamp();

            // Ajouter les d√©tails si il y a des erreurs
            if (results.errors > 0) {
                const errorDetails = results.details
                    .filter(detail => detail.startsWith('‚ùå'))
                    .slice(0, 10) // Limiter l'affichage
                    .join('\n');
                
                if (errorDetails) {
                    embed.addFields({
                        name: '‚ö†Ô∏è D√©tails des erreurs',
                        value: errorDetails,
                        inline: false
                    });
                }
            }

            embed.addFields({
                name: 'üé≠ Utilisation',
                value: '‚Ä¢ `/role panel` - Panneau interactif\n‚Ä¢ `/role list` - Voir tous les r√¥les\n‚Ä¢ `/role get` - Obtenir un r√¥le\n‚Ä¢ `/role mes-roles` - Voir vos r√¥les',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            console.error('Erreur setup r√¥les:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Erreur d\'Initialisation')
                .setDescription(`Une erreur s'est produite lors de l'initialisation:\n\`\`\`${error.message}\`\`\``)
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    },

    async handleGradient(interaction, roleManager) {
        // V√©rifier les permissions admin
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
            return await interaction.reply({
                content: '‚ùå Vous devez avoir la permission "G√©rer les r√¥les" pour installer les r√¥les d√©grad√©s.',
                ephemeral: true
            });
        }

        const force = interaction.options.getBoolean('force') || false;
        
        // V√©rifier si des r√¥les existent d√©j√†
        const { roles } = roleManager.getRoleData(interaction.guild.id);
        const existingRoles = Object.keys(roles.roles).length;
        
        if (existingRoles > 0 && !force) {
            const { getGradientRolesStats } = require('../utils/gradientRoles');
            const stats = getGradientRolesStats();
            
            const embed = new EmbedBuilder()
                .setColor('#FF6600')
                .setTitle('‚ö†Ô∏è R√¥les Existants D√©tect√©s')
                .setDescription(`Ce serveur a d√©j√† **${existingRoles}** r√¥le(s) personnalis√©(s).\n\nUtilisez \`force: true\` pour cr√©er les r√¥les d√©grad√©s en plus des existants.`)
                .addFields({
                    name: 'üåà R√¥les D√©grad√©s Disponibles',
                    value: `‚Ä¢ üíé **Premium** (6 r√¥les l√©gendaires)\n‚Ä¢ üåü **√âl√©ments Mystiques** (5 r√¥les √©piques)\n‚Ä¢ üåå **Entit√©s Cosmiques** (4 r√¥les mythiques)\n‚Ä¢ üí´ **Neon Dreams** (4 r√¥les n√©on)\n‚Ä¢ üåø **Forces Naturelles** (4 r√¥les nature)\n‚Ä¢ üêâ **Cr√©atures Mythiques** (4 r√¥les l√©gendaires)\n\n**Total: ${stats.totalRoles} r√¥les uniques avec d√©grad√©s**`,
                    inline: false
                })
                .setTimestamp();

            return await interaction.reply({ embeds: [embed], ephemeral: true });
        }

        await interaction.deferReply();

        // Importer et cr√©er les r√¥les d√©grad√©s
        const { createGradientRoles, getGradientRolesStats } = require('../utils/gradientRoles');
        
        try {
            const results = await createGradientRoles(interaction.guild, roleManager);
            const stats = getGradientRolesStats();
            
            const embed = new EmbedBuilder()
                .setColor('#7289DA')
                .setTitle('üåà R√¥les D√©grad√©s Install√©s !')
                .setDescription(`Collection exclusive de r√¥les avec des couleurs d√©grad√©es uniques !`)
                .addFields(
                    { name: '‚úÖ R√¥les cr√©√©s', value: results.success.toString(), inline: true },
                    { name: 'üìÅ Cat√©gories', value: results.categories.toString(), inline: true },
                    { name: '‚ùå Erreurs', value: results.errors.toString(), inline: true }
                )
                .setTimestamp();

            // Ajouter les statistiques de raret√©
            let rarityStats = '';
            const rarityOrder = ['mythic', 'legendary', 'epic', 'rare', 'common'];
            const rarityEmojis = {
                'mythic': '‚öúÔ∏è',
                'legendary': 'üåü',
                'epic': 'üíé',
                'rare': '‚ú®',
                'common': '‚ö™'
            };

            for (const rarity of rarityOrder) {
                if (stats.rarityCount[rarity]) {
                    rarityStats += `${rarityEmojis[rarity]} **${rarity.toUpperCase()}**: ${stats.rarityCount[rarity]}\n`;
                }
            }

            if (rarityStats) {
                embed.addFields({
                    name: 'üèÜ R√©partition par Raret√©',
                    value: rarityStats,
                    inline: false
                });
            }

            // Ajouter les d√©tails si il y a des erreurs
            if (results.errors > 0) {
                const errorDetails = results.details
                    .filter(detail => detail.startsWith('‚ùå'))
                    .slice(0, 5) // Limiter l'affichage
                    .join('\n');
                
                if (errorDetails) {
                    embed.addFields({
                        name: '‚ö†Ô∏è D√©tails des erreurs',
                        value: errorDetails,
                        inline: false
                    });
                }
            }

            embed.addFields({
                name: 'üé≠ Fonctionnalit√©s Sp√©ciales',
                value: 'üåà **D√©grad√©s de couleurs** - Chaque r√¥le a des couleurs uniques\n‚öúÔ∏è **Syst√®me de raret√©** - Mythique, L√©gendaire, √âpique, Rare\n‚ú¶ **Noms stylis√©s** - Caract√®res Unicode sp√©ciaux\nüé® **Descriptions enrichies** - Informations d√©taill√©es',
                inline: false
            });

            embed.addFields({
                name: 'üéÆ Utilisation',
                value: '‚Ä¢ `/role panel` - Interface interactive avec les nouveaux r√¥les\n‚Ä¢ `/role list` - Voir tous les r√¥les d√©grad√©s\n‚Ä¢ `/role mes-roles` - Affichage am√©lior√© avec raret√©',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            console.error('Erreur setup r√¥les d√©grad√©s:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå Erreur d\'Installation')
                .setDescription(`Une erreur s'est produite lors de l'installation des r√¥les d√©grad√©s:\n\`\`\`${error.message}\`\`\``)
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};