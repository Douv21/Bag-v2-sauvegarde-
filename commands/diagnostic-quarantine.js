// Diagnostic du syst√®me de quarantaine
const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('diagnostic-quarantine')
    .setDescription('Diagnostic complet du syst√®me de quarantaine')
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator.toString()),

  cooldown: 5,

  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({ 
        content: '‚ùå Vous devez √™tre administrateur pour utiliser cette commande.', 
        ephemeral: true 
      });
    }

    await interaction.deferReply({ ephemeral: true });

    try {
      const bot = interaction.client;
      let diagnostic = `üîç **Diagnostic du syst√®me de quarantaine**\n\n`;

      // Test 1: V√©rifier si les m√©thodes sont attach√©es
      diagnostic += `**1. M√©thodes attach√©es au client:**\n`;
      diagnostic += `‚Ä¢ quarantineMember: ${typeof bot.quarantineMember}\n`;
      diagnostic += `‚Ä¢ grantAccess: ${typeof bot.grantAccess}\n`;
      diagnostic += `‚Ä¢ getQuarantineInfo: ${typeof bot.getQuarantineInfo}\n`;
      diagnostic += `‚Ä¢ ensureQuarantineRole: ${typeof bot.ensureQuarantineRole}\n`;
      diagnostic += `‚Ä¢ createQuarantineChannels: ${typeof bot.createQuarantineChannels}\n\n`;

      // Test 2: V√©rifier les managers
      diagnostic += `**2. Managers disponibles:**\n`;
      diagnostic += `‚Ä¢ moderationManager: ${typeof bot.moderationManager}\n`;
      diagnostic += `‚Ä¢ dataManager: ${bot.dataManager ? 'object' : 'undefined'}\n`;
      diagnostic += `‚Ä¢ logManager: ${typeof bot.logManager}\n\n`;

      // Test 3: V√©rifier la configuration de s√©curit√©
      if (bot.moderationManager && typeof bot.moderationManager.getSecurityConfig === 'function') {
        try {
          const config = await bot.moderationManager.getSecurityConfig(interaction.guild.id);
          diagnostic += `**3. Configuration de s√©curit√©:**\n`;
          diagnostic += `‚Ä¢ Configuration trouv√©e: ‚úÖ\n`;
          diagnostic += `‚Ä¢ Quarantine activ√©e: ${config.accessControl?.enabled ? '‚úÖ' : '‚ùå'}\n`;
          diagnostic += `‚Ä¢ R√¥le quarantaine ID: ${config.accessControl?.quarantineRoleId || 'Non configur√©'}\n`;
          diagnostic += `‚Ä¢ Nom r√¥le quarantaine: ${config.accessControl?.quarantineRoleName || 'Quarantaine'}\n\n`;
        } catch (configError) {
          diagnostic += `**3. Configuration de s√©curit√©:**\n`;
          diagnostic += `‚Ä¢ ‚ùå Erreur: ${configError.message}\n\n`;
        }
      } else {
        diagnostic += `**3. Configuration de s√©curit√©:**\n`;
        diagnostic += `‚Ä¢ ‚ùå moderationManager.getSecurityConfig non disponible\n\n`;
      }

      // Test 4: Permissions du bot
      diagnostic += `**4. Permissions du bot:**\n`;
      const botMember = interaction.guild.members.cache.get(bot.user.id);
      if (botMember) {
        const perms = botMember.permissions;
        diagnostic += `‚Ä¢ G√©rer les r√¥les: ${perms.has('ManageRoles') ? '‚úÖ' : '‚ùå'}\n`;
        diagnostic += `‚Ä¢ G√©rer les canaux: ${perms.has('ManageChannels') ? '‚úÖ' : '‚ùå'}\n`;
        diagnostic += `‚Ä¢ G√©rer les permissions: ${perms.has('ManageRoles') ? '‚úÖ' : '‚ùå'}\n`;
      } else {
        diagnostic += `‚Ä¢ ‚ùå Impossible de r√©cup√©rer les permissions du bot\n`;
      }

      // Test 5: Test d'appel simple
      diagnostic += `\n**5. Test d'appel de m√©thode:**\n`;
      if (typeof bot.quarantineMember === 'function') {
        diagnostic += `‚Ä¢ ‚úÖ La m√©thode quarantineMember peut √™tre appel√©e\n`;
      } else {
        diagnostic += `‚Ä¢ ‚ùå La m√©thode quarantineMember n'est pas disponible\n`;
      }

      await interaction.editReply({ content: diagnostic });

    } catch (error) {
      console.error('Erreur diagnostic quarantaine:', error);
      await interaction.editReply({
        content: `‚ùå **Erreur lors du diagnostic:**\n\`\`\`\n${error.message}\n\`\`\``
      });
    }
  }
};