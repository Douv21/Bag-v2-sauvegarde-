const { SlashCommandBuilder, EmbedBuilder, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('comptage')
        .setDescription('üî¢ Configurer le syst√®me de comptage (Admin uniquement)')
        .addSubcommand(subcommand =>
            subcommand
                .setName('activer')
                .setDescription('Activer le syst√®me de comptage dans un canal')
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('Canal o√π activer le comptage')
                        .addChannelTypes(ChannelType.GuildText)
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('desactiver')
                .setDescription('D√©sactiver le syst√®me de comptage'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('reset')
                .setDescription('Remettre le compteur √† z√©ro'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('Voir les informations du syst√®me de comptage'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('config')
                .setDescription('Configurer les options du comptage')
                .addIntegerOption(option =>
                    option.setName('nombre')
                        .setDescription('Nombre √† partir duquel recommencer (d√©faut: 1)')
                        .setMinValue(0)
                        .setMaxValue(1000)
                        .setRequired(false))),

    async execute(interaction, dataManager) {
        try {
            const subcommand = interaction.options.getSubcommand();
            const guildId = interaction.guild.id;
            
            // V√©rifier les permissions admin
            if (!interaction.member.permissions.has('Administrator')) {
                return await interaction.reply({
                    content: '‚ùå Vous devez √™tre administrateur pour utiliser cette commande.',
                    flags: 64
                });
            }

            // Charger la configuration de comptage
            let countingConfig = await dataManager.getData('counting') || {};
            if (!countingConfig[guildId]) {
                countingConfig[guildId] = {
                    enabled: false,
                    channelId: null,
                    currentNumber: 1,
                    lastUserId: null,
                    startNumber: 1,
                    totalCounts: 0,
                    record: 0,
                    lastResetReason: null,
                    lastResetDate: null
                };
            }

            const config = countingConfig[guildId];
            const embed = new EmbedBuilder()
                .setColor('#00AAFF')
                .setFooter({ text: `Serveur: ${interaction.guild.name}` });

            switch (subcommand) {
                case 'activer':
                    const channel = interaction.options.getChannel('canal');
                    
                    config.enabled = true;
                    config.channelId = channel.id;
                    config.currentNumber = config.startNumber;
                    config.lastUserId = null;
                    
                    countingConfig[guildId] = config;
                    await dataManager.setData('counting', countingConfig);
                    
                    embed.setTitle('‚úÖ Syst√®me de Comptage Activ√©')
                        .setDescription(`Le syst√®me de comptage est maintenant actif dans ${channel}`)
                        .addFields([
                            { name: 'üìä Num√©ro actuel', value: config.currentNumber.toString(), inline: true },
                            { name: 'üéØ Num√©ro de d√©part', value: config.startNumber.toString(), inline: true },
                            { name: 'üìù R√®gles', value: '‚Ä¢ Compter dans l\'ordre\n‚Ä¢ Pas deux fois de suite\n‚Ä¢ Calculs math√©matiques accept√©s\n‚Ä¢ Reset si erreur ou doublon', inline: false }
                        ]);
                    
                    await interaction.reply({ embeds: [embed] });
                    
                    // Message d'instructions dans le canal
                    try {
                        await channel.send({
                            embeds: [new EmbedBuilder()
                                .setColor('#00FF00')
                                .setTitle('üî¢ Syst√®me de Comptage Activ√©!')
                                .setDescription(`Commencez √† compter √† partir de **${config.currentNumber}**`)
                                .addFields([
                                    { name: '‚úÖ Autoris√©', value: '‚Ä¢ Nombres simples: `1`, `2`, `3`\n‚Ä¢ Calculs: `2+1`, `4-1`, `2*2`, `8/2`\n‚Ä¢ Expressions: `(3*2)-1`', inline: true },
                                    { name: '‚ùå Interdit', value: '‚Ä¢ Compter deux fois de suite\n‚Ä¢ Sauter des num√©ros\n‚Ä¢ Texte avec les nombres\n‚Ä¢ Nombres incorrects', inline: true },
                                    { name: 'üîÑ Reset auto si', value: '‚Ä¢ Mauvais nombre\n‚Ä¢ M√™me personne deux fois\n‚Ä¢ Calcul incorrect\n‚Ä¢ Format invalide', inline: false }
                                ])]
                        });
                    } catch (error) {
                        console.error('Erreur envoi message comptage:', error);
                    }
                    break;

                case 'desactiver':
                    if (!config.enabled) {
                        return await interaction.reply({
                            content: '‚ùå Le syst√®me de comptage n\'est pas activ√© sur ce serveur.',
                            flags: 64
                        });
                    }
                    
                    config.enabled = false;
                    config.channelId = null;
                    countingConfig[guildId] = config;
                    await dataManager.setData('counting', countingConfig);
                    
                    embed.setTitle('üî¥ Syst√®me de Comptage D√©sactiv√©')
                        .setDescription('Le syst√®me de comptage a √©t√© d√©sactiv√© sur ce serveur.')
                        .addFields([
                            { name: 'üìä Dernier num√©ro atteint', value: (config.currentNumber - 1).toString(), inline: true },
                            { name: 'üèÜ Record du serveur', value: config.record.toString(), inline: true }
                        ]);
                    
                    await interaction.reply({ embeds: [embed] });
                    break;

                case 'reset':
                    if (!config.enabled) {
                        return await interaction.reply({
                            content: '‚ùå Le syst√®me de comptage n\'est pas activ√© sur ce serveur.',
                            flags: 64
                        });
                    }
                    
                    const previousNumber = config.currentNumber - 1;
                    if (previousNumber > config.record) {
                        config.record = previousNumber;
                    }
                    
                    config.currentNumber = config.startNumber;
                    config.lastUserId = null;
                    config.lastResetReason = 'Reset manuel par un administrateur';
                    config.lastResetDate = new Date().toISOString();
                    
                    countingConfig[guildId] = config;
                    await dataManager.setData('counting', countingConfig);
                    
                    embed.setTitle('üîÑ Comptage Remis √† Z√©ro')
                        .setDescription(`Le comptage a √©t√© remis √† z√©ro par un administrateur.`)
                        .addFields([
                            { name: 'üéØ Nouveau num√©ro', value: config.currentNumber.toString(), inline: true },
                            { name: 'üìä Ancien num√©ro', value: previousNumber.toString(), inline: true },
                            { name: 'üèÜ Record', value: config.record.toString(), inline: true }
                        ]);
                    
                    await interaction.reply({ embeds: [embed] });
                    
                    // Notification dans le canal de comptage
                    if (config.channelId) {
                        try {
                            const countingChannel = await interaction.guild.channels.fetch(config.channelId);
                            await countingChannel.send({
                                embeds: [new EmbedBuilder()
                                    .setColor('#FFA500')
                                    .setTitle('üîÑ Reset Manuel')
                                    .setDescription(`Le comptage a √©t√© remis √† z√©ro par ${interaction.user.displayName}.\n\nProchain num√©ro: **${config.currentNumber}**`)]
                            });
                        } catch (error) {
                            console.error('Erreur notification reset:', error);
                        }
                    }
                    break;

                case 'config':
                    const startNumber = interaction.options.getInteger('nombre') || 1;
                    
                    config.startNumber = startNumber;
                    if (!config.enabled) {
                        config.currentNumber = startNumber;
                    }
                    
                    countingConfig[guildId] = config;
                    await dataManager.setData('counting', countingConfig);
                    
                    embed.setTitle('‚öôÔ∏è Configuration Mise √† Jour')
                        .setDescription('Les param√®tres de comptage ont √©t√© modifi√©s.')
                        .addFields([
                            { name: 'üéØ Num√©ro de d√©part', value: startNumber.toString(), inline: true },
                            { name: 'üìä Num√©ro actuel', value: config.currentNumber.toString(), inline: true },
                            { name: 'üí° Info', value: 'Le num√©ro de d√©part s\'appliquera au prochain reset ou activation.', inline: false }
                        ]);
                    
                    await interaction.reply({ embeds: [embed] });
                    break;

                case 'info':
                    if (!config.enabled) {
                        embed.setTitle('üìä Information Comptage')
                            .setDescription('‚ùå Le syst√®me de comptage n\'est pas activ√© sur ce serveur.')
                            .addFields([
                                { name: 'üèÜ Record du serveur', value: config.record.toString(), inline: true },
                                { name: 'üéØ Num√©ro de d√©part configur√©', value: config.startNumber.toString(), inline: true }
                            ]);
                    } else {
                        const channel = await interaction.guild.channels.fetch(config.channelId);
                        embed.setTitle('üìä Information Comptage')
                            .setDescription(`‚úÖ Syst√®me actif dans ${channel}`)
                            .addFields([
                                { name: 'üî¢ Num√©ro actuel', value: config.currentNumber.toString(), inline: true },
                                { name: 'üèÜ Record du serveur', value: config.record.toString(), inline: true },
                                { name: 'üìà Total comptages', value: config.totalCounts.toString(), inline: true },
                                { name: 'üéØ Num√©ro de d√©part', value: config.startNumber.toString(), inline: true },
                                { name: 'üë§ Dernier compteur', value: config.lastUserId ? `<@${config.lastUserId}>` : 'Aucun', inline: true },
                                { name: 'üìÖ Dernier reset', value: config.lastResetDate ? new Date(config.lastResetDate).toLocaleDateString('fr-FR') : 'Jamais', inline: true }
                            ]);
                        
                        if (config.lastResetReason) {
                            embed.addFields([{ name: 'üîÑ Raison du dernier reset', value: config.lastResetReason, inline: false }]);
                        }
                    }
                    
                    await interaction.reply({ embeds: [embed] });
                    break;
            }

        } catch (error) {
            console.error('‚ùå Erreur comptage:', error);
            await interaction.reply({
                content: '‚ùå Une erreur est survenue lors de la configuration du comptage.',
                flags: 64
            });
        }
    }
};