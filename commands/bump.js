/**
 * COMMANDE BUMP
 * Syst√®me de bump multi-plateforme similaire √† Disboard
 */

const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('bump')
        .setDescription('Bump le serveur sur plusieurs plateformes en une seule commande')
        .addStringOption(option =>
            option.setName('plateforme')
                .setDescription('Plateforme sp√©cifique √† bump (optionnel)')
                .setRequired(false)
                .addChoices(
                    { name: 'üî• Top.gg', value: 'topgg' },
                    { name: '‚≠ê Discord Bot List', value: 'discordbotlist' },
                    { name: 'üö¢ Discord Boats', value: 'discordboats' },
                    { name: 'ü§ñ Discord Bots', value: 'discordbots' },
                    { name: 'üì¢ Disboard', value: 'disboard' }
                )
        ),

    async execute(interaction, client) {
        try {
            const bumpManager = client.bumpManager;
            if (!bumpManager) {
                return await interaction.reply({
                    content: '‚ùå Le syst√®me de bump n\'est pas disponible.',
                    ephemeral: true
                });
            }

            const guildId = interaction.guild.id;
            const userId = interaction.user.id;
            const specificPlatform = interaction.options.getString('plateforme');

            // V√©rifier les permissions
            if (!interaction.member.permissions.has('ManageGuild')) {
                return await interaction.reply({
                    content: '‚ùå Vous devez avoir la permission "G√©rer le serveur" pour utiliser cette commande.',
                    ephemeral: true
                });
            }

            await interaction.deferReply();

            // V√©rifier la configuration
            const config = await bumpManager.getBumpConfig(guildId);
            const hasNSFWChannels = interaction.guild.channels.cache.some(channel => channel.nsfw);
            const allEnabledPlatforms = bumpManager.getAllEnabledPlatforms(config, hasNSFWChannels);
            
            if (allEnabledPlatforms.length === 0) {
                const embed = new EmbedBuilder()
                    .setTitle('‚öôÔ∏è Configuration requise')
                    .setDescription('Aucune plateforme n\'est configur√©e pour ce serveur.')
                    .setColor('#ffcc00')
                    .addFields(
                        { 
                            name: 'Comment configurer ?', 
                            value: 'Utilisez la commande `/bump-config` pour activer les plateformes de votre choix.' 
                        }
                    );

                const configButton = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('bump_config')
                            .setLabel('Configurer maintenant')
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji('‚öôÔ∏è')
                    );

                return await interaction.editReply({
                    embeds: [embed],
                    components: [configButton]
                });
            }

            // Si une plateforme sp√©cifique est demand√©e
            if (specificPlatform) {
                if (!allEnabledPlatforms.includes(specificPlatform)) {
                    return await interaction.editReply({
                        content: `‚ùå La plateforme ${bumpManager.platforms[specificPlatform].name} n'est pas activ√©e sur ce serveur.`,
                    });
                }

                const cooldownInfo = await bumpManager.checkCooldowns(guildId, userId);
                
                if (!cooldownInfo.canBump.includes(specificPlatform)) {
                    const onCooldownPlatform = cooldownInfo.onCooldown.find(cd => cd.platform === specificPlatform);
                    if (onCooldownPlatform) {
                        const embed = new EmbedBuilder()
                            .setTitle('‚è∞ Cooldown actif')
                            .setDescription(`La plateforme ${bumpManager.platforms[specificPlatform].name} est en cooldown.`)
                            .addFields({
                                name: 'Temps restant',
                                value: bumpManager.formatTimeLeft(onCooldownPlatform.timeLeft),
                                inline: true
                            })
                            .setColor('#ff6b6b');

                        return await interaction.editReply({ embeds: [embed] });
                    }
                }

                // Effectuer le bump sur la plateforme sp√©cifique
                const results = await bumpManager.performBump(guildId, userId, [specificPlatform]);
                const result = results[0];

                if (result.success) {
                    const embed = new EmbedBuilder()
                        .setTitle('‚úÖ Bump r√©ussi !')
                        .setDescription(`Le serveur a √©t√© bump√© avec succ√®s sur ${bumpManager.platforms[specificPlatform].name}`)
                        .setColor('#00ff00')
                        .setTimestamp();

                    await interaction.editReply({ embeds: [embed] });
                } else {
                    const embed = new EmbedBuilder()
                        .setTitle('‚ùå Erreur de bump')
                        .setDescription(`Erreur lors du bump sur ${bumpManager.platforms[specificPlatform].name}`)
                        .setColor('#ff0000');

                    await interaction.editReply({ embeds: [embed] });
                }
                return;
            }

            // Affichage du statut g√©n√©ral et interface de s√©lection
            const cooldownInfo = await bumpManager.checkCooldowns(guildId, userId);
            const embed = bumpManager.createBumpStatusEmbed(guildId, cooldownInfo);

            const components = [];

            // Menu de s√©lection si des plateformes sont disponibles
            if (cooldownInfo.canBump.length > 0) {
                const selectMenu = bumpManager.createPlatformSelectMenu(cooldownInfo.canBump);
                components.push(selectMenu);
            }

            // Boutons d'action
            const actionButtons = bumpManager.createActionButtons(cooldownInfo.canBump.length > 0);
            components.push(actionButtons);

            await interaction.editReply({
                embeds: [embed],
                components: components
            });

        } catch (error) {
            console.error('‚ùå Error in bump command:', error);
            
            if (interaction.deferred) {
                await interaction.editReply({
                    content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande bump.',
                });
            } else {
                await interaction.reply({
                    content: '‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande bump.',
                    ephemeral: true
                });
            }
        }
    }
};