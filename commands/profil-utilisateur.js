const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('profil-utilisateur')
        .setDescription('Afficher votre carte de profil holographique')
        .addUserOption(option =>
            option.setName('membre')
                .setDescription('Membre dont voir le profil (optionnel)')
                .setRequired(false)),

    async execute(interaction, dataManager) {
        try {
            const targetUser = interaction.options.getUser('membre') || interaction.user;
            const userId = targetUser.id;
            const guildId = interaction.guild.id;
            
            // R√©cup√©rer donn√©es utilisateur
            const users = await dataManager.getData('users');
            const userKey = `${userId}_${guildId}`;
            const userData = users[userKey] || { 
                balance: 0, 
                karmaGood: 0, 
                karmaBad: 0,
                lastWork: null,
                lastFish: null,
                lastSteal: null,
                lastCrime: null,
                lastBet: null,
                lastDonate: null,
                dailyStreak: 0,
                messageCount: 0
            };

            // Calculer statistiques avanc√©es
            const karmaNet = (userData.karmaGood || 0) - (userData.karmaBad || 0);
            const totalActions = [
                userData.lastWork,
                userData.lastFish,
                userData.lastSteal,
                userData.lastCrime,
                userData.lastBet,
                userData.lastDonate
            ].filter(Boolean).length;

            // R√©cup√©rer niveau karma personnalis√© avec s√©curit√©
            let karmaLevel;
            try {
                const karmaConfig = await dataManager.getData('karma_config') || {};
                const customRewards = karmaConfig[guildId]?.customRewards || [];
                karmaLevel = this.calculateKarmaLevel(karmaNet, customRewards);
            } catch (error) {
                console.error('‚ùå Erreur karma config:', error);
                karmaLevel = this.getDefaultKarmaLevel(karmaNet);
            }

            // Calculer niveau et XP (bas√© sur argent et actions)
            const xpFromMoney = Math.floor((userData.balance || 0) / 100);
            const xpFromActions = totalActions * 50;
            const xpFromMessages = (userData.messageCount || 0) * 2;
            const totalXP = xpFromMoney + xpFromActions + xpFromMessages;
            const level = Math.floor(totalXP / 1000) + 1;
            const nextLevelXP = level * 1000;
            const xpProgress = totalXP - ((level - 1) * 1000);

            // D√©terminer raret√© de la carte
            const cardRarity = this.getCardRarity(level, karmaNet, userData.balance, userData.dailyStreak);

            // Cr√©er l'embed de la carte holographique
            const embed = this.createHolographicCard(targetUser, userData, {
                karmaNet,
                karmaLevel,
                level,
                xpProgress,
                nextLevelXP,
                totalXP,
                cardRarity,
                totalActions
            });

            await interaction.reply({
                embeds: [embed],
                flags: 64
            });

        } catch (error) {
            console.error('‚ùå Erreur profil-utilisateur:', error);
            await interaction.reply({
                content: '‚ùå Une erreur est survenue lors de l\'affichage du profil.',
                flags: 64
            });
        }
    },

    calculateKarmaLevel(karmaNet, customRewards) {
        // V√©rifier si customRewards existe et est un tableau
        if (!customRewards || !Array.isArray(customRewards) || customRewards.length === 0) {
            return this.getDefaultKarmaLevel(karmaNet);
        }

        // Trier les r√©compenses par seuil d√©croissant
        const sortedRewards = customRewards
            .filter(reward => reward && 
                typeof reward.karmaThreshold === 'number' && 
                reward.name && 
                reward.description)
            .sort((a, b) => b.karmaThreshold - a.karmaThreshold);

        // Trouver le niveau correspondant
        for (const reward of sortedRewards) {
            if (karmaNet >= reward.karmaThreshold) {
                return {
                    name: reward.name || 'Niveau Personnalis√©',
                    description: reward.description || 'Niveau karma personnalis√©',
                    money: reward.money || 0,
                    icon: this.getKarmaIcon(reward.karmaThreshold)
                };
            }
        }

        // Niveau par d√©faut si aucun niveau personnalis√© correspondant
        return this.getDefaultKarmaLevel(karmaNet);
    },

    getDefaultKarmaLevel(karmaNet) {
        if (karmaNet >= 50) return { name: 'Saint', icon: 'üòá', description: '√Çme pure et g√©n√©reuse' };
        if (karmaNet >= 20) return { name: 'Bon', icon: 'üòä', description: 'Personne bienveillante' };
        if (karmaNet >= -19) return { name: 'Neutre', icon: 'üòê', description: '√âquilibre parfait' };
        if (karmaNet >= -49) return { name: 'Mauvais', icon: 'üò†', description: 'Tendances n√©gatives' };
        return { name: 'Diabolique', icon: 'üòà', description: '√Çme corrompue' };
    },

    getKarmaIcon(threshold) {
        if (threshold >= 50) return 'üòá';
        if (threshold >= 20) return 'üòä';
        if (threshold >= -19) return 'üòê';
        if (threshold >= -49) return 'üò†';
        return 'üòà';
    },

    getCardRarity(level, karmaNet, balance, dailyStreak) {
        const score = level + Math.abs(karmaNet) / 10 + balance / 1000 + dailyStreak;
        
        if (score >= 100) return { name: 'Mythique', color: '#ff6b6b', icon: 'üåü', border: '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' };
        if (score >= 75) return { name: 'L√©gendaire', color: '#ffd93d', icon: '‚≠ê', border: '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' };
        if (score >= 50) return { name: '√âpique', color: '#a8e6cf', icon: 'üíé', border: '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' };
        if (score >= 25) return { name: 'Rare', color: '#87ceeb', icon: 'üíô', border: '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' };
        return { name: 'Commune', color: '#dda0dd', icon: 'ü§ç', border: '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê' };
    },

    createHolographicCard(user, userData, stats) {
        const { karmaNet, karmaLevel, level, xpProgress, nextLevelXP, totalXP, cardRarity, totalActions } = stats;

        // Design futuriste avec circuits √©lectroniques bleu cyan
        const cardDesign = `\`\`\`
    ‚ïî‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïó
   ‚ïî‚ïù ‚ó¶ ‚óã ‚ó¶                             ‚ó¶ ‚óã ‚ó¶ ‚ïö‚ïó
  ‚ïî‚ïù  ‚ïî‚ïê‚óã‚ïê‚ïó    üé¥ CARTE HOLOGRAPHIQUE   ‚ïî‚ïê‚óã‚ïê‚ïó  ‚ïö‚ïó
 ‚ïî‚ïù   ‚ïë   ‚ïë          ${user.displayName.padEnd(12).substring(0, 12)}        ‚ïë   ‚ïë   ‚ïö‚ïó
‚ïî‚ïù ‚ó¶  ‚ïö‚ïê‚óã‚ïê‚ïù                             ‚ïö‚ïê‚óã‚ïê‚ïù  ‚ó¶ ‚ïö‚ïó
‚ïë                                                 ‚ïë
‚ïë  ‚ïî‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïó   ‚ïë
‚ïë  ‚ïë                                       ‚ïë   ‚ïë
‚ïë  ‚ïë  üíé LVL ${level.toString().padStart(2)}  üí∞ ${(userData.balance || 0).toLocaleString().padStart(8)}‚Ç¨      ‚ïë   ‚ïë
‚ïë  ‚ïë  ‚öñÔ∏è  ${karmaNet >= 0 ? '+' : ''}${karmaNet.toString().padStart(3)} ${karmaLevel.icon}  üéØ ${totalActions} actions    ‚ïë   ‚ïë
‚ïë  ‚ïë                                       ‚ïë   ‚ïë
‚ïë  ‚ïë  ‚îå‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îê     ‚ïë   ‚ïë
‚ïë  ‚ïë  ‚îÇ    ${cardRarity.name.toUpperCase().padEnd(16)}    ‚îÇ     ‚ïë   ‚ïë
‚ïë  ‚ïë  ‚îÇ    ${karmaLevel.name.padEnd(16)}    ‚îÇ     ‚ïë   ‚ïë
‚ïë  ‚ïë  ‚îî‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îò     ‚ïë   ‚ïë
‚ïë  ‚ïë                                       ‚ïë   ‚ïë
‚ïë  ‚ïö‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïù   ‚ïë
‚ïë                                                 ‚ïë
‚ïö‚ïó ‚ó¶  ‚ïî‚ïê‚óã‚ïê‚ïó                             ‚ïî‚ïê‚óã‚ïê‚ïó  ‚ó¶ ‚ïî‚ïù
 ‚ïö‚ïó   ‚ïë   ‚ïë      ${cardRarity.icon} ${cardRarity.name}      ‚ïë   ‚ïë   ‚ïî‚ïù
  ‚ïö‚ïó  ‚ïö‚ïê‚óã‚ïê‚ïù                             ‚ïö‚ïê‚óã‚ïê‚ïù  ‚ïî‚ïù
   ‚ïö‚ïó ‚ó¶ ‚óã ‚ó¶                             ‚ó¶ ‚óã ‚ó¶ ‚ïî‚ïù
    ‚ïö‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚óã‚ïê‚ïê‚ïê‚ïù
\`\`\``;

        const embed = new EmbedBuilder()
            .setColor('#00FFFF') // Cyan futuriste
            .setTitle(`${cardRarity.icon} SYST√àME HOLOGRAPHIQUE ACTIV√â`)
            .setDescription(cardDesign)
            .addFields([
                {
                    name: 'üîã DONN√âES BIOM√âTRIQUES',
                    value: `\`\`\`
‚óã KARMA POSITIF: ${(userData.karmaGood || 0).toString().padStart(3)}
‚óã KARMA N√âGATIF: ${(userData.karmaBad || 0).toString().padStart(3)}  
‚óã BALANCE NET:   ${karmaNet >= 0 ? '+' : ''}${karmaNet}
‚óã STREAK DAILY:  ${(userData.dailyStreak || 0)} jours
\`\`\``,
                    inline: true
                },
                {
                    name: '‚ö° PROGRESSION SYST√àME',
                    value: `\`\`\`
‚óã NIVEAU ACTUEL: ${level}
‚óã XP TOTAL:      ${totalXP.toLocaleString()}
‚óã XP RESTANT:    ${nextLevelXP - totalXP}
‚óã RARET√â:        ${cardRarity.name}
\`\`\``,
                    inline: true
                },
                {
                    name: 'üåê STATUT HOLOGRAPHIQUE',
                    value: `\`\`\`
‚óã TYPE: ${karmaLevel.name}
‚óã DESCRIPTION: ${karmaLevel.description}
‚óã SCORE GLOBAL: ${Math.floor(cardRarity.score)}
‚óã ID UNIQUE: ${user.id.slice(-8)}
\`\`\``,
                    inline: false
                }
            ])
            .setThumbnail(user.displayAvatarURL())
            .setFooter({ 
                text: `‚ó¶ HOLOGRAM-TECH ¬© ${new Date().getFullYear()} ‚ó¶ SCAN COMPLETED ‚ó¶`,
                iconURL: user.displayAvatarURL() 
            });

        return embed;
    }
};