const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('crime')
        .setDescription('Faire un coup de folie pour beaucoup de plaisir (Action tr√®s piment√©e üòà)'),

    async execute(interaction, dataManager) {
        try {
            const userId = interaction.user.id;
            const guildId = interaction.guild.id;
            
            // Charger la configuration √©conomique
            const economyConfig = await dataManager.loadData('economy.json', {});
            const actionConfig = economyConfig.actions?.crime || {
                enabled: true,
                minReward: 200,
                maxReward: 600,
                cooldown: 14400000, // 4 heures
                goodKarma: -2,
                badKarma: 3
            };

            // V√©rifier si l'action est activ√©e
            if (!actionConfig.enabled) {
                await interaction.reply({
                    content: '‚ùå La commande /coup-de-folie est actuellement d√©sactiv√©e.',
                    flags: 64
                });
                return;
            }
            
            // V√©rifier cooldown avec dataManager
            const userData = await dataManager.getUser(userId, guildId);
            
            const now = Date.now();
            const cooldownTime = actionConfig.cooldown;
            
            if (userData.lastCrime && (now - userData.lastCrime) < cooldownTime) {
                const remaining = Math.ceil((cooldownTime - (now - userData.lastCrime)) / 60000);
                return await interaction.reply({
                    content: `‚è∞ Vous devez attendre encore **${remaining} minutes** avant de pouvoir refaire un coup de folie.`,
                    flags: 64
                });
            }
            
            // Probabilit√© de succ√®s (60% - plus risqu√© que le vol)
            const success = Math.random() < 0.6;
            
            const crimes = [
                'Vous avez tent√© un baiser vol√©',
                'Vous avez envoy√© un message audacieux',
                'Vous avez dans√© au milieu de la piste',
                'Vous avez flirt√© sans retenue',
                'Vous avez souffl√© des compliments torrides'
            ];
            
            const crime = crimes[Math.floor(Math.random() * crimes.length)];
            
            if (success) {
                // Crime r√©ussi - gains selon configuration
                const earnings = Math.floor(Math.random() * (actionConfig.maxReward - actionConfig.minReward + 1)) + actionConfig.minReward;
                
                userData.balance = (userData.balance || 1000) + earnings;
                userData.badKarma = (userData.badKarma || 0) + actionConfig.badKarma;
                userData.goodKarma = (userData.goodKarma || 0) + actionConfig.goodKarma;
                userData.lastCrime = now;
                
                await dataManager.updateUser(userId, guildId, userData);
                
                // Calculer karma net apr√®s mise √† jour
                const karmaNet = userData.goodKarma - userData.badKarma;
                
                const embed = new EmbedBuilder()
                    .setColor('#8b0000')
                    .setTitle('üî• Coup de Folie R√©ussi !')
                    .setDescription(`${crime} et avez gagn√© **${earnings}üíã** !`)
                    .addFields([
                        {
                            name: 'üíã Nouveau Plaisir',
                            value: `${userData.balance}üíã`,
                            inline: true
                        },
                        {
                            name: 'üòà Karma N√©gatif',
                            value: `${actionConfig.badKarma >= 0 ? '+' : ''}${actionConfig.badKarma} (${userData.badKarma})`,
                            inline: true
                        },
                        {
                            name: 'üòá Karma Positif',
                            value: `${actionConfig.goodKarma >= 0 ? '+' : ''}${actionConfig.goodKarma} (${userData.goodKarma})`,
                            inline: true
                        },
                        {
                            name: '‚öñÔ∏è R√©putation ü•µ',
                            value: `${karmaNet >= 0 ? '+' : ''}${karmaNet}`,
                            inline: true
                        },
                        {
                            name: '‚ö†Ô∏è Attention',
                            value: 'Vos actions ont des cons√©quences morales',
                            inline: false
                        }
                    ])
                    .setFooter({ text: `Prochaine utilisation dans ${Math.round(actionConfig.cooldown / 3600000)} heures` });
                    
                await interaction.reply({ embeds: [embed] });
                
            } else {
                // Crime √©chou√© - amende selon configuration
                const penalty = Math.floor(actionConfig.minReward / 2);
                userData.balance = Math.max(0, (userData.balance || 1000) - penalty);
                userData.badKarma = (userData.badKarma || 0) + Math.floor(actionConfig.badKarma / 2);
                userData.goodKarma = (userData.goodKarma || 0) + Math.floor(actionConfig.goodKarma / 2);
                userData.lastCrime = now;
                
                await dataManager.updateUser(userId, guildId, userData);
                
                // Calculer karma net apr√®s mise √† jour
                const karmaNet = userData.goodKarma - userData.badKarma;
                
                const embed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå Coup de Folie √âchou√© !')
                    .setDescription(`√áa n'a pas pris... P√©nalit√© de **${penalty}üíã**.`)
                    .addFields([
                        {
                            name: 'üíã Nouveau Plaisir',
                            value: `${userData.balance}üíã`,
                            inline: true
                        },
                        {
                            name: 'üòà Karma N√©gatif',
                            value: `${Math.floor(actionConfig.badKarma / 2) >= 0 ? '+' : ''}${Math.floor(actionConfig.badKarma / 2)} (${userData.badKarma})`,
                            inline: true
                        },
                        {
                            name: 'üòá Karma Positif',
                            value: `${Math.floor(actionConfig.goodKarma / 2) >= 0 ? '+' : ''}${Math.floor(actionConfig.goodKarma / 2)} (${userData.goodKarma})`,
                            inline: true
                        },
                        {
                            name: '‚öñÔ∏è R√©putation ü•µ',
                            value: `${karmaNet >= 0 ? '+' : ''}${karmaNet}`,
                            inline: true
                        },
                        {
                            name: '‚öñÔ∏è Justice',
                            value: 'Le crime ne paie pas toujours',
                            inline: false
                        }
                    ])
                    .setFooter({ text: `Prochaine utilisation dans ${Math.round(actionConfig.cooldown / 3600000)} heures` });
                    
                await interaction.reply({ embeds: [embed] });
            }
            
        } catch (error) {
            console.error('‚ùå Erreur crime:', error);
            await interaction.reply({
                content: '‚ùå Une erreur est survenue.',
                flags: 64
            });
        }
    }
};