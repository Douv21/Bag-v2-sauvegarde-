const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

function asNumber(value, fallback = 0) {
  const n = Number(value);
  return Number.isFinite(n) ? n : fallback;
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('oser')
        .setDescription('Oser pour gagner du plaisir (Action piment√©e üòà)')
        .addIntegerOption(option =>
            option.setName('montant')
                .setDescription('Montant √† oser (minimum 10üíã)')
                .setRequired(true)
                .setMinValue(10)),

    async execute(interaction, dataManager) {
        try {
            const userId = interaction.user.id;
            const guildId = interaction.guild.id;
            const betAmount = asNumber(interaction.options.getInteger('montant'), 0);
            
            // Charger la configuration √©conomique
            const economyConfig = await dataManager.loadData('economy.json', {});
            const rawCfg = (economyConfig.actions?.oser || economyConfig.actions?.parier) || {};
            
            const enabled = rawCfg.enabled !== false;
            const winChance = asNumber(rawCfg.winChance, 0.45);
            const cooldown = asNumber(rawCfg.cooldown, 1800000);
            const deltaGood = asNumber(rawCfg.goodKarma, -1);
            const deltaBad = asNumber(rawCfg.badKarma, 1);

            // V√©rifier si l'action est activ√©e
            if (!enabled) {
                await interaction.reply({ content: '‚ùå La commande /oser est actuellement d√©sactiv√©e.', flags: 64 });
                return;
            }
            
            // V√©rifier cooldown avec dataManager
            const userData = await dataManager.getUser(userId, guildId);
            
            const now = Date.now();
            const cooldownTime = cooldown;
            
            if (userData.lastBet && (now - userData.lastBet) < cooldownTime) {
                const remaining = Math.ceil((cooldownTime - (now - userData.lastBet)) / 60000);
                return await interaction.reply({ content: `‚è∞ Vous devez attendre encore **${remaining} minutes** avant de pouvoir oser √† nouveau.`, flags: 64 });
            }
            
            const currentBalance = asNumber(userData.balance, 0);
            if (currentBalance < betAmount) {
                return await interaction.reply({ content: `‚ùå Vous n'avez pas assez de plaisir ! Votre solde : **${currentBalance}üíã**`, flags: 64 });
            }
            
            // Probabilit√© de gagner selon configuration
            const win = Math.random() < winChance;
            
            if (win) {
                // Victoire - profit net = mise
                userData.balance = currentBalance + betAmount;
                userData.badKarma = (asNumber(userData.badKarma, 0)) + deltaBad;
                userData.goodKarma = (asNumber(userData.goodKarma, 0)) + deltaGood;
                userData.lastBet = now;
                
                await dataManager.updateUser(userId, guildId, userData);
                
                // Calculer karma net apr√®s mise √† jour
                const karmaNet = (asNumber(userData.goodKarma, 0)) - (asNumber(userData.badKarma, 0));
                
                const embed = new EmbedBuilder()
                    .setColor('#ffd700')
                    .setTitle('üé≤ Ose R√©ussi !')
                    .setDescription('F√©licitations ! Vous avez doubl√© votre mise !')
                    .addFields([
                        { name: 'üíã Plaisir Gagn√©', value: `+${betAmount}üíã`, inline: true },
                        { name: 'üíã Nouveau Plaisir', value: `${userData.balance}üíã`, inline: true },
                        { name: 'üòà Karma N√©gatif', value: `${deltaBad >= 0 ? '+' : ''}${deltaBad} (${userData.badKarma})`, inline: true },
                        { name: 'üòá Karma Positif', value: `${deltaGood >= 0 ? '+' : ''}${deltaGood} (${userData.goodKarma})`, inline: true },
                        { name: '‚öñÔ∏è R√©putation ü•µ', value: `${karmaNet >= 0 ? '+' : ''}${karmaNet}`, inline: true },
                        { name: 'üé≤ Chance', value: `${Math.round(winChance * 100)}% de victoire`, inline: true }
                    ])
                    .setFooter({ text: `Prochaine utilisation dans ${Math.round(cooldown / 60000)} minutes` });
                
                await interaction.reply({ embeds: [embed] });
                
            } else {
                // D√©faite - perte de la mise
                userData.balance = Math.max(0, currentBalance - betAmount);
                userData.badKarma = (asNumber(userData.badKarma, 0)) + deltaBad;
                userData.goodKarma = (asNumber(userData.goodKarma, 0)) + deltaGood;
                userData.lastBet = now;
                
                await dataManager.updateUser(userId, guildId, userData);
                
                const karmaNet = (asNumber(userData.goodKarma, 0)) - (asNumber(userData.badKarma, 0));
                
                const embed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('üé≤ Ose Perdu !')
                    .setDescription('Dommage ! Vous avez perdu votre mise.')
                    .addFields([
                        { name: 'üíã Plaisir Perdu', value: `-${betAmount}üíã`, inline: true },
                        { name: 'üíã Nouveau Plaisir', value: `${userData.balance}üíã`, inline: true },
                        { name: 'üòà Karma N√©gatif', value: `${deltaBad >= 0 ? '+' : ''}${deltaBad} (${userData.badKarma})`, inline: true },
                        { name: 'üòá Karma Positif', value: `${deltaGood >= 0 ? '+' : ''}${deltaGood} (${userData.goodKarma})`, inline: true },
                        { name: '‚öñÔ∏è R√©putation ü•µ', value: `${karmaNet >= 0 ? '+' : ''}${karmaNet}`, inline: true },
                        { name: 'üé≤ Chance', value: `${Math.round(winChance * 100)}% de victoire`, inline: true }
                    ])
                    .setFooter({ text: `Prochaine utilisation dans ${Math.round(cooldown / 60000)} minutes` });
                
                await interaction.reply({ embeds: [embed] });
            }
            
        } catch (error) {
            console.error('‚ùå Erreur oser:', error);
            await interaction.reply({ content: '‚ùå Une erreur est survenue.', flags: 64 });
        }
    }
};