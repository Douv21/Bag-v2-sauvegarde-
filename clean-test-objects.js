const { MongoClient } = require('mongodb');

/**
 * Script de nettoyage des objets test dans MongoDB
 * Supprime tous les objets test qui peuvent √™tre rest√©s dans la base
 */

class TestObjectCleaner {
    constructor() {
        // Utiliser les m√™mes variables que le syst√®me existant
        this.username = process.env.MONGODB_USERNAME;
        this.password = process.env.MONGODB_PASSWORD;
        this.clusterUrl = process.env.MONGODB_CLUSTER_URL;
        this.client = null;
    }

    async connect() {
        // V√©rifier les variables d'environnement comme dans mongodbDiagnostic.js
        if (!this.username || !this.password || !this.clusterUrl) {
            console.log('‚ö†Ô∏è Variables d\'environnement MongoDB manquantes');
            console.log(`   Username: ${this.username ? '‚úì' : '‚úó'}`);
            console.log(`   Password: ${this.password ? '‚úì' : '‚úó'}`);
            console.log(`   Cluster: ${this.clusterUrl ? '‚úì' : '‚úó'}`);
            console.log('üí° Mode local uniquement - pas de nettoyage MongoDB n√©cessaire');
            return false;
        }

        try {
            // Nettoyer l'URL du cluster comme dans mongodbDiagnostic.js
            let cleanUrl = this.clusterUrl;
            if (cleanUrl.includes('mongodb+srv://')) {
                const match = cleanUrl.match(/@([^\/\?]+)/);
                if (match) {
                    cleanUrl = match[1];
                }
            }

            // Construire la cha√Æne de connexion
            const connectionString = `mongodb+srv://${encodeURIComponent(this.username)}:${encodeURIComponent(this.password)}@${cleanUrl}/bagbot?retryWrites=true&w=majority`;
            
            console.log('üîå Connexion √† MongoDB...');
            this.client = new MongoClient(connectionString, {
                serverSelectionTimeoutMS: 15000,
                connectTimeoutMS: 15000,
                maxPoolSize: 10
            });
            
            await this.client.connect();
            console.log('‚úÖ Connexion MongoDB √©tablie');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur connexion MongoDB:', error.message);
            return false;
        }
    }

    async cleanTestObjects() {
        if (!this.client) {
            console.log('‚ùå Pas de connexion MongoDB active');
            return;
        }

        try {
            const db = this.client.db('bagbot');
            
            // 1. Nettoyer la collection 'test' compl√®tement
            console.log('üßπ Nettoyage collection test...');
            const testCollection = db.collection('test');
            const testResult = await testCollection.deleteMany({});
            console.log(`‚úÖ ${testResult.deletedCount} objets supprim√©s de la collection test`);

            // 2. Nettoyer les objets test dans d'autres collections
            console.log('üßπ Recherche d\'objets test dans toutes les collections...');
            
            const collections = await db.listCollections().toArray();
            let totalCleaned = 0;

            for (const collectionInfo of collections) {
                const collectionName = collectionInfo.name;
                if (collectionName === 'test') continue; // D√©j√† nettoy√©e

                console.log(`üîç V√©rification collection: ${collectionName}`);
                const collection = db.collection(collectionName);

                // Rechercher diff√©rents patterns d'objets test
                const testPatterns = [
                    { test: true },
                    { test: { $exists: true } },
                    { name: /test/i },
                    { id: /test/i },
                    { userId: '999999999999999999' }, // ID de test du script de test d'int√©grit√©
                    { guildId: '888888888888888888' } // ID de test du script de test d'int√©grit√©
                ];

                for (const pattern of testPatterns) {
                    try {
                        const result = await collection.deleteMany(pattern);
                        if (result.deletedCount > 0) {
                            console.log(`  ‚úÖ ${result.deletedCount} objets test supprim√©s (pattern: ${JSON.stringify(pattern)})`);
                            totalCleaned += result.deletedCount;
                        }
                    } catch (error) {
                        console.log(`  ‚ö†Ô∏è Erreur avec pattern ${JSON.stringify(pattern)}: ${error.message}`);
                    }
                }
            }

            console.log(`üéâ Nettoyage termin√©: ${totalCleaned} objets test supprim√©s au total`);

        } catch (error) {
            console.error('‚ùå Erreur lors du nettoyage:', error.message);
        }
    }

    async listTestObjects() {
        if (!this.client) {
            console.log('‚ùå Pas de connexion MongoDB active');
            return;
        }

        try {
            const db = this.client.db('bagbot');
            const collections = await db.listCollections().toArray();
            
            console.log('üîç Recherche d\'objets test...');
            let totalFound = 0;

            for (const collectionInfo of collections) {
                const collectionName = collectionInfo.name;
                const collection = db.collection(collectionName);

                // Compter les objets test
                const testCount = await collection.countDocuments({ test: { $exists: true } });
                if (testCount > 0) {
                    console.log(`üìã Collection ${collectionName}: ${testCount} objets test trouv√©s`);
                    totalFound += testCount;
                }
            }

            if (totalFound === 0) {
                console.log('‚úÖ Aucun objet test trouv√©');
            } else {
                console.log(`‚ö†Ô∏è Total: ${totalFound} objets test trouv√©s`);
            }

        } catch (error) {
            console.error('‚ùå Erreur lors de la recherche:', error.message);
        }
    }

    async close() {
        if (this.client) {
            await this.client.close();
            console.log('üîå Connexion MongoDB ferm√©e');
        }
    }
}

async function main() {
    const cleaner = new TestObjectCleaner();
    
    // Connexion
    const connected = await cleaner.connect();
    if (!connected) {
        console.log('‚ùå Impossible de se connecter √† MongoDB');
        process.exit(1);
    }

    // V√©rifier les arguments de ligne de commande
    const action = process.argv[2] || 'clean';

    try {
        if (action === 'list') {
            await cleaner.listTestObjects();
        } else if (action === 'clean') {
            await cleaner.listTestObjects();
            console.log('\nüßπ D√©marrage du nettoyage...');
            await cleaner.cleanTestObjects();
        } else {
            console.log('Usage: node clean-test-objects.js [list|clean]');
            console.log('  list  - Lister les objets test sans les supprimer');
            console.log('  clean - Nettoyer tous les objets test (d√©faut)');
        }
    } finally {
        await cleaner.close();
    }
}

// Ex√©cution
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erreur critique:', error);
        process.exit(1);
    });
}

module.exports = TestObjectCleaner;